#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_ino_t = __uint32_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl ::std::fmt::Debug for _opaque_pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "_opaque_pthread_mutex_t {{ __sig: {:?}, __opaque: [{}] }}",
            self.__sig,
            self.__opaque
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type dev_t = __darwin_dev_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type ino_t = __darwin_ino_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval { pub sival_int : :: std :: os :: raw :: c_int , pub sival_ptr : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
impl ::std::fmt::Debug for sigval {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "sigval {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_band as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).__pad as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
impl ::std::fmt::Debug for __siginfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "__siginfo {{ si_signo: {:?}, si_errno: {:?}, si_code: {:?}, si_pid: {:?}, si_uid: {:?}, si_status: {:?}, si_addr: {:?}, si_value: {:?}, si_band: {:?}, __pad: {:?} }}",
            self.si_signo,
            self.si_errno,
            self.si_code,
            self.si_pid,
            self.si_uid,
            self.si_status,
            self.si_addr,
            self.si_value,
            self.si_band,
            self.__pad
        )
    }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        120usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atimespec as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtimespec as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctimespec as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_flags as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gen as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_lspare as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_qspare as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_qspare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    pub tms_utime: clock_t,
    pub tms_stime: clock_t,
    pub tms_cutime: clock_t,
    pub tms_cstime: clock_t,
}
#[test]
fn bindgen_test_layout_tms() {
    assert_eq!(
        ::std::mem::size_of::<tms>(),
        32usize,
        concat!("Size of: ", stringify!(tms))
    );
    assert_eq!(
        ::std::mem::align_of::<tms>(),
        8usize,
        concat!("Alignment of ", stringify!(tms))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tms>())).tms_utime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tms>())).tms_stime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tms>())).tms_cutime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_cutime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tms>())).tms_cstime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_cstime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dirent {
    pub d_ino: ino_t,
    pub d_reclen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_namlen: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        264usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        4usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_namlen as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_namlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
impl ::std::fmt::Debug for dirent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "dirent {{ d_ino: {:?}, d_reclen: {:?}, d_type: {:?}, d_namlen: {:?}, d_name: [{}] }}",
            self.d_ino,
            self.d_reclen,
            self.d_type,
            self.d_namlen,
            self.d_name
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __dd_rewind: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
#[test]
fn bindgen_test_layout_DIR() {
    assert_eq!(
        ::std::mem::size_of::<DIR>(),
        136usize,
        concat!("Size of: ", stringify!(DIR))
    );
    assert_eq!(
        ::std::mem::align_of::<DIR>(),
        8usize,
        concat!("Alignment of ", stringify!(DIR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_loc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_rewind as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_rewind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_lock as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_td as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_td)
        )
    );
}
impl ::std::fmt::Debug for DIR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "DIR {{ __dd_fd: {:?}, __dd_loc: {:?}, __dd_size: {:?}, __dd_buf: {:?}, __dd_len: {:?}, __dd_seek: {:?}, __dd_rewind: {:?}, __dd_flags: {:?}, __dd_lock: {:?}, __dd_td: {:?} }}",
            self.__dd_fd,
            self.__dd_loc,
            self.__dd_size,
            self.__dd_buf,
            self.__dd_len,
            self.__dd_seek,
            self.__dd_rewind,
            self.__dd_flags,
            self.__dd_lock,
            self.__dd_td
        )
    }
}
pub type IV = ::std::os::raw::c_long;
pub type UV = ::std::os::raw::c_ulong;
pub type NV = f64;
pub type STRLEN = usize;
pub type OP = op;
pub type COP = cop;
pub type PMOP = pmop;
pub type LOOP = loop_;
pub type PerlInterpreter = interpreter;
pub type SV = sv;
pub type AV = av;
pub type HV = hv;
pub type CV = cv;
pub type REGEXP = p5rx;
pub type GP = gp;
pub type GV = gv;
pub type PERL_CONTEXT = context;
pub type MAGIC = magic;
pub type XPV = xpv;
pub type XPVAV = xpvav;
pub type XPVHV = xpvhv;
pub type XPVGV = xpvgv;
pub type XPVCV = xpvcv;
pub type XPVIO = xpvio;
pub type MGVTBL = mgvtbl;
pub type ANY = any;
pub type PTR_TBL_t = ptr_tbl;
pub type CLONE_PARAMS = clone_params;
pub type PADLIST = padlist;
pub type PAD = AV;
pub type PADNAMELIST = padnamelist;
pub type PADNAME = padname;
pub type I8 = ::std::os::raw::c_schar;
pub type U8 = ::std::os::raw::c_uchar;
pub type U16 = ::std::os::raw::c_ushort;
pub type I32 = ::std::os::raw::c_int;
pub type U32 = ::std::os::raw::c_uint;
pub type line_t = U32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union any {
    pub any_ptr : * mut :: std :: os :: raw :: c_void ,
    pub any_i32 : I32 ,
    pub any_u32 : U32 ,
    pub any_iv : IV ,
    pub any_uv : UV ,
    pub any_long : :: std :: os :: raw :: c_long ,
    pub any_bool : bool ,
    pub any_dptr : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > ,
    pub any_dxptr : :: std :: option :: Option < unsafe extern "C" fn ( my_perl : * mut PerlInterpreter , arg1 : * mut :: std :: os :: raw :: c_void ) > , _bindgen_union_align : u64 ,
}
#[test]
fn bindgen_test_layout_any() {
    assert_eq!(
        ::std::mem::size_of::<any>(),
        8usize,
        concat!("Size of: ", stringify!(any))
    );
    assert_eq!(
        ::std::mem::align_of::<any>(),
        8usize,
        concat!("Alignment of ", stringify!(any))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_u32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_u32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_long as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_bool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dxptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dxptr)
        )
    );
}
impl ::std::fmt::Debug for any {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "any {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PerlIO {
    _unused: [u8; 0],
}
pub type PerlIOl = _PerlIO;
pub type PerlIO = *mut PerlIOl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PerlIO_list_s {
    _unused: [u8; 0],
}
pub type PerlIO_list_t = PerlIO_list_s;
pub type Sighandler_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int,
                         arg2: *mut siginfo_t,
                         arg3: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub union YYSTYPE { pub ival : I32 , pub pval : * mut :: std :: os :: raw :: c_char , pub opval : * mut OP , pub gvval : * mut GV , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_YYSTYPE() {
    assert_eq!(
        ::std::mem::size_of::<YYSTYPE>(),
        8usize,
        concat!("Size of: ", stringify!(YYSTYPE))
    );
    assert_eq!(
        ::std::mem::align_of::<YYSTYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(YYSTYPE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YYSTYPE>())).ival as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYSTYPE),
            "::",
            stringify!(ival)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YYSTYPE>())).pval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYSTYPE),
            "::",
            stringify!(pval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YYSTYPE>())).opval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYSTYPE),
            "::",
            stringify!(opval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YYSTYPE>())).gvval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYSTYPE),
            "::",
            stringify!(gvval)
        )
    );
}
impl ::std::fmt::Debug for YYSTYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "YYSTYPE {{ union }}")
    }
}
pub type HE = he;
pub type HEK = hek;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sv {
    pub sv_any: *mut ::std::os::raw::c_void,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: sv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sv__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_rx : * mut regexp , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_sv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for sv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "sv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_sv() {
    assert_eq!(
        ::std::mem::size_of::<sv>(),
        24usize,
        concat!("Size of: ", stringify!(sv))
    );
    assert_eq!(
        ::std::mem::align_of::<sv>(),
        8usize,
        concat!("Alignment of ", stringify!(sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(sv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for sv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "sv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gv {
    pub sv_any: *mut XPVGV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: gv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gv__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_rx : * mut regexp , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_gv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<gv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(gv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<gv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(gv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for gv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "gv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_gv() {
    assert_eq!(
        ::std::mem::size_of::<gv>(),
        24usize,
        concat!("Size of: ", stringify!(gv))
    );
    assert_eq!(
        ::std::mem::align_of::<gv>(),
        8usize,
        concat!("Alignment of ", stringify!(gv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(gv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for gv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "gv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cv {
    pub sv_any: *mut XPVCV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: cv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cv__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_rx : * mut regexp , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_cv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for cv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_cv() {
    assert_eq!(
        ::std::mem::size_of::<cv>(),
        24usize,
        concat!("Size of: ", stringify!(cv))
    );
    assert_eq!(
        ::std::mem::align_of::<cv>(),
        8usize,
        concat!("Alignment of ", stringify!(cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(cv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for cv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct av {
    pub sv_any: *mut XPVAV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: av__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union av__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_rx : * mut regexp , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_av__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<av__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(av__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<av__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(av__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for av__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "av__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_av() {
    assert_eq!(
        ::std::mem::size_of::<av>(),
        24usize,
        concat!("Size of: ", stringify!(av))
    );
    assert_eq!(
        ::std::mem::align_of::<av>(),
        8usize,
        concat!("Alignment of ", stringify!(av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(av), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for av {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "av {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hv {
    pub sv_any: *mut XPVHV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: hv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hv__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_rx : * mut regexp , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_hv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(hv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for hv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "hv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_hv() {
    assert_eq!(
        ::std::mem::size_of::<hv>(),
        24usize,
        concat!("Size of: ", stringify!(hv))
    );
    assert_eq!(
        ::std::mem::align_of::<hv>(),
        8usize,
        concat!("Alignment of ", stringify!(hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(hv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for hv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "hv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io {
    pub sv_any: *mut XPVIO,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: io__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_rx : * mut regexp , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_io__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<io__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(io__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for io__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "io__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_io() {
    assert_eq!(
        ::std::mem::size_of::<io>(),
        24usize,
        concat!("Size of: ", stringify!(io))
    );
    assert_eq!(
        ::std::mem::align_of::<io>(),
        8usize,
        concat!("Alignment of ", stringify!(io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(io), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for io {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "io {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct p5rx {
    pub sv_any: *mut regexp,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: p5rx__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union p5rx__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_rx : * mut regexp , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_p5rx__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<p5rx__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(p5rx__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<p5rx__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(p5rx__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for p5rx__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "p5rx__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_p5rx() {
    assert_eq!(
        ::std::mem::size_of::<p5rx>(),
        24usize,
        concat!("Size of: ", stringify!(p5rx))
    );
    assert_eq!(
        ::std::mem::align_of::<p5rx>(),
        8usize,
        concat!("Alignment of ", stringify!(p5rx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx>())).sv_u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx),
            "::",
            stringify!(sv_u)
        )
    );
}
impl ::std::fmt::Debug for p5rx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "p5rx {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union _xnvu { pub xnv_nv : NV , pub xgv_stash : * mut HV , pub xpad_cop_seq : _xnvu__bindgen_ty_1 , _bindgen_union_align : u64 , }#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xnvu__bindgen_ty_1 {
    pub xlow: U32,
    pub xhigh: U32,
}
#[test]
fn bindgen_test_layout__xnvu__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_xnvu__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_xnvu__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_xnvu__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_xnvu__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xnvu__bindgen_ty_1>())).xlow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xnvu__bindgen_ty_1),
            "::",
            stringify!(xlow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xnvu__bindgen_ty_1>())).xhigh as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xnvu__bindgen_ty_1),
            "::",
            stringify!(xhigh)
        )
    );
}
#[test]
fn bindgen_test_layout__xnvu() {
    assert_eq!(
        ::std::mem::size_of::<_xnvu>(),
        8usize,
        concat!("Size of: ", stringify!(_xnvu))
    );
    assert_eq!(
        ::std::mem::align_of::<_xnvu>(),
        8usize,
        concat!("Alignment of ", stringify!(_xnvu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xnvu>())).xnv_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xnvu),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xnvu>())).xgv_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xnvu),
            "::",
            stringify!(xgv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xnvu>())).xpad_cop_seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xnvu),
            "::",
            stringify!(xpad_cop_seq)
        )
    );
}
impl ::std::fmt::Debug for _xnvu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "_xnvu {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _xivu { pub xivu_iv : IV , pub xivu_uv : UV , pub xivu_namehek : * mut HEK , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout__xivu() {
    assert_eq!(
        ::std::mem::size_of::<_xivu>(),
        8usize,
        concat!("Size of: ", stringify!(_xivu))
    );
    assert_eq!(
        ::std::mem::align_of::<_xivu>(),
        8usize,
        concat!("Alignment of ", stringify!(_xivu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xivu>())).xivu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xivu),
            "::",
            stringify!(xivu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xivu>())).xivu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xivu),
            "::",
            stringify!(xivu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xivu>())).xivu_namehek as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xivu),
            "::",
            stringify!(xivu_namehek)
        )
    );
}
impl ::std::fmt::Debug for _xivu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "_xivu {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _xmgu { pub xmg_magic : * mut MAGIC , pub xmg_hash_index : isize , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout__xmgu() {
    assert_eq!(
        ::std::mem::size_of::<_xmgu>(),
        8usize,
        concat!("Size of: ", stringify!(_xmgu))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmgu>(),
        8usize,
        concat!("Alignment of ", stringify!(_xmgu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmgu>())).xmg_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmgu),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmgu>())).xmg_hash_index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmgu),
            "::",
            stringify!(xmg_hash_index)
        )
    );
}
impl ::std::fmt::Debug for _xmgu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "_xmgu {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpv {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xpv_cur: STRLEN,
    pub xpv_len_u: xpv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpv__bindgen_ty_1 { pub xpvlenu_len : STRLEN , pub xpvlenu_pv : * mut :: std :: os :: raw :: c_char , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_xpv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpv__bindgen_ty_1>())).xpvlenu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpv__bindgen_ty_1>())).xpvlenu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_pv)
        )
    );
}
impl ::std::fmt::Debug for xpv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpv() {
    assert_eq!(
        ::std::mem::size_of::<xpv>(),
        32usize,
        concat!("Size of: ", stringify!(xpv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpv>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpv>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpv>())).xpv_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpv>())).xpv_len_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpv),
            "::",
            stringify!(xpv_len_u)
        )
    );
}
impl ::std::fmt::Debug for xpv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpv {{ xmg_stash: {:?}, xmg_u: {:?}, xpv_cur: {:?}, xpv_len_u: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xpv_cur,
            self.xpv_len_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvgv {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xpv_cur: STRLEN,
    pub xpv_len_u: xpvgv__bindgen_ty_1,
    pub xiv_u: _xivu,
    pub xnv_u: _xnvu,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpvgv__bindgen_ty_1 { pub xpvlenu_len : STRLEN , pub xpvlenu_pv : * mut :: std :: os :: raw :: c_char , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_xpvgv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvgv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1>())).xpvlenu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1>())).xpvlenu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_pv)
        )
    );
}
impl ::std::fmt::Debug for xpvgv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvgv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvgv() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv>(),
        48usize,
        concat!("Size of: ", stringify!(xpvgv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_len_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_len_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xiv_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xiv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xnv_u as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xnv_u)
        )
    );
}
impl ::std::fmt::Debug for xpvgv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvgv {{ xmg_stash: {:?}, xmg_u: {:?}, xpv_cur: {:?}, xpv_len_u: {:?}, xiv_u: {:?}, xnv_u: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xpv_cur,
            self.xpv_len_u,
            self.xiv_u,
            self.xnv_u
        )
    }
}
pub type cv_flags_t = U32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvio {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xpv_cur: STRLEN,
    pub xpv_len_u: xpvio__bindgen_ty_1,
    pub xiv_u: _xivu,
    pub xio_ofp: *mut PerlIO,
    pub xio_dirpu: xpvio__bindgen_ty_2,
    pub xio_page: IV,
    pub xio_page_len: IV,
    pub xio_lines_left: IV,
    pub xio_top_name: *mut ::std::os::raw::c_char,
    pub xio_top_gv: *mut GV,
    pub xio_fmt_name: *mut ::std::os::raw::c_char,
    pub xio_fmt_gv: *mut GV,
    pub xio_bottom_name: *mut ::std::os::raw::c_char,
    pub xio_bottom_gv: *mut GV,
    pub xio_type: ::std::os::raw::c_char,
    pub xio_flags: U8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpvio__bindgen_ty_1 { pub xpvlenu_len : STRLEN , pub xpvlenu_pv : * mut :: std :: os :: raw :: c_char , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xpvlenu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xpvlenu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_pv)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpvio__bindgen_ty_2 { pub xiou_dirp : * mut DIR , pub xiou_any : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_2>())).xiou_dirp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_2),
            "::",
            stringify!(xiou_dirp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_2>())).xiou_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_2),
            "::",
            stringify!(xiou_any)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvio() {
    assert_eq!(
        ::std::mem::size_of::<xpvio>(),
        136usize,
        concat!("Size of: ", stringify!(xpvio))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_len_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_len_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xiv_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xiv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_ofp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_ofp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_dirpu as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_dirpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page_len as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_lines_left as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_lines_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_name as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_gv as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_name as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_gv as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_name as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_gv as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_type as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_flags as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_flags)
        )
    );
}
impl ::std::fmt::Debug for xpvio {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvio {{ xmg_stash: {:?}, xmg_u: {:?}, xpv_cur: {:?}, xpv_len_u: {:?}, xiv_u: {:?}, xio_ofp: {:?}, xio_dirpu: {:?}, xio_page: {:?}, xio_page_len: {:?}, xio_lines_left: {:?}, xio_top_name: {:?}, xio_top_gv: {:?}, xio_fmt_name: {:?}, xio_fmt_gv: {:?}, xio_bottom_name: {:?}, xio_bottom_gv: {:?}, xio_type: {:?}, xio_flags: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xpv_cur,
            self.xpv_len_u,
            self.xiv_u,
            self.xio_ofp,
            self.xio_dirpu,
            self.xio_page,
            self.xio_page_len,
            self.xio_lines_left,
            self.xio_top_name,
            self.xio_top_gv,
            self.xio_fmt_name,
            self.xio_fmt_gv,
            self.xio_bottom_name,
            self.xio_bottom_gv,
            self.xio_type,
            self.xio_flags
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clone_params {
    pub stashes: *mut AV,
    pub flags: UV,
    pub proto_perl: *mut PerlInterpreter,
    pub new_perl: *mut PerlInterpreter,
    pub unreferenced: *mut AV,
}
#[test]
fn bindgen_test_layout_clone_params() {
    assert_eq!(
        ::std::mem::size_of::<clone_params>(),
        40usize,
        concat!("Size of: ", stringify!(clone_params))
    );
    assert_eq!(
        ::std::mem::align_of::<clone_params>(),
        8usize,
        concat!("Alignment of ", stringify!(clone_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).stashes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(stashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).proto_perl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(proto_perl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).new_perl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(new_perl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).unreferenced as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(unreferenced)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regnode {
    pub flags: U8,
    pub type_: U8,
    pub next_off: U16,
}
#[test]
fn bindgen_test_layout_regnode() {
    assert_eq!(
        ::std::mem::size_of::<regnode>(),
        4usize,
        concat!("Size of: ", stringify!(regnode))
    );
    assert_eq!(
        ::std::mem::align_of::<regnode>(),
        2usize,
        concat!("Alignment of ", stringify!(regnode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regnode>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regnode),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regnode>())).type_ as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(regnode),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regnode>())).next_off as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(regnode),
            "::",
            stringify!(next_off)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_substr_datum {
    pub min_offset: isize,
    pub max_offset: isize,
    pub substr: *mut SV,
    pub utf8_substr: *mut SV,
    pub end_shift: isize,
}
#[test]
fn bindgen_test_layout_reg_substr_datum() {
    assert_eq!(
        ::std::mem::size_of::<reg_substr_datum>(),
        40usize,
        concat!("Size of: ", stringify!(reg_substr_datum))
    );
    assert_eq!(
        ::std::mem::align_of::<reg_substr_datum>(),
        8usize,
        concat!("Alignment of ", stringify!(reg_substr_datum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).min_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(min_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).max_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(max_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).substr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(substr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).utf8_substr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(utf8_substr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).end_shift as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(end_shift)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_substr_data {
    pub check_ix: U8,
    pub data: [reg_substr_datum; 3usize],
}
#[test]
fn bindgen_test_layout_reg_substr_data() {
    assert_eq!(
        ::std::mem::size_of::<reg_substr_data>(),
        128usize,
        concat!("Size of: ", stringify!(reg_substr_data))
    );
    assert_eq!(
        ::std::mem::align_of::<reg_substr_data>(),
        8usize,
        concat!("Alignment of ", stringify!(reg_substr_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_data>())).check_ix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_data),
            "::",
            stringify!(check_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_data>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regexp_paren_pair {
    pub start: isize,
    pub end: isize,
    pub start_tmp: isize,
}
#[test]
fn bindgen_test_layout_regexp_paren_pair() {
    assert_eq!(
        ::std::mem::size_of::<regexp_paren_pair>(),
        24usize,
        concat!("Size of: ", stringify!(regexp_paren_pair))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp_paren_pair>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp_paren_pair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_paren_pair>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_paren_pair),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_paren_pair>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_paren_pair),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_paren_pair>())).start_tmp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_paren_pair),
            "::",
            stringify!(start_tmp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct regexp {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xpv_cur: STRLEN,
    pub xpv_len_u: regexp__bindgen_ty_1,
    pub engine: *const regexp_engine,
    pub mother_re: *mut REGEXP,
    pub paren_names: *mut HV,
    pub extflags: U32,
    pub minlen: isize,
    pub minlenret: isize,
    pub gofs: STRLEN,
    pub substrs: *mut reg_substr_data,
    pub nparens: U32,
    pub intflags: U32,
    pub pprivate: *mut ::std::os::raw::c_void,
    pub lastparen: U32,
    pub lastcloseparen: U32,
    pub offs: *mut regexp_paren_pair,
    pub subbeg: *mut ::std::os::raw::c_char,
    pub saved_copy: *mut SV,
    pub sublen: isize,
    pub suboffset: isize,
    pub subcoffset: isize,
    pub maxlen: isize,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub qr_anoncv: *mut CV,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union regexp__bindgen_ty_1 { pub xpvlenu_len : STRLEN , pub xpvlenu_pv : * mut :: std :: os :: raw :: c_char , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_regexp__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<regexp__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(regexp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp__bindgen_ty_1>())).xpvlenu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp__bindgen_ty_1>())).xpvlenu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_pv)
        )
    );
}
impl ::std::fmt::Debug for regexp__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "regexp__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_regexp() {
    assert_eq!(
        ::std::mem::size_of::<regexp>(),
        192usize,
        concat!("Size of: ", stringify!(regexp))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).xpv_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).xpv_len_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(xpv_len_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).engine as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).mother_re as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(mother_re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).paren_names as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(paren_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).extflags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(extflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).minlen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(minlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).minlenret as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(minlenret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).gofs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(gofs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).substrs as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(substrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).nparens as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(nparens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).intflags as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(intflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).pprivate as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(pprivate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).lastparen as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(lastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).lastcloseparen as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(lastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).offs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).subbeg as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(subbeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).saved_copy as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(saved_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).sublen as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(sublen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).suboffset as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(suboffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).subcoffset as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(subcoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).maxlen as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(maxlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).qr_anoncv as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(qr_anoncv)
        )
    );
}
impl ::std::fmt::Debug for regexp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "regexp {{ xmg_stash: {:?}, xmg_u: {:?}, xpv_cur: {:?}, xpv_len_u: {:?}, engine: {:?}, mother_re: {:?}, paren_names: {:?}, extflags: {:?}, minlen: {:?}, minlenret: {:?}, gofs: {:?}, substrs: {:?}, nparens: {:?}, intflags: {:?}, pprivate: {:?}, lastparen: {:?}, lastcloseparen: {:?}, offs: {:?}, subbeg: {:?}, saved_copy: {:?}, sublen: {:?}, suboffset: {:?}, subcoffset: {:?}, maxlen: {:?}, pre_prefix : {:?}, compflags : {:?}, qr_anoncv: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xpv_cur,
            self.xpv_len_u,
            self.engine,
            self.mother_re,
            self.paren_names,
            self.extflags,
            self.minlen,
            self.minlenret,
            self.gofs,
            self.substrs,
            self.nparens,
            self.intflags,
            self.pprivate,
            self.lastparen,
            self.lastcloseparen,
            self.offs,
            self.subbeg,
            self.saved_copy,
            self.sublen,
            self.suboffset,
            self.subcoffset,
            self.maxlen,
            self.pre_prefix(),
            self.compflags(),
            self.qr_anoncv
        )
    }
}
impl regexp {
    #[inline]
    pub fn pre_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_pre_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn compflags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_compflags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(pre_prefix: ::std::os::raw::c_uint, compflags: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let pre_prefix: u32 = unsafe { ::std::mem::transmute(pre_prefix) };
            pre_prefix as u64
        });
        __bindgen_bitfield_unit.set(4usize, 9u8, {
            let compflags: u32 = unsafe { ::std::mem::transmute(compflags) };
            compflags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_scream_pos_data_s {
    pub scream_olds: *mut *mut ::std::os::raw::c_char,
    pub scream_pos: *mut isize,
}
#[test]
fn bindgen_test_layout_re_scream_pos_data_s() {
    assert_eq!(
        ::std::mem::size_of::<re_scream_pos_data_s>(),
        16usize,
        concat!("Size of: ", stringify!(re_scream_pos_data_s))
    );
    assert_eq!(
        ::std::mem::align_of::<re_scream_pos_data_s>(),
        8usize,
        concat!("Alignment of ", stringify!(re_scream_pos_data_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<re_scream_pos_data_s>())).scream_olds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(re_scream_pos_data_s),
            "::",
            stringify!(scream_olds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<re_scream_pos_data_s>())).scream_pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(re_scream_pos_data_s),
            "::",
            stringify!(scream_pos)
        )
    );
}
pub type re_scream_pos_data = re_scream_pos_data_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regexp_engine {
    pub comp: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, pattern: *mut SV, flags: U32) -> *mut REGEXP>,
    pub exec: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             rx: *mut REGEXP,
                             stringarg: *mut ::std::os::raw::c_char,
                             strend: *mut ::std::os::raw::c_char,
                             strbeg: *mut ::std::os::raw::c_char,
                             minend: isize,
                             sv: *mut SV,
                             data: *mut ::std::os::raw::c_void,
                             flags: U32) -> I32,
    >,
    pub intuit: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             rx: *mut REGEXP,
                             sv: *mut SV,
                             strbeg: *const ::std::os::raw::c_char,
                             strpos: *mut ::std::os::raw::c_char,
                             strend: *mut ::std::os::raw::c_char,
                             flags: U32,
                             data: *mut re_scream_pos_data) -> *mut ::std::os::raw::c_char,
    >,
    pub checkstr: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, rx: *mut REGEXP) -> *mut SV>,
    pub rxfree: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, rx: *mut REGEXP)>,
    pub numbered_buff_FETCH: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             rx: *mut REGEXP,
                             paren: I32,
                             sv: *mut SV),
    >,
    pub numbered_buff_STORE: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             rx: *mut REGEXP,
                             paren: I32,
                             value: *const SV),
    >,
    pub numbered_buff_LENGTH: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             rx: *mut REGEXP,
                             sv: *const SV,
                             paren: I32) -> I32,
    >,
    pub named_buff: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             rx: *mut REGEXP,
                             key: *mut SV,
                             value: *mut SV,
                             flags: U32) -> *mut SV,
    >,
    pub named_buff_iter: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             rx: *mut REGEXP,
                             lastkey: *const SV,
                             flags: U32) -> *mut SV,
    >,
    pub qr_package: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, rx: *mut REGEXP) -> *mut SV>,
    pub dupe: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             rx: *mut REGEXP,
                             param: *mut CLONE_PARAMS) -> *mut ::std::os::raw::c_void,
    >,
    pub op_comp: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             patternp: *mut *mut SV,
                             pat_count: ::std::os::raw::c_int,
                             expr: *mut OP,
                             eng: *const regexp_engine,
                             old_re: *mut REGEXP,
                             is_bare_re: *mut bool,
                             orig_rx_flags: U32,
                             pm_flags: U32) -> *mut REGEXP,
    >,
}
#[test]
fn bindgen_test_layout_regexp_engine() {
    assert_eq!(
        ::std::mem::size_of::<regexp_engine>(),
        104usize,
        concat!("Size of: ", stringify!(regexp_engine))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp_engine>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp_engine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).comp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(comp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).exec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(exec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).intuit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(intuit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).checkstr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(checkstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).rxfree as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(rxfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).numbered_buff_FETCH as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(numbered_buff_FETCH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).numbered_buff_STORE as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(numbered_buff_STORE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).numbered_buff_LENGTH as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(numbered_buff_LENGTH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).named_buff as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(named_buff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).named_buff_iter as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(named_buff_iter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).qr_package as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(qr_package)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).dupe as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(dupe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).op_comp as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(op_comp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_info_aux_eval {
    pub rex: *mut regexp,
    pub curpm: *mut PMOP,
    pub saved_copy: *mut SV,
    pub subbeg: *mut ::std::os::raw::c_char,
    pub sublen: STRLEN,
    pub suboffset: STRLEN,
    pub subcoffset: STRLEN,
    pub pos_magic: *mut MAGIC,
    pub pos: isize,
    pub pos_flags: U8,
}
#[test]
fn bindgen_test_layout_regmatch_info_aux_eval() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_info_aux_eval>(),
        80usize,
        concat!("Size of: ", stringify!(regmatch_info_aux_eval))
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_info_aux_eval>(),
        8usize,
        concat!("Alignment of ", stringify!(regmatch_info_aux_eval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).rex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(rex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).curpm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(curpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).saved_copy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(saved_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).subbeg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(subbeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).sublen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(sublen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).suboffset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(suboffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).subcoffset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(subcoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).pos_magic as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(pos_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).pos as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux_eval>())).pos_flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux_eval),
            "::",
            stringify!(pos_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_info_aux {
    pub info_aux_eval: *mut regmatch_info_aux_eval,
    pub old_regmatch_state: *mut regmatch_state,
    pub old_regmatch_slab: *mut regmatch_slab,
    pub poscache: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_regmatch_info_aux() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_info_aux>(),
        32usize,
        concat!("Size of: ", stringify!(regmatch_info_aux))
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_info_aux>(),
        8usize,
        concat!("Alignment of ", stringify!(regmatch_info_aux))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux>())).info_aux_eval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux),
            "::",
            stringify!(info_aux_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux>())).old_regmatch_state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux),
            "::",
            stringify!(old_regmatch_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux>())).old_regmatch_slab as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux),
            "::",
            stringify!(old_regmatch_slab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_info_aux>())).poscache as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_info_aux),
            "::",
            stringify!(poscache)
        )
    );
}
pub type CHECKPOINT = I32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct regmatch_state {
    pub resume_state: ::std::os::raw::c_int,
    pub locinput: *mut ::std::os::raw::c_char,
    pub u: regmatch_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_1 {
    pub prev_yes_state: *mut regmatch_state,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_1>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(prev_yes_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_2 {
    pub prev_yes_state: *mut regmatch_state,
    pub lastparen: U32,
    pub lastcloseparen: U32,
    pub cp: CHECKPOINT,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_2>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(prev_yes_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_2>())).lastparen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(lastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_2>())).lastcloseparen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(lastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_2>())).cp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(cp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_3 {
    pub prev_yes_state: *mut regmatch_state,
    pub lastparen: U32,
    pub lastcloseparen: U32,
    pub cp: CHECKPOINT,
    pub next_branch: *mut regnode,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_3>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_3>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(prev_yes_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_3>())).lastparen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(lastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_3>())).lastcloseparen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(lastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_3>())).cp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_3>())).next_branch as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(next_branch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_4 {
    pub prev_yes_state: *mut regmatch_state,
    pub lastparen: U32,
    pub lastcloseparen: U32,
    pub cp: CHECKPOINT,
    pub accepted: U32,
    pub longfold: bool,
    pub jump: *mut U16,
    pub me: *mut regnode,
    pub firstpos: *mut U8,
    pub firstchars: U32,
    pub nextword: U16,
    pub topword: U16,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_4>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(prev_yes_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).lastparen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(lastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).lastcloseparen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(lastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).cp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).accepted as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(accepted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).longfold as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(longfold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).jump as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(jump)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).me as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(me)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).firstpos as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(firstpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).firstchars as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(firstchars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).nextword as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(nextword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_4>())).topword as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(topword)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_5 {
    pub prev_yes_state: *mut regmatch_state,
    pub prev_eval: *mut regmatch_state,
    pub prev_curlyx: *mut regmatch_state,
    pub prev_rex: *mut REGEXP,
    pub cp: CHECKPOINT,
    pub lastcp: CHECKPOINT,
    pub close_paren: U32,
    pub B: *mut regnode,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_5>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_5>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(prev_yes_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_5>())).prev_eval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(prev_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_5>())).prev_curlyx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(prev_curlyx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_5>())).prev_rex as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(prev_rex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_5>())).cp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_5>())).lastcp as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(lastcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_5>())).close_paren as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(close_paren)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_5>())).B as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(B)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_6 {
    pub prev_yes_state: *mut regmatch_state,
    pub wanted: I32,
    pub logical: I32,
    pub me: *mut regnode,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_6>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_6>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(prev_yes_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_6>())).wanted as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(wanted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_6>())).logical as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(logical)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_6>())).me as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(me)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_7 {
    pub prev_yes_state: *mut regmatch_state,
    pub prev_mark: *mut regmatch_state,
    pub mark_name: *mut SV,
    pub mark_loc: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_7>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_7>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(prev_yes_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_7>())).prev_mark as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(prev_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_7>())).mark_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(mark_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_7>())).mark_loc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(mark_loc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_8 {
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_8() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_8>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_8>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_8>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_8),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_9 {
    pub prev_yes_state: *mut regmatch_state,
    pub prev_curlyx: *mut regmatch_state,
    pub me: *mut regnode,
    pub B: *mut regnode,
    pub cp: CHECKPOINT,
    pub minmod: bool,
    pub parenfloor: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub lastloc: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_9() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_9>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_9>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_9>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(prev_yes_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_9>())).prev_curlyx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(prev_curlyx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_9>())).me as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(me)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_9>())).B as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(B)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_9>())).cp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_9>())).minmod as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(minmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_9>())).parenfloor as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(parenfloor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_9>())).count as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_9>())).lastloc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_9),
            "::",
            stringify!(lastloc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_10 {
    pub prev_yes_state: *mut regmatch_state,
    pub save_curlyx: *mut regmatch_state,
    pub cp: CHECKPOINT,
    pub lastcp: CHECKPOINT,
    pub save_lastloc: *mut ::std::os::raw::c_char,
    pub cache_offset: I32,
    pub cache_mask: I32,
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_10() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_10>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_10>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_10>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(prev_yes_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_10>())).save_curlyx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(save_curlyx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_10>())).cp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_10>())).lastcp as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(lastcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_10>())).save_lastloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(save_lastloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_10>())).cache_offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(cache_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_10>())).cache_mask as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_10),
            "::",
            stringify!(cache_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_11 {
    pub prev_yes_state: *mut regmatch_state,
    pub c1: ::std::os::raw::c_int,
    pub c2: ::std::os::raw::c_int,
    pub cp: CHECKPOINT,
    pub lastparen: U32,
    pub lastcloseparen: U32,
    pub alen: I32,
    pub count: I32,
    pub minmod: bool,
    pub A: *mut regnode,
    pub B: *mut regnode,
    pub me: *mut regnode,
    pub c1_utf8: [U8; 14usize],
    pub c2_utf8: [U8; 14usize],
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_11() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_11>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).prev_yes_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(prev_yes_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).c1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).c2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).cp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).lastparen as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(lastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).lastcloseparen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(lastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).alen as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(alen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).minmod as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(minmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).A as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(A)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).B as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(B)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).me as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(me)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).c1_utf8 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(c1_utf8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_11>())).c2_utf8 as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_11),
            "::",
            stringify!(c2_utf8)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regmatch_state__bindgen_ty_1__bindgen_ty_12 {
    pub paren: U32,
    pub cp: CHECKPOINT,
    pub lastparen: U32,
    pub lastcloseparen: U32,
    pub c1: ::std::os::raw::c_int,
    pub c2: ::std::os::raw::c_int,
    pub maxpos: *mut ::std::os::raw::c_char,
    pub oldloc: *mut ::std::os::raw::c_char,
    pub count: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub A: *mut regnode,
    pub B: *mut regnode,
    pub c1_utf8: [U8; 14usize],
    pub c2_utf8: [U8; 14usize],
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1__bindgen_ty_12() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1__bindgen_ty_12>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1__bindgen_ty_12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).paren as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(paren)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).cp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).lastparen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(lastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).lastcloseparen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(lastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).c1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(c1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).c2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(c2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).maxpos as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(maxpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).oldloc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(oldloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).count as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).min as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).max as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).A as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(A)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).B as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(B)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).c1_utf8 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(c1_utf8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1__bindgen_ty_12>())).c2_utf8 as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1__bindgen_ty_12),
            "::",
            stringify!(c2_utf8)
        )
    );
}
#[test]
fn bindgen_test_layout_regmatch_state__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state__bindgen_ty_1>(),
        104usize,
        concat!("Size of: ", stringify!(regmatch_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(regmatch_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).info_aux as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(info_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).info_aux_eval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(info_aux_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).yes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(yes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).branchlike as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(branchlike)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).branch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(branch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).trie as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(trie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).eval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).ifmatch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(ifmatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).mark as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).keeper as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(keeper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).curlyx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(curlyx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).whilem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(whilem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).curlym as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(curlym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state__bindgen_ty_1>())).curly as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state__bindgen_ty_1),
            "::",
            stringify!(curly)
        )
    );
}
impl ::std::fmt::Debug for regmatch_state__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "regmatch_state__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_regmatch_state() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_state>(),
        120usize,
        concat!("Size of: ", stringify!(regmatch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(regmatch_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state>())).resume_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state),
            "::",
            stringify!(resume_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state>())).locinput as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state),
            "::",
            stringify!(locinput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_state>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_state),
            "::",
            stringify!(u)
        )
    );
}
impl ::std::fmt::Debug for regmatch_state {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "regmatch_state {{ resume_state: {:?}, locinput: {:?}, u: {:?} }}",
            self.resume_state,
            self.locinput,
            self.u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct regmatch_slab {
    pub states: [regmatch_state; 33usize],
    pub prev: *mut regmatch_slab,
    pub next: *mut regmatch_slab,
}
#[test]
fn bindgen_test_layout_regmatch_slab() {
    assert_eq!(
        ::std::mem::size_of::<regmatch_slab>(),
        3976usize,
        concat!("Size of: ", stringify!(regmatch_slab))
    );
    assert_eq!(
        ::std::mem::align_of::<regmatch_slab>(),
        8usize,
        concat!("Alignment of ", stringify!(regmatch_slab))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_slab>())).states as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_slab),
            "::",
            stringify!(states)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_slab>())).prev as *const _ as usize },
        3960usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_slab),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regmatch_slab>())).next as *const _ as usize },
        3968usize,
        concat!(
            "Offset of field: ",
            stringify!(regmatch_slab),
            "::",
            stringify!(next)
        )
    );
}
impl ::std::fmt::Debug for regmatch_slab {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "regmatch_slab {{ states: [{}], prev: {:?}, next: {:?} }}",
            self.states
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>(),
            self.prev,
            self.next
        )
    }
}
pub type perl_drand48_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gp {
    pub gp_sv: *mut SV,
    pub gp_io: *mut io,
    pub gp_cv: *mut CV,
    pub gp_cvgen: U32,
    pub gp_refcnt: U32,
    pub gp_hv: *mut HV,
    pub gp_av: *mut AV,
    pub gp_form: *mut CV,
    pub gp_egv: *mut GV,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub gp_file_hek: *mut HEK,
}
#[test]
fn bindgen_test_layout_gp() {
    assert_eq!(
        ::std::mem::size_of::<gp>(),
        80usize,
        concat!("Size of: ", stringify!(gp))
    );
    assert_eq!(
        ::std::mem::align_of::<gp>(),
        8usize,
        concat!("Alignment of ", stringify!(gp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_sv as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_io as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cv as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cvgen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_cvgen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_refcnt as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_hv as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_av as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_form as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_egv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_egv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_file_hek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_file_hek)
        )
    );
}
impl gp {
    #[inline]
    pub fn gp_line(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_gp_line(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn gp_flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gp_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(gp_line: ::std::os::raw::c_uint, gp_flags: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let gp_line: u32 = unsafe { ::std::mem::transmute(gp_line) };
            gp_line as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let gp_flags: u32 = unsafe { ::std::mem::transmute(gp_flags) };
            gp_flags as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type PADOFFSET = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct padlist {
    pub xpadl_max: isize,
    pub xpadl_alloc: *mut *mut PAD,
    pub xpadl_id: U32,
    pub xpadl_outid: U32,
}
#[test]
fn bindgen_test_layout_padlist() {
    assert_eq!(
        ::std::mem::size_of::<padlist>(),
        24usize,
        concat!("Size of: ", stringify!(padlist))
    );
    assert_eq!(
        ::std::mem::align_of::<padlist>(),
        8usize,
        concat!("Alignment of ", stringify!(padlist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist>())).xpadl_max as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist),
            "::",
            stringify!(xpadl_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist>())).xpadl_alloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist),
            "::",
            stringify!(xpadl_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist>())).xpadl_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist),
            "::",
            stringify!(xpadl_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist>())).xpadl_outid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist),
            "::",
            stringify!(xpadl_outid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct padnamelist {
    pub xpadnl_fill: isize,
    pub xpadnl_alloc: *mut *mut PADNAME,
    pub xpadnl_max: isize,
    pub xpadnl_max_named: PADOFFSET,
    pub xpadnl_refcnt: U32,
}
#[test]
fn bindgen_test_layout_padnamelist() {
    assert_eq!(
        ::std::mem::size_of::<padnamelist>(),
        40usize,
        concat!("Size of: ", stringify!(padnamelist))
    );
    assert_eq!(
        ::std::mem::align_of::<padnamelist>(),
        8usize,
        concat!("Alignment of ", stringify!(padnamelist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_fill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_alloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_max_named as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_max_named)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_refcnt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_refcnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct padname {
    pub xpadn_pv: *mut ::std::os::raw::c_char,
    pub xpadn_ourstash: *mut HV,
    pub xpadn_type_u: padname__bindgen_ty_1,
    pub xpadn_low: U32,
    pub xpadn_high: U32,
    pub xpadn_refcnt: U32,
    pub xpadn_gen: ::std::os::raw::c_int,
    pub xpadn_len: U8,
    pub xpadn_flags: U8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union padname__bindgen_ty_1 { pub xpadn_typestash : * mut HV , pub xpadn_protocv : * mut CV , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_padname__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<padname__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(padname__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<padname__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(padname__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname__bindgen_ty_1>())).xpadn_typestash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padname__bindgen_ty_1),
            "::",
            stringify!(xpadn_typestash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname__bindgen_ty_1>())).xpadn_protocv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padname__bindgen_ty_1),
            "::",
            stringify!(xpadn_protocv)
        )
    );
}
impl ::std::fmt::Debug for padname__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "padname__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_padname() {
    assert_eq!(
        ::std::mem::size_of::<padname>(),
        48usize,
        concat!("Size of: ", stringify!(padname))
    );
    assert_eq!(
        ::std::mem::align_of::<padname>(),
        8usize,
        concat!("Alignment of ", stringify!(padname))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_ourstash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_ourstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_type_u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_type_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_low as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_high as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_high)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_refcnt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_gen as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_flags as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_flags)
        )
    );
}
impl ::std::fmt::Debug for padname {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "padname {{ xpadn_pv: {:?}, xpadn_ourstash: {:?}, xpadn_type_u: {:?}, xpadn_low: {:?}, xpadn_high: {:?}, xpadn_refcnt: {:?}, xpadn_gen: {:?}, xpadn_len: {:?}, xpadn_flags: {:?} }}",
            self.xpadn_pv,
            self.xpadn_ourstash,
            self.xpadn_type_u,
            self.xpadn_low,
            self.xpadn_high,
            self.xpadn_refcnt,
            self.xpadn_gen,
            self.xpadn_len,
            self.xpadn_flags
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvcv {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xpv_cur: STRLEN,
    pub xpv_len_u: xpvcv__bindgen_ty_1,
    pub xcv_stash: *mut HV,
    pub xcv_start_u: xpvcv__bindgen_ty_2,
    pub xcv_root_u: xpvcv__bindgen_ty_3,
    pub xcv_gv_u: xpvcv__bindgen_ty_4,
    pub xcv_file: *mut ::std::os::raw::c_char,
    pub xcv_padlist_u: xpvcv__bindgen_ty_5,
    pub xcv_outside: *mut CV,
    pub xcv_outside_seq: U32,
    pub xcv_flags: cv_flags_t,
    pub xcv_depth: I32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpvcv__bindgen_ty_1 { pub xpvlenu_len : STRLEN , pub xpvlenu_pv : * mut :: std :: os :: raw :: c_char , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1>())).xpvlenu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1>())).xpvlenu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_pv)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpvcv__bindgen_ty_2 { pub xcv_start : * mut OP , pub xcv_xsubany : ANY , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_2>())).xcv_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_2),
            "::",
            stringify!(xcv_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_2>())).xcv_xsubany as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_2),
            "::",
            stringify!(xcv_xsubany)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpvcv__bindgen_ty_3 { pub xcv_root : * mut OP , pub xcv_xsub : :: std :: option :: Option < unsafe extern "C" fn ( my_perl : * mut PerlInterpreter , arg1 : * mut CV ) > , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_3>())).xcv_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_3),
            "::",
            stringify!(xcv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_3>())).xcv_xsub as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_3),
            "::",
            stringify!(xcv_xsub)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_3 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpvcv__bindgen_ty_4 { pub xcv_gv : * mut GV , pub xcv_hek : * mut HEK , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_4>())).xcv_gv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_4),
            "::",
            stringify!(xcv_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_4>())).xcv_hek as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_4),
            "::",
            stringify!(xcv_hek)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_4 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xpvcv__bindgen_ty_5 { pub xcv_padlist : * mut PADLIST , pub xcv_hscxt : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_5>())).xcv_padlist as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_5),
            "::",
            stringify!(xcv_padlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_5>())).xcv_hscxt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_5),
            "::",
            stringify!(xcv_hscxt)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_5 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_5 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvcv() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv>(),
        104usize,
        concat!("Size of: ", stringify!(xpvcv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_len_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_len_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_stash as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_start_u as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_start_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_root_u as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_root_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_gv_u as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_gv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_file as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_padlist_u as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_padlist_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside_seq as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_flags as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_depth as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_depth)
        )
    );
}
impl ::std::fmt::Debug for xpvcv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvcv {{ xmg_stash: {:?}, xmg_u: {:?}, xpv_cur: {:?}, xpv_len_u: {:?}, xcv_stash: {:?}, xcv_start_u: {:?}, xcv_root_u: {:?}, xcv_gv_u: {:?}, xcv_file: {:?}, xcv_padlist_u: {:?}, xcv_outside: {:?}, xcv_outside_seq: {:?}, xcv_flags: {:?}, xcv_depth: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xpv_cur,
            self.xpv_len_u,
            self.xcv_stash,
            self.xcv_start_u,
            self.xcv_root_u,
            self.xcv_gv_u,
            self.xcv_file,
            self.xcv_padlist_u,
            self.xcv_outside,
            self.xcv_outside_seq,
            self.xcv_flags,
            self.xcv_depth
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union UNOP_AUX_item { pub pad_offset : PADOFFSET , pub sv : * mut SV , pub iv : IV , pub uv : UV , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_UNOP_AUX_item() {
    assert_eq!(
        ::std::mem::size_of::<UNOP_AUX_item>(),
        8usize,
        concat!("Size of: ", stringify!(UNOP_AUX_item))
    );
    assert_eq!(
        ::std::mem::align_of::<UNOP_AUX_item>(),
        8usize,
        concat!("Alignment of ", stringify!(UNOP_AUX_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).pad_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(pad_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).sv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(uv)
        )
    );
}
impl ::std::fmt::Debug for UNOP_AUX_item {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "UNOP_AUX_item {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct op {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub op_flags: U8,
    pub op_private: U8,
}
#[test]
fn bindgen_test_layout_op() {
    assert_eq!(
        ::std::mem::size_of::<op>(),
        40usize,
        concat!("Size of: ", stringify!(op))
    );
    assert_eq!(
        ::std::mem::align_of::<op>(),
        8usize,
        concat!("Alignment of ", stringify!(op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_flags as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_private as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_private)
        )
    );
}
impl op {
    #[inline]
    pub fn op_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_op_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn op_opt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_opt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_slabbed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_slabbed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_savefree(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_savefree(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_static(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_static(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_folded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_folded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_moresib(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_moresib(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_spare(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_spare(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(op_type: ::std::os::raw::c_uint, op_opt: ::std::os::raw::c_uint, op_slabbed: ::std::os::raw::c_uint, op_savefree: ::std::os::raw::c_uint, op_static: ::std::os::raw::c_uint, op_folded: ::std::os::raw::c_uint, op_moresib: ::std::os::raw::c_uint, op_spare: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let op_type: u32 = unsafe { ::std::mem::transmute(op_type) };
            op_type as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let op_opt: u32 = unsafe { ::std::mem::transmute(op_opt) };
            op_opt as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let op_slabbed: u32 = unsafe { ::std::mem::transmute(op_slabbed) };
            op_slabbed as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let op_savefree: u32 = unsafe { ::std::mem::transmute(op_savefree) };
            op_savefree as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let op_static: u32 = unsafe { ::std::mem::transmute(op_static) };
            op_static as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let op_folded: u32 = unsafe { ::std::mem::transmute(op_folded) };
            op_folded as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let op_moresib: u32 = unsafe { ::std::mem::transmute(op_moresib) };
            op_moresib as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let op_spare: u32 = unsafe { ::std::mem::transmute(op_spare) };
            op_spare as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pmop {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub op_flags: U8,
    pub op_private: U8,
    pub op_first: *mut OP,
    pub op_last: *mut OP,
    pub op_pmoffset: PADOFFSET,
    pub op_pmflags: U32,
    pub op_pmreplrootu: pmop__bindgen_ty_1,
    pub op_pmstashstartu: pmop__bindgen_ty_2,
    pub op_code_list: *mut OP,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pmop__bindgen_ty_1 { pub op_pmreplroot : * mut OP , pub op_pmtargetoff : PADOFFSET , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_pmop__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pmop__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(pmop__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pmop__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pmop__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop__bindgen_ty_1>())).op_pmreplroot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop__bindgen_ty_1),
            "::",
            stringify!(op_pmreplroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop__bindgen_ty_1>())).op_pmtargetoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop__bindgen_ty_1),
            "::",
            stringify!(op_pmtargetoff)
        )
    );
}
impl ::std::fmt::Debug for pmop__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pmop__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pmop__bindgen_ty_2 { pub op_pmreplstart : * mut OP , pub op_pmstashoff : PADOFFSET , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_pmop__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<pmop__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(pmop__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<pmop__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(pmop__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop__bindgen_ty_2>())).op_pmreplstart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop__bindgen_ty_2),
            "::",
            stringify!(op_pmreplstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop__bindgen_ty_2>())).op_pmstashoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop__bindgen_ty_2),
            "::",
            stringify!(op_pmstashoff)
        )
    );
}
impl ::std::fmt::Debug for pmop__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "pmop__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_pmop() {
    assert_eq!(
        ::std::mem::size_of::<pmop>(),
        96usize,
        concat!("Size of: ", stringify!(pmop))
    );
    assert_eq!(
        ::std::mem::align_of::<pmop>(),
        8usize,
        concat!("Alignment of ", stringify!(pmop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_flags as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_private as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_first as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_last as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmoffset as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmflags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmreplrootu as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmreplrootu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmstashstartu as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmstashstartu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_code_list as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_code_list)
        )
    );
}
impl ::std::fmt::Debug for pmop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "pmop {{ op_next: {:?}, op_sibling: {:?}, op_ppaddr: {:?}, op_targ: {:?}, op_type : {:?}, op_opt : {:?}, op_slabbed : {:?}, op_savefree : {:?}, op_static : {:?}, op_folded : {:?}, op_moresib : {:?}, op_spare : {:?}, op_flags: {:?}, op_private: {:?}, op_first: {:?}, op_last: {:?}, op_pmoffset: {:?}, op_pmflags: {:?}, op_pmreplrootu: {:?}, op_pmstashstartu: {:?}, op_code_list: {:?} }}",
            self.op_next,
            self.op_sibling,
            self.op_ppaddr,
            self.op_targ,
            self.op_type(),
            self.op_opt(),
            self.op_slabbed(),
            self.op_savefree(),
            self.op_static(),
            self.op_folded(),
            self.op_moresib(),
            self.op_spare(),
            self.op_flags,
            self.op_private,
            self.op_first,
            self.op_last,
            self.op_pmoffset,
            self.op_pmflags,
            self.op_pmreplrootu,
            self.op_pmstashstartu,
            self.op_code_list
        )
    }
}
impl pmop {
    #[inline]
    pub fn op_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_op_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn op_opt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_opt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_slabbed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_slabbed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_savefree(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_savefree(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_static(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_static(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_folded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_folded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_moresib(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_moresib(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_spare(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_spare(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(op_type: ::std::os::raw::c_uint, op_opt: ::std::os::raw::c_uint, op_slabbed: ::std::os::raw::c_uint, op_savefree: ::std::os::raw::c_uint, op_static: ::std::os::raw::c_uint, op_folded: ::std::os::raw::c_uint, op_moresib: ::std::os::raw::c_uint, op_spare: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let op_type: u32 = unsafe { ::std::mem::transmute(op_type) };
            op_type as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let op_opt: u32 = unsafe { ::std::mem::transmute(op_opt) };
            op_opt as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let op_slabbed: u32 = unsafe { ::std::mem::transmute(op_slabbed) };
            op_slabbed as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let op_savefree: u32 = unsafe { ::std::mem::transmute(op_savefree) };
            op_savefree as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let op_static: u32 = unsafe { ::std::mem::transmute(op_static) };
            op_static as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let op_folded: u32 = unsafe { ::std::mem::transmute(op_folded) };
            op_folded as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let op_moresib: u32 = unsafe { ::std::mem::transmute(op_moresib) };
            op_moresib as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let op_spare: u32 = unsafe { ::std::mem::transmute(op_spare) };
            op_spare as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loop_ {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub op_flags: U8,
    pub op_private: U8,
    pub op_first: *mut OP,
    pub op_last: *mut OP,
    pub op_redoop: *mut OP,
    pub op_nextop: *mut OP,
    pub op_lastop: *mut OP,
}
#[test]
fn bindgen_test_layout_loop_() {
    assert_eq!(
        ::std::mem::size_of::<loop_>(),
        80usize,
        concat!("Size of: ", stringify!(loop_))
    );
    assert_eq!(
        ::std::mem::align_of::<loop_>(),
        8usize,
        concat!("Alignment of ", stringify!(loop_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_flags as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_private as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_first as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_last as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_redoop as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_redoop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_nextop as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_nextop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<loop_>())).op_lastop as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(loop_),
            "::",
            stringify!(op_lastop)
        )
    );
}
impl loop_ {
    #[inline]
    pub fn op_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_op_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn op_opt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_opt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_slabbed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_slabbed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_savefree(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_savefree(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_static(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_static(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_folded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_folded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_moresib(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_moresib(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_spare(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_spare(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(op_type: ::std::os::raw::c_uint, op_opt: ::std::os::raw::c_uint, op_slabbed: ::std::os::raw::c_uint, op_savefree: ::std::os::raw::c_uint, op_static: ::std::os::raw::c_uint, op_folded: ::std::os::raw::c_uint, op_moresib: ::std::os::raw::c_uint, op_spare: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let op_type: u32 = unsafe { ::std::mem::transmute(op_type) };
            op_type as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let op_opt: u32 = unsafe { ::std::mem::transmute(op_opt) };
            op_opt as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let op_slabbed: u32 = unsafe { ::std::mem::transmute(op_slabbed) };
            op_slabbed as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let op_savefree: u32 = unsafe { ::std::mem::transmute(op_savefree) };
            op_savefree as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let op_static: u32 = unsafe { ::std::mem::transmute(op_static) };
            op_static as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let op_folded: u32 = unsafe { ::std::mem::transmute(op_folded) };
            op_folded as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let op_moresib: u32 = unsafe { ::std::mem::transmute(op_moresib) };
            op_moresib as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let op_spare: u32 = unsafe { ::std::mem::transmute(op_spare) };
            op_spare as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
#[test]
fn bindgen_test_layout_passwd() {
    assert_eq!(
        ::std::mem::size_of::<passwd>(),
        72usize,
        concat!("Size of: ", stringify!(passwd))
    );
    assert_eq!(
        ::std::mem::align_of::<passwd>(),
        8usize,
        concat!("Alignment of ", stringify!(passwd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_passwd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_change as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_change)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_class as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gecos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gecos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_dir as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_shell as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_shell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_expire as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_expire)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_group() {
    assert_eq!(
        ::std::mem::size_of::<group>(),
        32usize,
        concat!("Size of: ", stringify!(group))
    );
    assert_eq!(
        ::std::mem::align_of::<group>(),
        8usize,
        concat!("Alignment of ", stringify!(group))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group>())).gr_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group>())).gr_passwd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group>())).gr_gid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group>())).gr_mem as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_mem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct REENTR {
    pub _asctime_buffer: *mut ::std::os::raw::c_char,
    pub _asctime_size: usize,
    pub _ctime_buffer: *mut ::std::os::raw::c_char,
    pub _ctime_size: usize,
    pub _grent_struct: group,
    pub _grent_buffer: *mut ::std::os::raw::c_char,
    pub _grent_size: usize,
    pub _grent_ptr: *mut group,
    pub _getlogin_buffer: *mut ::std::os::raw::c_char,
    pub _getlogin_size: usize,
    pub _pwent_struct: passwd,
    pub _pwent_buffer: *mut ::std::os::raw::c_char,
    pub _pwent_size: usize,
    pub _pwent_ptr: *mut passwd,
    pub _readdir_struct: *mut dirent,
    pub _readdir_size: usize,
    pub _readdir_ptr: *mut dirent,
    pub _strerror_buffer: *mut ::std::os::raw::c_char,
    pub _strerror_size: usize,
    pub _ttyname_buffer: *mut ::std::os::raw::c_char,
    pub _ttyname_size: usize,
    pub dummy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_REENTR() {
    assert_eq!(
        ::std::mem::size_of::<REENTR>(),
        264usize,
        concat!("Size of: ", stringify!(REENTR))
    );
    assert_eq!(
        ::std::mem::align_of::<REENTR>(),
        8usize,
        concat!("Alignment of ", stringify!(REENTR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._asctime_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_asctime_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._asctime_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_asctime_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._ctime_buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_ctime_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._ctime_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_ctime_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._grent_struct as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_grent_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._grent_buffer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_grent_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._grent_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_grent_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._grent_ptr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_grent_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._getlogin_buffer as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_getlogin_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._getlogin_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_getlogin_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._pwent_struct as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_pwent_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._pwent_buffer as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_pwent_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._pwent_size as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_pwent_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._pwent_ptr as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_pwent_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._readdir_struct as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_readdir_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._readdir_size as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_readdir_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._readdir_ptr as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_readdir_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._strerror_buffer as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_strerror_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._strerror_size as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_strerror_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._ttyname_buffer as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_ttyname_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._ttyname_size as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_ttyname_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>())).dummy as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct he {
    pub hent_next: *mut HE,
    pub hent_hek: *mut HEK,
    pub he_valu: he__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union he__bindgen_ty_1 { pub hent_val : * mut SV , pub hent_refcount : usize , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_he__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<he__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(he__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<he__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(he__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he__bindgen_ty_1>())).hent_val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he__bindgen_ty_1),
            "::",
            stringify!(hent_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he__bindgen_ty_1>())).hent_refcount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he__bindgen_ty_1),
            "::",
            stringify!(hent_refcount)
        )
    );
}
impl ::std::fmt::Debug for he__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "he__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_he() {
    assert_eq!(
        ::std::mem::size_of::<he>(),
        24usize,
        concat!("Size of: ", stringify!(he))
    );
    assert_eq!(
        ::std::mem::align_of::<he>(),
        8usize,
        concat!("Alignment of ", stringify!(he))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_hek as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_hek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).he_valu as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(he_valu)
        )
    );
}
impl ::std::fmt::Debug for he {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "he {{ hent_next: {:?}, hent_hek: {:?}, he_valu: {:?} }}",
            self.hent_next,
            self.hent_hek,
            self.he_valu
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hek {
    pub hek_hash: U32,
    pub hek_len: I32,
    pub hek_key: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_hek() {
    assert_eq!(
        ::std::mem::size_of::<hek>(),
        12usize,
        concat!("Size of: ", stringify!(hek))
    );
    assert_eq!(
        ::std::mem::align_of::<hek>(),
        4usize,
        concat!("Alignment of ", stringify!(hek))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_key)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvhv {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xhv_keys: isize,
    pub xhv_max: isize,
}
#[test]
fn bindgen_test_layout_xpvhv() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv>(),
        32usize,
        concat!("Size of: ", stringify!(xpvhv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvhv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_keys as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_max as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_max)
        )
    );
}
impl ::std::fmt::Debug for xpvhv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvhv {{ xmg_stash: {:?}, xmg_u: {:?}, xhv_keys: {:?}, xhv_max: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xhv_keys,
            self.xhv_max
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct refcounted_he {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct jmpenv {
    pub je_prev: *mut jmpenv,
    pub je_buf: sigjmp_buf,
    pub je_ret: ::std::os::raw::c_int,
    pub je_mustcatch: bool,
}
#[test]
fn bindgen_test_layout_jmpenv() {
    assert_eq!(
        ::std::mem::size_of::<jmpenv>(),
        168usize,
        concat!("Size of: ", stringify!(jmpenv))
    );
    assert_eq!(
        ::std::mem::align_of::<jmpenv>(),
        8usize,
        concat!("Alignment of ", stringify!(jmpenv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jmpenv>())).je_prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jmpenv),
            "::",
            stringify!(je_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jmpenv>())).je_buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jmpenv),
            "::",
            stringify!(je_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jmpenv>())).je_ret as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jmpenv),
            "::",
            stringify!(je_ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jmpenv>())).je_mustcatch as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(jmpenv),
            "::",
            stringify!(je_mustcatch)
        )
    );
}
impl ::std::fmt::Debug for jmpenv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "jmpenv {{ je_prev: {:?}, je_buf: [{}], je_ret: {:?}, je_mustcatch: {:?} }}",
            self.je_prev,
            self.je_buf
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>(),
            self.je_ret,
            self.je_mustcatch
        )
    }
}
pub type JMPENV = jmpenv;
pub type COPHH = refcounted_he;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cop {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub op_flags: U8,
    pub op_private: U8,
    pub cop_line: line_t,
    pub cop_stashoff: PADOFFSET,
    pub cop_file: *mut ::std::os::raw::c_char,
    pub cop_hints: U32,
    pub cop_seq: U32,
    pub cop_warnings: *mut STRLEN,
    pub cop_hints_hash: *mut COPHH,
}
#[test]
fn bindgen_test_layout_cop() {
    assert_eq!(
        ::std::mem::size_of::<cop>(),
        80usize,
        concat!("Size of: ", stringify!(cop))
    );
    assert_eq!(
        ::std::mem::align_of::<cop>(),
        8usize,
        concat!("Alignment of ", stringify!(cop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_flags as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_private as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_line as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_stashoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_stashoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_file as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_hints as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_hints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_seq as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_warnings as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_warnings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_hints_hash as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_hints_hash)
        )
    );
}
impl cop {
    #[inline]
    pub fn op_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_op_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn op_opt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_opt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_slabbed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_slabbed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_savefree(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_savefree(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_static(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_static(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_folded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_folded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_moresib(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_moresib(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_spare(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_spare(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(op_type: ::std::os::raw::c_uint, op_opt: ::std::os::raw::c_uint, op_slabbed: ::std::os::raw::c_uint, op_savefree: ::std::os::raw::c_uint, op_static: ::std::os::raw::c_uint, op_folded: ::std::os::raw::c_uint, op_moresib: ::std::os::raw::c_uint, op_spare: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let op_type: u32 = unsafe { ::std::mem::transmute(op_type) };
            op_type as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let op_opt: u32 = unsafe { ::std::mem::transmute(op_opt) };
            op_opt as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let op_slabbed: u32 = unsafe { ::std::mem::transmute(op_slabbed) };
            op_slabbed as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let op_savefree: u32 = unsafe { ::std::mem::transmute(op_savefree) };
            op_savefree as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let op_static: u32 = unsafe { ::std::mem::transmute(op_static) };
            op_static as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let op_folded: u32 = unsafe { ::std::mem::transmute(op_folded) };
            op_folded as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let op_moresib: u32 = unsafe { ::std::mem::transmute(op_moresib) };
            op_moresib as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let op_spare: u32 = unsafe { ::std::mem::transmute(op_spare) };
            op_spare as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_sub {
    pub retop: *mut OP,
    pub cv: *mut CV,
    pub savearray: *mut AV,
    pub argarray: *mut AV,
    pub olddepth: I32,
    pub oldcomppad: *mut PAD,
}
#[test]
fn bindgen_test_layout_block_sub() {
    assert_eq!(
        ::std::mem::size_of::<block_sub>(),
        48usize,
        concat!("Size of: ", stringify!(block_sub))
    );
    assert_eq!(
        ::std::mem::align_of::<block_sub>(),
        8usize,
        concat!("Alignment of ", stringify!(block_sub))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).retop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(retop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).cv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(cv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).savearray as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(savearray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).argarray as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(argarray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).olddepth as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(olddepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).oldcomppad as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(oldcomppad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_format {
    pub retop: *mut OP,
    pub cv: *mut CV,
    pub gv: *mut GV,
    pub dfoutgv: *mut GV,
}
#[test]
fn bindgen_test_layout_block_format() {
    assert_eq!(
        ::std::mem::size_of::<block_format>(),
        32usize,
        concat!("Size of: ", stringify!(block_format))
    );
    assert_eq!(
        ::std::mem::align_of::<block_format>(),
        8usize,
        concat!("Alignment of ", stringify!(block_format))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_format>())).retop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_format),
            "::",
            stringify!(retop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_format>())).cv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_format),
            "::",
            stringify!(cv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_format>())).gv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(block_format),
            "::",
            stringify!(gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_format>())).dfoutgv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_format),
            "::",
            stringify!(dfoutgv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_eval {
    pub retop: *mut OP,
    pub old_namesv: *mut SV,
    pub old_eval_root: *mut OP,
    pub cur_text: *mut SV,
    pub cv: *mut CV,
    pub cur_top_env: *mut JMPENV,
}
#[test]
fn bindgen_test_layout_block_eval() {
    assert_eq!(
        ::std::mem::size_of::<block_eval>(),
        48usize,
        concat!("Size of: ", stringify!(block_eval))
    );
    assert_eq!(
        ::std::mem::align_of::<block_eval>(),
        8usize,
        concat!("Alignment of ", stringify!(block_eval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).retop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(retop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).old_namesv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(old_namesv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).old_eval_root as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(old_eval_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).cur_text as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(cur_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).cv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(cv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).cur_top_env as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(cur_top_env)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct block_loop {
    pub resetsp: I32,
    pub my_op: *mut LOOP,
    pub itervar_u: block_loop__bindgen_ty_1,
    pub state_u: block_loop__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union block_loop__bindgen_ty_1 { pub svp : * mut * mut SV , pub gv : * mut GV , pub oldcomppad : * mut PAD , _bindgen_union_align : u64 , }
#[test]
fn bindgen_test_layout_block_loop__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<block_loop__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(block_loop__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<block_loop__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(block_loop__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_1>())).svp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_1),
            "::",
            stringify!(svp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_1>())).gv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_1),
            "::",
            stringify!(gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_1>())).oldcomppad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_1),
            "::",
            stringify!(oldcomppad)
        )
    );
}
impl ::std::fmt::Debug for block_loop__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "block_loop__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_loop__bindgen_ty_2__bindgen_ty_1 {
    pub ary: *mut AV,
    pub ix: IV,
}
#[test]
fn bindgen_test_layout_block_loop__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<block_loop__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<block_loop__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_2__bindgen_ty_1>())).ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(ary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_2__bindgen_ty_1>())).ix as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(ix)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_loop__bindgen_ty_2__bindgen_ty_2 {
    pub cur: IV,
    pub end: IV,
}
#[test]
fn bindgen_test_layout_block_loop__bindgen_ty_2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<block_loop__bindgen_ty_2__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<block_loop__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_2__bindgen_ty_2>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_2__bindgen_ty_2>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_loop__bindgen_ty_2__bindgen_ty_3 {
    pub cur: *mut SV,
    pub end: *mut SV,
}
#[test]
fn bindgen_test_layout_block_loop__bindgen_ty_2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<block_loop__bindgen_ty_2__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<block_loop__bindgen_ty_2__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_2__bindgen_ty_3>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_2__bindgen_ty_3>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(end)
        )
    );
}
#[test]
fn bindgen_test_layout_block_loop__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<block_loop__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(block_loop__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<block_loop__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(block_loop__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_2>())).ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_2),
            "::",
            stringify!(ary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_2>())).lazyiv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_2),
            "::",
            stringify!(lazyiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop__bindgen_ty_2>())).lazysv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop__bindgen_ty_2),
            "::",
            stringify!(lazysv)
        )
    );
}
impl ::std::fmt::Debug for block_loop__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "block_loop__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_block_loop() {
    assert_eq!(
        ::std::mem::size_of::<block_loop>(),
        40usize,
        concat!("Size of: ", stringify!(block_loop))
    );
    assert_eq!(
        ::std::mem::align_of::<block_loop>(),
        8usize,
        concat!("Alignment of ", stringify!(block_loop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).resetsp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(resetsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).my_op as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(my_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).itervar_u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(itervar_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).state_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(state_u)
        )
    );
}
impl ::std::fmt::Debug for block_loop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "block_loop {{ resetsp: {:?}, my_op: {:?}, itervar_u: {:?}, state_u: {:?} }}",
            self.resetsp,
            self.my_op,
            self.itervar_u,
            self.state_u
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_givwhen {
    pub leave_op: *mut OP,
}
#[test]
fn bindgen_test_layout_block_givwhen() {
    assert_eq!(
        ::std::mem::size_of::<block_givwhen>(),
        8usize,
        concat!("Size of: ", stringify!(block_givwhen))
    );
    assert_eq!(
        ::std::mem::align_of::<block_givwhen>(),
        8usize,
        concat!("Alignment of ", stringify!(block_givwhen))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_givwhen>())).leave_op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_givwhen),
            "::",
            stringify!(leave_op)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct block {
    pub blku_type: U8,
    pub blku_gimme: U8,
    pub blku_u16: U16,
    pub blku_oldsp: I32,
    pub blku_oldcop: *mut COP,
    pub blku_oldmarksp: I32,
    pub blku_oldscopesp: I32,
    pub blku_oldpm: *mut PMOP,
    pub blk_u: block__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[test]
fn bindgen_test_layout_block__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<block__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(block__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<block__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(block__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block__bindgen_ty_1>())).blku_sub as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block__bindgen_ty_1),
            "::",
            stringify!(blku_sub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block__bindgen_ty_1>())).blku_format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block__bindgen_ty_1),
            "::",
            stringify!(blku_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block__bindgen_ty_1>())).blku_eval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block__bindgen_ty_1),
            "::",
            stringify!(blku_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block__bindgen_ty_1>())).blku_loop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block__bindgen_ty_1),
            "::",
            stringify!(blku_loop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block__bindgen_ty_1>())).blku_givwhen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block__bindgen_ty_1),
            "::",
            stringify!(blku_givwhen)
        )
    );
}
impl ::std::fmt::Debug for block__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "block__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_block() {
    assert_eq!(
        ::std::mem::size_of::<block>(),
        80usize,
        concat!("Size of: ", stringify!(block))
    );
    assert_eq!(
        ::std::mem::align_of::<block>(),
        8usize,
        concat!("Alignment of ", stringify!(block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_gimme as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_gimme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_u16 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_u16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldsp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldcop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldcop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldmarksp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldmarksp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldscopesp as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldscopesp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldpm as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blk_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blk_u)
        )
    );
}
impl ::std::fmt::Debug for block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "block {{ blku_type: {:?}, blku_gimme: {:?}, blku_u16: {:?}, blku_oldsp: {:?}, blku_oldcop: {:?}, blku_oldmarksp: {:?}, blku_oldscopesp: {:?}, blku_oldpm: {:?}, blk_u: {:?} }}",
            self.blku_type,
            self.blku_gimme,
            self.blku_u16,
            self.blku_oldsp,
            self.blku_oldcop,
            self.blku_oldmarksp,
            self.blku_oldscopesp,
            self.blku_oldpm,
            self.blk_u
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subst {
    pub sbu_type: U8,
    pub sbu_rflags: U8,
    pub sbu_rxtainted: U16,
    pub sbu_oldsave: I32,
    pub sbu_iters: isize,
    pub sbu_maxiters: isize,
    pub sbu_orig: *mut ::std::os::raw::c_char,
    pub sbu_dstr: *mut SV,
    pub sbu_targ: *mut SV,
    pub sbu_s: *mut ::std::os::raw::c_char,
    pub sbu_m: *mut ::std::os::raw::c_char,
    pub sbu_strend: *mut ::std::os::raw::c_char,
    pub sbu_rxres: *mut ::std::os::raw::c_void,
    pub sbu_rx: *mut REGEXP,
}
#[test]
fn bindgen_test_layout_subst() {
    assert_eq!(
        ::std::mem::size_of::<subst>(),
        88usize,
        concat!("Size of: ", stringify!(subst))
    );
    assert_eq!(
        ::std::mem::align_of::<subst>(),
        8usize,
        concat!("Alignment of ", stringify!(subst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_rflags as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_rflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_rxtainted as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_rxtainted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_oldsave as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_oldsave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_iters as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_iters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_maxiters as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_maxiters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_orig as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_orig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_dstr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_dstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_targ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_s as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_m as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_strend as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_strend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_rxres as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_rxres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_rx as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_rx)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct context {
    pub cx_u: context__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[test]
fn bindgen_test_layout_context__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<context__bindgen_ty_1>(),
        88usize,
        concat!("Size of: ", stringify!(context__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<context__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(context__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context__bindgen_ty_1>())).cx_blk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context__bindgen_ty_1),
            "::",
            stringify!(cx_blk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context__bindgen_ty_1>())).cx_subst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context__bindgen_ty_1),
            "::",
            stringify!(cx_subst)
        )
    );
}
impl ::std::fmt::Debug for context__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "context__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_context() {
    assert_eq!(
        ::std::mem::size_of::<context>(),
        88usize,
        concat!("Size of: ", stringify!(context))
    );
    assert_eq!(
        ::std::mem::align_of::<context>(),
        8usize,
        concat!("Alignment of ", stringify!(context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context>())).cx_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context),
            "::",
            stringify!(cx_u)
        )
    );
}
impl ::std::fmt::Debug for context {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "context {{ cx_u: {:?} }}", self.cx_u)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stackinfo {
    pub si_stack: *mut AV,
    pub si_cxstack: *mut PERL_CONTEXT,
    pub si_prev: *mut stackinfo,
    pub si_next: *mut stackinfo,
    pub si_cxix: I32,
    pub si_cxmax: I32,
    pub si_type: I32,
    pub si_markoff: I32,
}
#[test]
fn bindgen_test_layout_stackinfo() {
    assert_eq!(
        ::std::mem::size_of::<stackinfo>(),
        48usize,
        concat!("Size of: ", stringify!(stackinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<stackinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(stackinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_stack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_cxstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_cxstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_cxix as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_cxix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_cxmax as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_cxmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_type as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_markoff as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_markoff)
        )
    );
}
pub type PERL_SI = stackinfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvav {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xav_fill: isize,
    pub xav_max: isize,
    pub xav_alloc: *mut *mut SV,
}
#[test]
fn bindgen_test_layout_xpvav() {
    assert_eq!(
        ::std::mem::size_of::<xpvav>(),
        40usize,
        concat!("Size of: ", stringify!(xpvav))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvav))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_fill as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_max as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_alloc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_alloc)
        )
    );
}
impl ::std::fmt::Debug for xpvav {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvav {{ xmg_stash: {:?}, xmg_u: {:?}, xav_fill: {:?}, xav_max: {:?}, xav_alloc: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xav_fill,
            self.xav_max,
            self.xav_alloc
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mgvtbl {
    pub svt_get: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_set: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_len: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> U32>,
    pub svt_clear: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_free: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_copy: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             sv: *mut SV,
                             mg: *mut MAGIC,
                             nsv: *mut SV,
                             name: *const ::std::os::raw::c_char,
                             namlen: I32) -> ::std::os::raw::c_int,
    >,
    pub svt_dup: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             mg: *mut MAGIC,
                             param: *mut CLONE_PARAMS) -> ::std::os::raw::c_int,
    >,
    pub svt_local: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, nsv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_mgvtbl() {
    assert_eq!(
        ::std::mem::size_of::<mgvtbl>(),
        64usize,
        concat!("Size of: ", stringify!(mgvtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<mgvtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(mgvtbl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_get as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_set as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_clear as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_copy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_dup as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_dup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_local as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_local)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct magic {
    pub mg_moremagic: *mut MAGIC,
    pub mg_virtual: *mut MGVTBL,
    pub mg_private: U16,
    pub mg_type: ::std::os::raw::c_char,
    pub mg_flags: U8,
    pub mg_len: isize,
    pub mg_obj: *mut SV,
    pub mg_ptr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_magic() {
    assert_eq!(
        ::std::mem::size_of::<magic>(),
        48usize,
        concat!("Size of: ", stringify!(magic))
    );
    assert_eq!(
        ::std::mem::align_of::<magic>(),
        8usize,
        concat!("Alignment of ", stringify!(magic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_moremagic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_moremagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_virtual as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_virtual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_private as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_type as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_flags as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_obj as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_ptr)
        )
    );
}
pub type SUBLEXINFO = _sublex_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sublex_info {
    pub super_state: U8,
    pub sub_inwhat: U16,
    pub sub_op: *mut OP,
    pub repl: *mut SV,
}
#[test]
fn bindgen_test_layout__sublex_info() {
    assert_eq!(
        ::std::mem::size_of::<_sublex_info>(),
        24usize,
        concat!("Size of: ", stringify!(_sublex_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_sublex_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_sublex_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sublex_info>())).super_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sublex_info),
            "::",
            stringify!(super_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sublex_info>())).sub_inwhat as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_sublex_info),
            "::",
            stringify!(sub_inwhat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sublex_info>())).sub_op as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sublex_info),
            "::",
            stringify!(sub_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sublex_info>())).repl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sublex_info),
            "::",
            stringify!(repl)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct yy_stack_frame {
    pub val: YYSTYPE,
    pub state: ::std::os::raw::c_short,
    pub savestack_ix: I32,
    pub compcv: *mut CV,
}
#[test]
fn bindgen_test_layout_yy_stack_frame() {
    assert_eq!(
        ::std::mem::size_of::<yy_stack_frame>(),
        24usize,
        concat!("Size of: ", stringify!(yy_stack_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<yy_stack_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(yy_stack_frame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_stack_frame>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_stack_frame),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_stack_frame>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_stack_frame),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_stack_frame>())).savestack_ix as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_stack_frame),
            "::",
            stringify!(savestack_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_stack_frame>())).compcv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_stack_frame),
            "::",
            stringify!(compcv)
        )
    );
}
impl ::std::fmt::Debug for yy_stack_frame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "yy_stack_frame {{ val: {:?}, state: {:?}, savestack_ix: {:?}, compcv: {:?} }}",
            self.val,
            self.state,
            self.savestack_ix,
            self.compcv
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct yy_lexshared {
    pub ls_prev: *mut yy_lexshared,
    pub ls_linestr: *mut SV,
    pub ls_bufptr: *mut ::std::os::raw::c_char,
    pub re_eval_start: *mut ::std::os::raw::c_char,
    pub re_eval_str: *mut SV,
}
#[test]
fn bindgen_test_layout_yy_lexshared() {
    assert_eq!(
        ::std::mem::size_of::<yy_lexshared>(),
        40usize,
        concat!("Size of: ", stringify!(yy_lexshared))
    );
    assert_eq!(
        ::std::mem::align_of::<yy_lexshared>(),
        8usize,
        concat!("Alignment of ", stringify!(yy_lexshared))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_lexshared>())).ls_prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_lexshared),
            "::",
            stringify!(ls_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_lexshared>())).ls_linestr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_lexshared),
            "::",
            stringify!(ls_linestr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_lexshared>())).ls_bufptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_lexshared),
            "::",
            stringify!(ls_bufptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_lexshared>())).re_eval_start as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_lexshared),
            "::",
            stringify!(re_eval_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_lexshared>())).re_eval_str as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_lexshared),
            "::",
            stringify!(re_eval_str)
        )
    );
}
pub type LEXSHARED = yy_lexshared;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct yy_parser {
    pub old_parser: *mut yy_parser,
    pub yylval: YYSTYPE,
    pub yychar: ::std::os::raw::c_int,
    pub yyerrstatus: ::std::os::raw::c_int,
    pub stack_size: ::std::os::raw::c_int,
    pub yylen: ::std::os::raw::c_int,
    pub stack: *mut yy_stack_frame,
    pub ps: *mut yy_stack_frame,
    pub lex_brackets: I32,
    pub lex_casemods: I32,
    pub lex_brackstack: *mut ::std::os::raw::c_char,
    pub lex_casestack: *mut ::std::os::raw::c_char,
    pub lex_defer: U8,
    pub lex_dojoin: U8,
    pub lex_expect: U8,
    pub expect: U8,
    pub lex_formbrack: I32,
    pub lex_inpat: *mut OP,
    pub lex_op: *mut OP,
    pub lex_repl: *mut SV,
    pub lex_inwhat: U16,
    pub last_lop_op: U16,
    pub lex_starts: I32,
    pub lex_stuff: *mut SV,
    pub multi_start: I32,
    pub multi_end: I32,
    pub multi_open: ::std::os::raw::c_char,
    pub multi_close: ::std::os::raw::c_char,
    pub preambled: bool,
    pub lex_re_reparsing: bool,
    pub lex_allbrackets: I32,
    pub sublex_info: SUBLEXINFO,
    pub lex_shared: *mut LEXSHARED,
    pub linestr: *mut SV,
    pub bufptr: *mut ::std::os::raw::c_char,
    pub oldbufptr: *mut ::std::os::raw::c_char,
    pub oldoldbufptr: *mut ::std::os::raw::c_char,
    pub bufend: *mut ::std::os::raw::c_char,
    pub linestart: *mut ::std::os::raw::c_char,
    pub last_uni: *mut ::std::os::raw::c_char,
    pub last_lop: *mut ::std::os::raw::c_char,
    pub copline: line_t,
    pub in_my: U16,
    pub lex_state: U8,
    pub error_count: U8,
    pub in_my_stash: *mut HV,
    pub rsfp: *mut PerlIO,
    pub rsfp_filters: *mut AV,
    pub form_lex_state: U8,
    pub nextval: [YYSTYPE; 5usize],
    pub nexttype: [I32; 5usize],
    pub nexttoke: U32,
    pub saved_curcop: *mut COP,
    pub tokenbuf: [::std::os::raw::c_char; 1024usize],
    pub herelines: line_t,
    pub preambling: line_t,
    pub lex_fakeeof: U8,
    pub lex_flags: U8,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub __bindgen_padding_0: [u8; 5usize],
}
#[test]
fn bindgen_test_layout_yy_parser() {
    assert_eq!(
        ::std::mem::size_of::<yy_parser>(),
        1384usize,
        concat!("Size of: ", stringify!(yy_parser))
    );
    assert_eq!(
        ::std::mem::align_of::<yy_parser>(),
        8usize,
        concat!("Alignment of ", stringify!(yy_parser))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).old_parser as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(old_parser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).yylval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(yylval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).yychar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(yychar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).yyerrstatus as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(yyerrstatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).stack_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).yylen as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(yylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).stack as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).ps as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(ps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_brackets as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_brackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_casemods as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_casemods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_brackstack as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_brackstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_casestack as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_casestack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_defer as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_defer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_dojoin as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_dojoin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_expect as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_expect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).expect as *const _ as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(expect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_formbrack as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_formbrack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_inpat as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_inpat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_op as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_repl as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_repl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_inwhat as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_inwhat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).last_lop_op as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(last_lop_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_starts as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_starts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_stuff as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_stuff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).multi_start as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(multi_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).multi_end as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(multi_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).multi_open as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(multi_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).multi_close as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(multi_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).preambled as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(preambled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_re_reparsing as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_re_reparsing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_allbrackets as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_allbrackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).sublex_info as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(sublex_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_shared as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_shared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).linestr as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(linestr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).bufptr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(bufptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).oldbufptr as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(oldbufptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).oldoldbufptr as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(oldoldbufptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).bufend as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(bufend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).linestart as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(linestart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).last_uni as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(last_uni)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).last_lop as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(last_lop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).copline as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(copline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).in_my as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(in_my)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_state as *const _ as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).error_count as *const _ as usize },
        239usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(error_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).in_my_stash as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(in_my_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).rsfp as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(rsfp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).rsfp_filters as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(rsfp_filters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).form_lex_state as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(form_lex_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).nextval as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(nextval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).nexttype as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(nexttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).nexttoke as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(nexttoke)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).saved_curcop as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(saved_curcop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).tokenbuf as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(tokenbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).herelines as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(herelines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).preambling as *const _ as usize },
        1372usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(preambling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_fakeeof as *const _ as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_fakeeof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<yy_parser>())).lex_flags as *const _ as usize },
        1377usize,
        concat!(
            "Offset of field: ",
            stringify!(yy_parser),
            "::",
            stringify!(lex_flags)
        )
    );
}
impl ::std::fmt::Debug for yy_parser {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "yy_parser {{ old_parser: {:?}, yylval: {:?}, yychar: {:?}, yyerrstatus: {:?}, stack_size: {:?}, yylen: {:?}, stack: {:?}, ps: {:?}, lex_brackets: {:?}, lex_casemods: {:?}, lex_brackstack: {:?}, lex_casestack: {:?}, lex_defer: {:?}, lex_dojoin: {:?}, lex_expect: {:?}, expect: {:?}, lex_formbrack: {:?}, lex_inpat: {:?}, lex_op: {:?}, lex_repl: {:?}, lex_inwhat: {:?}, last_lop_op: {:?}, lex_starts: {:?}, lex_stuff: {:?}, multi_start: {:?}, multi_end: {:?}, multi_open: {:?}, multi_close: {:?}, preambled: {:?}, lex_re_reparsing: {:?}, lex_allbrackets: {:?}, sublex_info: {:?}, lex_shared: {:?}, linestr: {:?}, bufptr: {:?}, oldbufptr: {:?}, oldoldbufptr: {:?}, bufend: {:?}, linestart: {:?}, last_uni: {:?}, last_lop: {:?}, copline: {:?}, in_my: {:?}, lex_state: {:?}, error_count: {:?}, in_my_stash: {:?}, rsfp: {:?}, rsfp_filters: {:?}, form_lex_state: {:?}, nextval: {:?}, nexttype: {:?}, nexttoke: {:?}, saved_curcop: {:?}, tokenbuf: [{}], herelines: {:?}, preambling: {:?}, lex_fakeeof: {:?}, lex_flags: {:?}, in_pod : {:?}, filtered : {:?}, saw_infix_sigil : {:?}, parsed_sub : {:?} }}",
            self.old_parser,
            self.yylval,
            self.yychar,
            self.yyerrstatus,
            self.stack_size,
            self.yylen,
            self.stack,
            self.ps,
            self.lex_brackets,
            self.lex_casemods,
            self.lex_brackstack,
            self.lex_casestack,
            self.lex_defer,
            self.lex_dojoin,
            self.lex_expect,
            self.expect,
            self.lex_formbrack,
            self.lex_inpat,
            self.lex_op,
            self.lex_repl,
            self.lex_inwhat,
            self.last_lop_op,
            self.lex_starts,
            self.lex_stuff,
            self.multi_start,
            self.multi_end,
            self.multi_open,
            self.multi_close,
            self.preambled,
            self.lex_re_reparsing,
            self.lex_allbrackets,
            self.sublex_info,
            self.lex_shared,
            self.linestr,
            self.bufptr,
            self.oldbufptr,
            self.oldoldbufptr,
            self.bufend,
            self.linestart,
            self.last_uni,
            self.last_lop,
            self.copline,
            self.in_my,
            self.lex_state,
            self.error_count,
            self.in_my_stash,
            self.rsfp,
            self.rsfp_filters,
            self.form_lex_state,
            self.nextval,
            self.nexttype,
            self.nexttoke,
            self.saved_curcop,
            self.tokenbuf
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>(),
            self.herelines,
            self.preambling,
            self.lex_fakeeof,
            self.lex_flags,
            self.in_pod(),
            self.filtered(),
            self.saw_infix_sigil(),
            self.parsed_sub()
        )
    }
}
impl yy_parser {
    #[inline]
    pub fn in_pod(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_pod(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn filtered(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_filtered(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn saw_infix_sigil(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_saw_infix_sigil(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn parsed_sub(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_parsed_sub(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(in_pod: ::std::os::raw::c_uint, filtered: ::std::os::raw::c_uint, saw_infix_sigil: ::std::os::raw::c_uint, parsed_sub: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let in_pod: u32 = unsafe { ::std::mem::transmute(in_pod) };
            in_pod as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let filtered: u32 = unsafe { ::std::mem::transmute(filtered) };
            filtered as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let saw_infix_sigil: u32 = unsafe { ::std::mem::transmute(saw_infix_sigil) };
            saw_infix_sigil as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let parsed_sub: u32 = unsafe { ::std::mem::transmute(parsed_sub) };
            parsed_sub as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptr_tbl_ent {
    pub next: *mut ptr_tbl_ent,
    pub oldval: *const ::std::os::raw::c_void,
    pub newval: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ptr_tbl_ent() {
    assert_eq!(
        ::std::mem::size_of::<ptr_tbl_ent>(),
        24usize,
        concat!("Size of: ", stringify!(ptr_tbl_ent))
    );
    assert_eq!(
        ::std::mem::align_of::<ptr_tbl_ent>(),
        8usize,
        concat!("Alignment of ", stringify!(ptr_tbl_ent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl_ent>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl_ent),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl_ent>())).oldval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl_ent),
            "::",
            stringify!(oldval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl_ent>())).newval as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl_ent),
            "::",
            stringify!(newval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptr_tbl {
    pub tbl_ary: *mut *mut ptr_tbl_ent,
    pub tbl_max: UV,
    pub tbl_items: UV,
    pub tbl_arena: *mut ptr_tbl_arena,
    pub tbl_arena_next: *mut ptr_tbl_ent,
    pub tbl_arena_end: *mut ptr_tbl_ent,
}
#[test]
fn bindgen_test_layout_ptr_tbl() {
    assert_eq!(
        ::std::mem::size_of::<ptr_tbl>(),
        48usize,
        concat!("Size of: ", stringify!(ptr_tbl))
    );
    assert_eq!(
        ::std::mem::align_of::<ptr_tbl>(),
        8usize,
        concat!("Alignment of ", stringify!(ptr_tbl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl>())).tbl_ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl),
            "::",
            stringify!(tbl_ary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl>())).tbl_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl),
            "::",
            stringify!(tbl_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl>())).tbl_items as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl),
            "::",
            stringify!(tbl_items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl>())).tbl_arena as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl),
            "::",
            stringify!(tbl_arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl>())).tbl_arena_next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl),
            "::",
            stringify!(tbl_arena_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl>())).tbl_arena_end as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl),
            "::",
            stringify!(tbl_arena_end)
        )
    );
}
pub type runops_proc_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> ::std::os::raw::c_int>;
pub type share_proc_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV)>;
pub type thrhook_proc_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> ::std::os::raw::c_int>;
pub type destroyable_proc_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV) -> bool>;
pub type despatch_signals_proc_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter)>;
pub const perl_phase_PERL_PHASE_CONSTRUCT: perl_phase = 0;
pub const perl_phase_PERL_PHASE_START: perl_phase = 1;
pub const perl_phase_PERL_PHASE_CHECK: perl_phase = 2;
pub const perl_phase_PERL_PHASE_INIT: perl_phase = 3;
pub const perl_phase_PERL_PHASE_RUN: perl_phase = 4;
pub const perl_phase_PERL_PHASE_END: perl_phase = 5;
pub const perl_phase_PERL_PHASE_DESTRUCT: perl_phase = 6;
pub type perl_phase = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct perl_debug_pad {
    pub pad: [SV; 3usize],
}
#[test]
fn bindgen_test_layout_perl_debug_pad() {
    assert_eq!(
        ::std::mem::size_of::<perl_debug_pad>(),
        72usize,
        concat!("Size of: ", stringify!(perl_debug_pad))
    );
    assert_eq!(
        ::std::mem::align_of::<perl_debug_pad>(),
        8usize,
        concat!("Alignment of ", stringify!(perl_debug_pad))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<perl_debug_pad>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(perl_debug_pad),
            "::",
            stringify!(pad)
        )
    );
}
impl ::std::fmt::Debug for perl_debug_pad {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "perl_debug_pad {{ pad: {:?} }}", self.pad)
    }
}
pub type peep_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, o: *mut OP)>;
pub type SVCOMPARE_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, arg1: *mut SV, arg2: *mut SV) -> I32>;
pub type Perl_ophook_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, arg1: *mut OP)>;
pub type globhook_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exitlistentry {
    pub fn_: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             arg1: *mut ::std::os::raw::c_void),
    >,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_exitlistentry() {
    assert_eq!(
        ::std::mem::size_of::<exitlistentry>(),
        16usize,
        concat!("Size of: ", stringify!(exitlistentry))
    );
    assert_eq!(
        ::std::mem::align_of::<exitlistentry>(),
        8usize,
        concat!("Alignment of ", stringify!(exitlistentry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exitlistentry>())).fn_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exitlistentry),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exitlistentry>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exitlistentry),
            "::",
            stringify!(ptr)
        )
    );
}
pub type PerlExitListEntry = exitlistentry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct interpreter {
    pub Istack_sp: *mut *mut SV,
    pub Iop: *mut OP,
    pub Icurpad: *mut *mut SV,
    pub Istack_base: *mut *mut SV,
    pub Istack_max: *mut *mut SV,
    pub Isavestack: *mut ANY,
    pub Isavestack_ix: I32,
    pub Isavestack_max: I32,
    pub Iscopestack: *mut I32,
    pub Iscopestack_ix: I32,
    pub Iscopestack_max: I32,
    pub Itmps_stack: *mut *mut SV,
    pub Itmps_ix: isize,
    pub Itmps_floor: isize,
    pub Itmps_max: isize,
    pub Isub_generation: U32,
    pub Imarkstack: *mut I32,
    pub Imarkstack_ptr: *mut I32,
    pub Imarkstack_max: *mut I32,
    pub Istrtab: *mut HV,
    pub Imultideref_pc: *mut UNOP_AUX_item,
    pub Icurpm: *mut PMOP,
    pub Itainting: bool,
    pub Itainted: bool,
    pub Idelaymagic: U16,
    pub Ilocalizing: U8,
    pub Iin_eval: U8,
    pub Idefgv: *mut GV,
    pub Idowarn: U8,
    pub Iutf8cache: I8,
    pub Idefstash: *mut HV,
    pub Icurstash: *mut HV,
    pub Icurcop: *mut COP,
    pub Icurstack: *mut AV,
    pub Icurstackinfo: *mut PERL_SI,
    pub Imainstack: *mut AV,
    pub Isv_count: IV,
    pub Isv_objcount: IV,
    pub Isv_root: *mut SV,
    pub Isv_arenaroot: *mut SV,
    pub Ireg_curpm: *mut PMOP,
    pub Iregmatch_slab: *mut regmatch_slab,
    pub Iregmatch_state: *mut regmatch_state,
    pub Icomppad: *mut PAD,
    pub Isv_undef: SV,
    pub Isv_no: SV,
    pub Isv_yes: SV,
    pub Ipadname_undef: PADNAME,
    pub Ipadname_const: PADNAME,
    pub ISv: *mut SV,
    pub Iparser: *mut yy_parser,
    pub Istashcache: *mut HV,
    pub Ina: STRLEN,
    pub Istatbuf: stat,
    pub Istatcache: stat,
    pub Istatgv: *mut GV,
    pub Istatname: *mut SV,
    pub Itimesbuf: tms,
    pub Irs: *mut SV,
    pub Ilast_in_gv: *mut GV,
    pub Iofsgv: *mut GV,
    pub Idefoutgv: *mut GV,
    pub Ichopset: *const ::std::os::raw::c_char,
    pub Iformtarget: *mut SV,
    pub Ibodytarget: *mut SV,
    pub Itoptarget: *mut SV,
    pub Irestartop: *mut OP,
    pub Irestartjmpenv: *mut JMPENV,
    pub Itop_env: *mut JMPENV,
    pub Istart_env: JMPENV,
    pub Ierrors: *mut SV,
    pub Ihv_fetch_ent_mh: *mut HE,
    pub Ilastgotoprobe: *mut OP,
    pub Isortcop: *mut OP,
    pub Isortstash: *mut HV,
    pub Ifirstgv: *mut GV,
    pub Isecondgv: *mut GV,
    pub Iefloatbuf: *mut ::std::os::raw::c_char,
    pub Iefloatsize: STRLEN,
    pub Idumpindent: U16,
    pub Iexit_flags: U8,
    pub Iutf8locale: bool,
    pub Iin_utf8_CTYPE_locale: bool,
    pub Iwarn_locale: *mut SV,
    pub Icolors: [*mut ::std::os::raw::c_char; 6usize],
    pub Ipeepp: peep_t,
    pub Irpeepp: peep_t,
    pub Iopfreehook: Perl_ophook_t,
    pub Iwatchaddr: *mut *mut ::std::os::raw::c_char,
    pub Iwatchok: *mut ::std::os::raw::c_char,
    pub Iperldb: U32,
    pub Isignals: U32,
    pub Ireentrant_retint: ::std::os::raw::c_int,
    pub Iorigargc: ::std::os::raw::c_int,
    pub Iorigargv: *mut *mut ::std::os::raw::c_char,
    pub Ienvgv: *mut GV,
    pub Iincgv: *mut GV,
    pub Ihintgv: *mut GV,
    pub Iorigfilename: *mut ::std::os::raw::c_char,
    pub Ixsubfilename: *const ::std::os::raw::c_char,
    pub Idiehook: *mut SV,
    pub Iwarnhook: *mut SV,
    pub Ipatchlevel: *mut SV,
    pub Ilocalpatches: *const *const ::std::os::raw::c_char,
    pub Isplitstr: *const ::std::os::raw::c_char,
    pub Iminus_c: bool,
    pub Iminus_n: bool,
    pub Iminus_p: bool,
    pub Iminus_l: bool,
    pub Iminus_a: bool,
    pub Iminus_F: bool,
    pub Idoswitches: bool,
    pub Iminus_E: bool,
    pub Iinplace: *mut ::std::os::raw::c_char,
    pub Ie_script: *mut SV,
    pub Ibasetime: time_t,
    pub Imaxsysfd: I32,
    pub Istatusvalue: I32,
    pub Istatusvalue_posix: I32,
    pub Isig_pending: ::std::os::raw::c_int,
    pub Ipsig_pend: *mut ::std::os::raw::c_int,
    pub Istdingv: *mut GV,
    pub Istderrgv: *mut GV,
    pub Iargvgv: *mut GV,
    pub Iargvoutgv: *mut GV,
    pub Iargvout_stack: *mut AV,
    pub Ireplgv: *mut GV,
    pub Ierrgv: *mut GV,
    pub IDBgv: *mut GV,
    pub IDBline: *mut GV,
    pub IDBsub: *mut GV,
    pub IDBsingle: *mut SV,
    pub IDBtrace: *mut SV,
    pub IDBsignal: *mut SV,
    pub Idbargs: *mut AV,
    pub IDBcontrol: [IV; 3usize],
    pub Idebstash: *mut HV,
    pub Iglobalstash: *mut HV,
    pub Icurstname: *mut SV,
    pub Ibeginav: *mut AV,
    pub Iendav: *mut AV,
    pub Iunitcheckav: *mut AV,
    pub Icheckav: *mut AV,
    pub Iinitav: *mut AV,
    pub Ifdpid: *mut AV,
    pub Iop_mask: *mut ::std::os::raw::c_char,
    pub Imain_cv: *mut CV,
    pub Imain_root: *mut OP,
    pub Imain_start: *mut OP,
    pub Ieval_root: *mut OP,
    pub Ieval_start: *mut OP,
    pub Icurcopdb: *mut COP,
    pub Ifilemode: ::std::os::raw::c_int,
    pub Ilastfd: ::std::os::raw::c_int,
    pub Ioldname: *mut ::std::os::raw::c_char,
    pub IArgv: *mut *const ::std::os::raw::c_char,
    pub ICmd: *mut ::std::os::raw::c_char,
    pub Ipreambleav: *mut AV,
    pub Imess_sv: *mut SV,
    pub Iors_sv: *mut SV,
    pub Iforkprocess: ::std::os::raw::c_int,
    pub Igensym: I32,
    pub Icv_has_eval: bool,
    pub Itaint_warn: bool,
    pub Ilaststype: U16,
    pub Ilaststatval: ::std::os::raw::c_int,
    pub Imodcount: I32,
    pub Iexitlistlen: I32,
    pub Iexitlist: *mut PerlExitListEntry,
    pub Imodglobal: *mut HV,
    pub Iprofiledata: *mut U32,
    pub Icompiling: COP,
    pub Icompcv: *mut CV,
    pub Icomppad_name: *mut PADNAMELIST,
    pub Icomppad_name_fill: I32,
    pub Icomppad_name_floor: I32,
    pub IDBcv: *mut CV,
    pub Igeneration: ::std::os::raw::c_int,
    pub Iunicode: U32,
    pub Iin_clean_objs: bool,
    pub Iin_clean_all: bool,
    pub Inomemok: bool,
    pub Isavebegin: bool,
    pub Idelaymagic_uid: uid_t,
    pub Idelaymagic_euid: uid_t,
    pub Idelaymagic_gid: gid_t,
    pub Idelaymagic_egid: gid_t,
    pub Ian: U32,
    pub Ibreakable_sub_gen: U32,
    pub Icop_seqmax: U32,
    pub Ievalseq: U32,
    pub Iorigalen: U32,
    pub Iorigenviron: *mut *mut ::std::os::raw::c_char,
    pub Iosname: *mut ::std::os::raw::c_char,
    pub Isighandlerp: Sighandler_t,
    pub Ibody_roots: [*mut ::std::os::raw::c_void; 16usize],
    pub Idebug: U32,
    pub Imaxo: ::std::os::raw::c_int,
    pub Irunops: runops_proc_t,
    pub Isubname: *mut SV,
    pub Isubline: I32,
    pub Imin_intro_pending: I32,
    pub Imax_intro_pending: I32,
    pub Ipadix: I32,
    pub Iconstpadix: I32,
    pub Ipadix_floor: I32,
    pub Icollation_name: *mut ::std::os::raw::c_char,
    pub Icollxfrm_base: usize,
    pub Icollxfrm_mult: usize,
    pub Icollation_ix: U32,
    pub Icollation_standard: bool,
    pub Iunsafe: bool,
    pub Icolorset: bool,
    pub Iphase: perl_phase,
    pub Iin_load_module: bool,
    pub Iperl_destruct_level: ::std::os::raw::c_schar,
    pub Inumeric_standard: ::std::os::raw::c_int,
    pub Inumeric_local: bool,
    pub Inumeric_name: *mut ::std::os::raw::c_char,
    pub Inumeric_radix_sv: *mut SV,
    pub ILatin1: *mut SV,
    pub IUpperLatin1: *mut SV,
    pub IAboveLatin1: *mut SV,
    pub IInBitmap: *mut SV,
    pub INonL1NonFinalFold: *mut SV,
    pub IHasMultiCharFold: *mut SV,
    pub Iutf8_mark: *mut SV,
    pub Iutf8_toupper: *mut SV,
    pub Iutf8_totitle: *mut SV,
    pub Iutf8_tolower: *mut SV,
    pub Iutf8_tofold: *mut SV,
    pub Iutf8_charname_begin: *mut SV,
    pub Iutf8_charname_continue: *mut SV,
    pub Iutf8_swash_ptrs: [*mut SV; 10usize],
    pub IPosix_ptrs: [*mut SV; 16usize],
    pub IXPosix_ptrs: [*mut SV; 16usize],
    pub IGCB_invlist: *mut SV,
    pub ISB_invlist: *mut SV,
    pub IWB_invlist: *mut SV,
    pub Ilast_swash_hv: *mut HV,
    pub Ilast_swash_tmps: *mut U8,
    pub Ilast_swash_slen: STRLEN,
    pub Ilast_swash_key: [U8; 12usize],
    pub Ilast_swash_klen: U8,
    pub Ipad_reset_pending: bool,
    pub Isrand_called: bool,
    pub Ipsig_ptr: *mut *mut SV,
    pub Ipsig_name: *mut *mut SV,
    pub Iptr_table: *mut PTR_TBL_t,
    pub Ibeginav_save: *mut AV,
    pub Ibody_arenas: *mut ::std::os::raw::c_void,
    pub Iregex_pad: *mut *mut SV,
    pub Iregex_padav: *mut AV,
    pub Istashpad: *mut *mut HV,
    pub Istashpadmax: PADOFFSET,
    pub Istashpadix: PADOFFSET,
    pub Ireentrant_buffer: *mut REENTR,
    pub Icustom_op_names: *mut HV,
    pub Icustom_op_descs: *mut HV,
    pub Iperlio: *mut PerlIOl,
    pub Iknown_layers: *mut PerlIO_list_t,
    pub Idef_layerlist: *mut PerlIO_list_t,
    pub Iencoding: *mut SV,
    pub Ilex_encoding: *mut SV,
    pub Iutf8_idstart: *mut SV,
    pub Iutf8_idcont: *mut SV,
    pub Iutf8_xidstart: *mut SV,
    pub Iutf8_perl_idstart: *mut SV,
    pub Iutf8_perl_idcont: *mut SV,
    pub Iutf8_xidcont: *mut SV,
    pub Isort_RealCmp: SVCOMPARE_t,
    pub Icheckav_save: *mut AV,
    pub Iunitcheckav_save: *mut AV,
    pub Iclocktick: ::std::os::raw::c_long,
    pub Isharehook: share_proc_t,
    pub Ilockhook: share_proc_t,
    pub Iunlockhook: share_proc_t,
    pub Ithreadhook: thrhook_proc_t,
    pub Idestroyhook: destroyable_proc_t,
    pub Isignalhook: despatch_signals_proc_t,
    pub Iisarev: *mut HV,
    pub Iregistered_mros: *mut HV,
    pub Iblockhooks: *mut AV,
    pub Iutf8_foldclosures: *mut HV,
    pub Iutf8_foldable: *mut SV,
    pub Icustom_ops: *mut HV,
    pub IXpv: *mut XPV,
    pub Iscopestack_name: *mut *const ::std::os::raw::c_char,
    pub Idebug_pad: perl_debug_pad,
    pub Iglobhook: globhook_t,
    pub Ipadlist_generation: U32,
    pub Imy_cxt_list: *mut *mut ::std::os::raw::c_void,
    pub Imy_cxt_size: ::std::os::raw::c_int,
    pub Isv_consts: [*mut SV; 36usize],
    pub Irandom_state: perl_drand48_t,
}
#[test]
fn bindgen_test_layout_interpreter() {
    assert_eq!(
        ::std::mem::size_of::<interpreter>(),
        3408usize,
        concat!("Size of: ", stringify!(interpreter))
    );
    assert_eq!(
        ::std::mem::align_of::<interpreter>(),
        8usize,
        concat!("Alignment of ", stringify!(interpreter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istack_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istack_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurpad as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurpad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istack_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istack_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istack_max as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istack_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isavestack as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isavestack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isavestack_ix as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isavestack_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isavestack_max as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isavestack_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iscopestack as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iscopestack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iscopestack_ix as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iscopestack_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iscopestack_max as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iscopestack_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itmps_stack as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itmps_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itmps_ix as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itmps_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itmps_floor as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itmps_floor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itmps_max as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itmps_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isub_generation as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isub_generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imarkstack as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imarkstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imarkstack_ptr as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imarkstack_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imarkstack_max as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imarkstack_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istrtab as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istrtab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imultideref_pc as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imultideref_pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurpm as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itainting as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itainting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itainted as *const _ as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itainted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idelaymagic as *const _ as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idelaymagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilocalizing as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilocalizing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_eval as *const _ as usize },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idefgv as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idefgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idowarn as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idowarn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8cache as *const _ as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idefstash as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idefstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurstash as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurcop as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurcop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurstack as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurstackinfo as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurstackinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imainstack as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imainstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_count as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_objcount as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_objcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_root as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_arenaroot as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ireg_curpm as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ireg_curpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iregmatch_slab as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iregmatch_slab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iregmatch_state as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iregmatch_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icomppad as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icomppad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_undef as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_undef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_no as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_yes as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_yes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipadname_undef as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipadname_undef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipadname_const as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipadname_const)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).ISv as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(ISv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iparser as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iparser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istashcache as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istashcache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ina as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ina)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istatbuf as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istatbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istatcache as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istatcache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istatgv as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istatgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istatname as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istatname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itimesbuf as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itimesbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irs as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_in_gv as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_in_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iofsgv as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iofsgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idefoutgv as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idefoutgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ichopset as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ichopset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iformtarget as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iformtarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibodytarget as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibodytarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itoptarget as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itoptarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irestartop as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irestartop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irestartjmpenv as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irestartjmpenv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itop_env as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itop_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istart_env as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istart_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ierrors as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ierrors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ihv_fetch_ent_mh as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ihv_fetch_ent_mh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilastgotoprobe as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilastgotoprobe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isortcop as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isortcop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isortstash as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isortstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ifirstgv as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ifirstgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isecondgv as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isecondgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iefloatbuf as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iefloatbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iefloatsize as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iefloatsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idumpindent as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idumpindent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iexit_flags as *const _ as usize },
        1114usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iexit_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8locale as *const _ as usize },
        1115usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_utf8_CTYPE_locale as *const _ as usize },
        1116usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_utf8_CTYPE_locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iwarn_locale as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iwarn_locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icolors as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icolors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipeepp as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipeepp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irpeepp as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irpeepp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iopfreehook as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iopfreehook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iwatchaddr as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iwatchaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iwatchok as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iwatchok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iperldb as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iperldb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isignals as *const _ as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isignals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ireentrant_retint as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ireentrant_retint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigargc as *const _ as usize },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigargc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigargv as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigargv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ienvgv as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ienvgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iincgv as *const _ as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iincgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ihintgv as *const _ as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ihintgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigfilename as *const _ as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigfilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixsubfilename as *const _ as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixsubfilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idiehook as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idiehook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iwarnhook as *const _ as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iwarnhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipatchlevel as *const _ as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipatchlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilocalpatches as *const _ as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilocalpatches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isplitstr as *const _ as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isplitstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_c as *const _ as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_n as *const _ as usize },
        1321usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_p as *const _ as usize },
        1322usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_l as *const _ as usize },
        1323usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_a as *const _ as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_F as *const _ as usize },
        1325usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_F)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idoswitches as *const _ as usize },
        1326usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idoswitches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_E as *const _ as usize },
        1327usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iinplace as *const _ as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iinplace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ie_script as *const _ as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ie_script)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibasetime as *const _ as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibasetime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imaxsysfd as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imaxsysfd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istatusvalue as *const _ as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istatusvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istatusvalue_posix as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istatusvalue_posix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isig_pending as *const _ as usize },
        1364usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isig_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipsig_pend as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipsig_pend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istdingv as *const _ as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istdingv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istderrgv as *const _ as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istderrgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iargvgv as *const _ as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iargvgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iargvoutgv as *const _ as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iargvoutgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iargvout_stack as *const _ as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iargvout_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ireplgv as *const _ as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ireplgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ierrgv as *const _ as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ierrgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBgv as *const _ as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBline as *const _ as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBsub as *const _ as usize },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBsub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBsingle as *const _ as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBsingle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBtrace as *const _ as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBtrace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBsignal as *const _ as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBsignal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idbargs as *const _ as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idbargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBcontrol as *const _ as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBcontrol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idebstash as *const _ as usize },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idebstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iglobalstash as *const _ as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iglobalstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurstname as *const _ as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurstname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibeginav as *const _ as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibeginav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iendav as *const _ as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iendav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iunitcheckav as *const _ as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iunitcheckav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icheckav as *const _ as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icheckav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iinitav as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iinitav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ifdpid as *const _ as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ifdpid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iop_mask as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iop_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imain_cv as *const _ as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imain_cv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imain_root as *const _ as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imain_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imain_start as *const _ as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imain_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ieval_root as *const _ as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ieval_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ieval_start as *const _ as usize },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ieval_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurcopdb as *const _ as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurcopdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ifilemode as *const _ as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ifilemode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilastfd as *const _ as usize },
        1644usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilastfd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ioldname as *const _ as usize },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ioldname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IArgv as *const _ as usize },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IArgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).ICmd as *const _ as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(ICmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipreambleav as *const _ as usize },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipreambleav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imess_sv as *const _ as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imess_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iors_sv as *const _ as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iors_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iforkprocess as *const _ as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iforkprocess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Igensym as *const _ as usize },
        1700usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Igensym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icv_has_eval as *const _ as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icv_has_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itaint_warn as *const _ as usize },
        1705usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itaint_warn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilaststype as *const _ as usize },
        1706usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilaststype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilaststatval as *const _ as usize },
        1708usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilaststatval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imodcount as *const _ as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imodcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iexitlistlen as *const _ as usize },
        1716usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iexitlistlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iexitlist as *const _ as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iexitlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imodglobal as *const _ as usize },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imodglobal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iprofiledata as *const _ as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iprofiledata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icompiling as *const _ as usize },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icompiling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icompcv as *const _ as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icompcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icomppad_name as *const _ as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icomppad_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icomppad_name_fill as *const _ as usize },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icomppad_name_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icomppad_name_floor as *const _ as usize },
        1844usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icomppad_name_floor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBcv as *const _ as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Igeneration as *const _ as usize },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Igeneration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iunicode as *const _ as usize },
        1860usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iunicode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_clean_objs as *const _ as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_clean_objs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_clean_all as *const _ as usize },
        1865usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_clean_all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inomemok as *const _ as usize },
        1866usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inomemok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isavebegin as *const _ as usize },
        1867usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isavebegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idelaymagic_uid as *const _ as usize },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idelaymagic_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idelaymagic_euid as *const _ as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idelaymagic_euid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idelaymagic_gid as *const _ as usize },
        1876usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idelaymagic_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idelaymagic_egid as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idelaymagic_egid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ian as *const _ as usize },
        1884usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibreakable_sub_gen as *const _ as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibreakable_sub_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icop_seqmax as *const _ as usize },
        1892usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icop_seqmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ievalseq as *const _ as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ievalseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigalen as *const _ as usize },
        1900usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigalen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigenviron as *const _ as usize },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigenviron)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iosname as *const _ as usize },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iosname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isighandlerp as *const _ as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isighandlerp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibody_roots as *const _ as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibody_roots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idebug as *const _ as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imaxo as *const _ as usize },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imaxo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irunops as *const _ as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irunops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isubname as *const _ as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isubname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isubline as *const _ as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isubline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imin_intro_pending as *const _ as usize },
        2084usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imin_intro_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imax_intro_pending as *const _ as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imax_intro_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipadix as *const _ as usize },
        2092usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipadix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iconstpadix as *const _ as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iconstpadix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipadix_floor as *const _ as usize },
        2100usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipadix_floor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollation_name as *const _ as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollation_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollxfrm_base as *const _ as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollxfrm_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollxfrm_mult as *const _ as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollxfrm_mult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollation_ix as *const _ as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollation_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollation_standard as *const _ as usize },
        2132usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollation_standard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iunsafe as *const _ as usize },
        2133usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iunsafe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icolorset as *const _ as usize },
        2134usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icolorset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iphase as *const _ as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iphase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_load_module as *const _ as usize },
        2140usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_load_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iperl_destruct_level as *const _ as usize },
        2141usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iperl_destruct_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inumeric_standard as *const _ as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inumeric_standard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inumeric_local as *const _ as usize },
        2148usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inumeric_local)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inumeric_name as *const _ as usize },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inumeric_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inumeric_radix_sv as *const _ as usize },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inumeric_radix_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).ILatin1 as *const _ as usize },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(ILatin1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IUpperLatin1 as *const _ as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IUpperLatin1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IAboveLatin1 as *const _ as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IAboveLatin1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IInBitmap as *const _ as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IInBitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).INonL1NonFinalFold as *const _ as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(INonL1NonFinalFold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IHasMultiCharFold as *const _ as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IHasMultiCharFold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_mark as *const _ as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_toupper as *const _ as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_totitle as *const _ as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_totitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_tolower as *const _ as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_tofold as *const _ as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_tofold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_charname_begin as *const _ as usize },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_charname_begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_charname_continue as *const _ as usize },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_charname_continue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_swash_ptrs as *const _ as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_swash_ptrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IPosix_ptrs as *const _ as usize },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IPosix_ptrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IXPosix_ptrs as *const _ as usize },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IXPosix_ptrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IGCB_invlist as *const _ as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IGCB_invlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).ISB_invlist as *const _ as usize },
        2616usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(ISB_invlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IWB_invlist as *const _ as usize },
        2624usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IWB_invlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_hv as *const _ as usize },
        2632usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_hv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_tmps as *const _ as usize },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_tmps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_slen as *const _ as usize },
        2648usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_slen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_key as *const _ as usize },
        2656usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_klen as *const _ as usize },
        2668usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_klen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipad_reset_pending as *const _ as usize },
        2669usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipad_reset_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isrand_called as *const _ as usize },
        2670usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isrand_called)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipsig_ptr as *const _ as usize },
        2672usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipsig_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipsig_name as *const _ as usize },
        2680usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipsig_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iptr_table as *const _ as usize },
        2688usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iptr_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibeginav_save as *const _ as usize },
        2696usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibeginav_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibody_arenas as *const _ as usize },
        2704usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibody_arenas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iregex_pad as *const _ as usize },
        2712usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iregex_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iregex_padav as *const _ as usize },
        2720usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iregex_padav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istashpad as *const _ as usize },
        2728usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istashpad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istashpadmax as *const _ as usize },
        2736usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istashpadmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istashpadix as *const _ as usize },
        2744usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istashpadix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ireentrant_buffer as *const _ as usize },
        2752usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ireentrant_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icustom_op_names as *const _ as usize },
        2760usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icustom_op_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icustom_op_descs as *const _ as usize },
        2768usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icustom_op_descs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iperlio as *const _ as usize },
        2776usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iperlio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iknown_layers as *const _ as usize },
        2784usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iknown_layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idef_layerlist as *const _ as usize },
        2792usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idef_layerlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iencoding as *const _ as usize },
        2800usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iencoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_encoding as *const _ as usize },
        2808usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_idstart as *const _ as usize },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_idstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_idcont as *const _ as usize },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_idcont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_xidstart as *const _ as usize },
        2832usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_xidstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_perl_idstart as *const _ as usize },
        2840usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_perl_idstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_perl_idcont as *const _ as usize },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_perl_idcont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_xidcont as *const _ as usize },
        2856usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_xidcont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isort_RealCmp as *const _ as usize },
        2864usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isort_RealCmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icheckav_save as *const _ as usize },
        2872usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icheckav_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iunitcheckav_save as *const _ as usize },
        2880usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iunitcheckav_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iclocktick as *const _ as usize },
        2888usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iclocktick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isharehook as *const _ as usize },
        2896usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isharehook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilockhook as *const _ as usize },
        2904usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilockhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iunlockhook as *const _ as usize },
        2912usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iunlockhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ithreadhook as *const _ as usize },
        2920usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ithreadhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idestroyhook as *const _ as usize },
        2928usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idestroyhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isignalhook as *const _ as usize },
        2936usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isignalhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iisarev as *const _ as usize },
        2944usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iisarev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iregistered_mros as *const _ as usize },
        2952usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iregistered_mros)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iblockhooks as *const _ as usize },
        2960usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iblockhooks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_foldclosures as *const _ as usize },
        2968usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_foldclosures)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_foldable as *const _ as usize },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_foldable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icustom_ops as *const _ as usize },
        2984usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icustom_ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IXpv as *const _ as usize },
        2992usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IXpv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iscopestack_name as *const _ as usize },
        3000usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iscopestack_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idebug_pad as *const _ as usize },
        3008usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idebug_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iglobhook as *const _ as usize },
        3080usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iglobhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipadlist_generation as *const _ as usize },
        3088usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipadlist_generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imy_cxt_list as *const _ as usize },
        3096usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imy_cxt_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imy_cxt_size as *const _ as usize },
        3104usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imy_cxt_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_consts as *const _ as usize },
        3112usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_consts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irandom_state as *const _ as usize },
        3400usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irandom_state)
        )
    );
}
impl ::std::fmt::Debug for interpreter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "interpreter {{ Istack_sp: {:?}, Iop: {:?}, Icurpad: {:?}, Istack_base: {:?}, Istack_max: {:?}, Isavestack: {:?}, Isavestack_ix: {:?}, Isavestack_max: {:?}, Iscopestack: {:?}, Iscopestack_ix: {:?}, Iscopestack_max: {:?}, Itmps_stack: {:?}, Itmps_ix: {:?}, Itmps_floor: {:?}, Itmps_max: {:?}, Isub_generation: {:?}, Imarkstack: {:?}, Imarkstack_ptr: {:?}, Imarkstack_max: {:?}, Istrtab: {:?}, Imultideref_pc: {:?}, Icurpm: {:?}, Itainting: {:?}, Itainted: {:?}, Idelaymagic: {:?}, Ilocalizing: {:?}, Iin_eval: {:?}, Idefgv: {:?}, Idowarn: {:?}, Iutf8cache: {:?}, Idefstash: {:?}, Icurstash: {:?}, Icurcop: {:?}, Icurstack: {:?}, Icurstackinfo: {:?}, Imainstack: {:?}, Isv_count: {:?}, Isv_objcount: {:?}, Isv_root: {:?}, Isv_arenaroot: {:?}, Ireg_curpm: {:?}, Iregmatch_slab: {:?}, Iregmatch_state: {:?}, Icomppad: {:?}, Isv_undef: {:?}, Isv_no: {:?}, Isv_yes: {:?}, Ipadname_undef: {:?}, Ipadname_const: {:?}, ISv: {:?}, Iparser: {:?}, Istashcache: {:?}, Ina: {:?}, Istatbuf: {:?}, Istatcache: {:?}, Istatgv: {:?}, Istatname: {:?}, Itimesbuf: {:?}, Irs: {:?}, Ilast_in_gv: {:?}, Iofsgv: {:?}, Idefoutgv: {:?}, Ichopset: {:?}, Iformtarget: {:?}, Ibodytarget: {:?}, Itoptarget: {:?}, Irestartop: {:?}, Irestartjmpenv: {:?}, Itop_env: {:?}, Istart_env: {:?}, Ierrors: {:?}, Ihv_fetch_ent_mh: {:?}, Ilastgotoprobe: {:?}, Isortcop: {:?}, Isortstash: {:?}, Ifirstgv: {:?}, Isecondgv: {:?}, Iefloatbuf: {:?}, Iefloatsize: {:?}, Idumpindent: {:?}, Iexit_flags: {:?}, Iutf8locale: {:?}, Iin_utf8_CTYPE_locale: {:?}, Iwarn_locale: {:?}, Icolors: {:?}, Ipeepp: {:?}, Irpeepp: {:?}, Iopfreehook: {:?}, Iwatchaddr: {:?}, Iwatchok: {:?}, Iperldb: {:?}, Isignals: {:?}, Ireentrant_retint: {:?}, Iorigargc: {:?}, Iorigargv: {:?}, Ienvgv: {:?}, Iincgv: {:?}, Ihintgv: {:?}, Iorigfilename: {:?}, Ixsubfilename: {:?}, Idiehook: {:?}, Iwarnhook: {:?}, Ipatchlevel: {:?}, Ilocalpatches: {:?}, Isplitstr: {:?}, Iminus_c: {:?}, Iminus_n: {:?}, Iminus_p: {:?}, Iminus_l: {:?}, Iminus_a: {:?}, Iminus_F: {:?}, Idoswitches: {:?}, Iminus_E: {:?}, Iinplace: {:?}, Ie_script: {:?}, Ibasetime: {:?}, Imaxsysfd: {:?}, Istatusvalue: {:?}, Istatusvalue_posix: {:?}, Isig_pending: {:?}, Ipsig_pend: {:?}, Istdingv: {:?}, Istderrgv: {:?}, Iargvgv: {:?}, Iargvoutgv: {:?}, Iargvout_stack: {:?}, Ireplgv: {:?}, Ierrgv: {:?}, IDBgv: {:?}, IDBline: {:?}, IDBsub: {:?}, IDBsingle: {:?}, IDBtrace: {:?}, IDBsignal: {:?}, Idbargs: {:?}, IDBcontrol: {:?}, Idebstash: {:?}, Iglobalstash: {:?}, Icurstname: {:?}, Ibeginav: {:?}, Iendav: {:?}, Iunitcheckav: {:?}, Icheckav: {:?}, Iinitav: {:?}, Ifdpid: {:?}, Iop_mask: {:?}, Imain_cv: {:?}, Imain_root: {:?}, Imain_start: {:?}, Ieval_root: {:?}, Ieval_start: {:?}, Icurcopdb: {:?}, Ifilemode: {:?}, Ilastfd: {:?}, Ioldname: {:?}, IArgv: {:?}, ICmd: {:?}, Ipreambleav: {:?}, Imess_sv: {:?}, Iors_sv: {:?}, Iforkprocess: {:?}, Igensym: {:?}, Icv_has_eval: {:?}, Itaint_warn: {:?}, Ilaststype: {:?}, Ilaststatval: {:?}, Imodcount: {:?}, Iexitlistlen: {:?}, Iexitlist: {:?}, Imodglobal: {:?}, Iprofiledata: {:?}, Icompiling: {:?}, Icompcv: {:?}, Icomppad_name: {:?}, Icomppad_name_fill: {:?}, Icomppad_name_floor: {:?}, IDBcv: {:?}, Igeneration: {:?}, Iunicode: {:?}, Iin_clean_objs: {:?}, Iin_clean_all: {:?}, Inomemok: {:?}, Isavebegin: {:?}, Idelaymagic_uid: {:?}, Idelaymagic_euid: {:?}, Idelaymagic_gid: {:?}, Idelaymagic_egid: {:?}, Ian: {:?}, Ibreakable_sub_gen: {:?}, Icop_seqmax: {:?}, Ievalseq: {:?}, Iorigalen: {:?}, Iorigenviron: {:?}, Iosname: {:?}, Isighandlerp: {:?}, Ibody_roots: {:?}, Idebug: {:?}, Imaxo: {:?}, Irunops: {:?}, Isubname: {:?}, Isubline: {:?}, Imin_intro_pending: {:?}, Imax_intro_pending: {:?}, Ipadix: {:?}, Iconstpadix: {:?}, Ipadix_floor: {:?}, Icollation_name: {:?}, Icollxfrm_base: {:?}, Icollxfrm_mult: {:?}, Icollation_ix: {:?}, Icollation_standard: {:?}, Iunsafe: {:?}, Icolorset: {:?}, Iphase: {:?}, Iin_load_module: {:?}, Iperl_destruct_level: {:?}, Inumeric_standard: {:?}, Inumeric_local: {:?}, Inumeric_name: {:?}, Inumeric_radix_sv: {:?}, ILatin1: {:?}, IUpperLatin1: {:?}, IAboveLatin1: {:?}, IInBitmap: {:?}, INonL1NonFinalFold: {:?}, IHasMultiCharFold: {:?}, Iutf8_mark: {:?}, Iutf8_toupper: {:?}, Iutf8_totitle: {:?}, Iutf8_tolower: {:?}, Iutf8_tofold: {:?}, Iutf8_charname_begin: {:?}, Iutf8_charname_continue: {:?}, Iutf8_swash_ptrs: {:?}, IPosix_ptrs: {:?}, IXPosix_ptrs: {:?}, IGCB_invlist: {:?}, ISB_invlist: {:?}, IWB_invlist: {:?}, Ilast_swash_hv: {:?}, Ilast_swash_tmps: {:?}, Ilast_swash_slen: {:?}, Ilast_swash_key: {:?}, Ilast_swash_klen: {:?}, Ipad_reset_pending: {:?}, Isrand_called: {:?}, Ipsig_ptr: {:?}, Ipsig_name: {:?}, Iptr_table: {:?}, Ibeginav_save: {:?}, Ibody_arenas: {:?}, Iregex_pad: {:?}, Iregex_padav: {:?}, Istashpad: {:?}, Istashpadmax: {:?}, Istashpadix: {:?}, Ireentrant_buffer: {:?}, Icustom_op_names: {:?}, Icustom_op_descs: {:?}, Iperlio: {:?}, Iknown_layers: {:?}, Idef_layerlist: {:?}, Iencoding: {:?}, Ilex_encoding: {:?}, Iutf8_idstart: {:?}, Iutf8_idcont: {:?}, Iutf8_xidstart: {:?}, Iutf8_perl_idstart: {:?}, Iutf8_perl_idcont: {:?}, Iutf8_xidcont: {:?}, Isort_RealCmp: {:?}, Icheckav_save: {:?}, Iunitcheckav_save: {:?}, Iclocktick: {:?}, Isharehook: {:?}, Ilockhook: {:?}, Iunlockhook: {:?}, Ithreadhook: {:?}, Idestroyhook: {:?}, Isignalhook: {:?}, Iisarev: {:?}, Iregistered_mros: {:?}, Iblockhooks: {:?}, Iutf8_foldclosures: {:?}, Iutf8_foldable: {:?}, Icustom_ops: {:?}, IXpv: {:?}, Iscopestack_name: {:?}, Idebug_pad: {:?}, Iglobhook: {:?}, Ipadlist_generation: {:?}, Imy_cxt_list: {:?}, Imy_cxt_size: {:?}, Isv_consts: [{}], Irandom_state: {:?} }}",
            self.Istack_sp,
            self.Iop,
            self.Icurpad,
            self.Istack_base,
            self.Istack_max,
            self.Isavestack,
            self.Isavestack_ix,
            self.Isavestack_max,
            self.Iscopestack,
            self.Iscopestack_ix,
            self.Iscopestack_max,
            self.Itmps_stack,
            self.Itmps_ix,
            self.Itmps_floor,
            self.Itmps_max,
            self.Isub_generation,
            self.Imarkstack,
            self.Imarkstack_ptr,
            self.Imarkstack_max,
            self.Istrtab,
            self.Imultideref_pc,
            self.Icurpm,
            self.Itainting,
            self.Itainted,
            self.Idelaymagic,
            self.Ilocalizing,
            self.Iin_eval,
            self.Idefgv,
            self.Idowarn,
            self.Iutf8cache,
            self.Idefstash,
            self.Icurstash,
            self.Icurcop,
            self.Icurstack,
            self.Icurstackinfo,
            self.Imainstack,
            self.Isv_count,
            self.Isv_objcount,
            self.Isv_root,
            self.Isv_arenaroot,
            self.Ireg_curpm,
            self.Iregmatch_slab,
            self.Iregmatch_state,
            self.Icomppad,
            self.Isv_undef,
            self.Isv_no,
            self.Isv_yes,
            self.Ipadname_undef,
            self.Ipadname_const,
            self.ISv,
            self.Iparser,
            self.Istashcache,
            self.Ina,
            self.Istatbuf,
            self.Istatcache,
            self.Istatgv,
            self.Istatname,
            self.Itimesbuf,
            self.Irs,
            self.Ilast_in_gv,
            self.Iofsgv,
            self.Idefoutgv,
            self.Ichopset,
            self.Iformtarget,
            self.Ibodytarget,
            self.Itoptarget,
            self.Irestartop,
            self.Irestartjmpenv,
            self.Itop_env,
            self.Istart_env,
            self.Ierrors,
            self.Ihv_fetch_ent_mh,
            self.Ilastgotoprobe,
            self.Isortcop,
            self.Isortstash,
            self.Ifirstgv,
            self.Isecondgv,
            self.Iefloatbuf,
            self.Iefloatsize,
            self.Idumpindent,
            self.Iexit_flags,
            self.Iutf8locale,
            self.Iin_utf8_CTYPE_locale,
            self.Iwarn_locale,
            self.Icolors,
            self.Ipeepp,
            self.Irpeepp,
            self.Iopfreehook,
            self.Iwatchaddr,
            self.Iwatchok,
            self.Iperldb,
            self.Isignals,
            self.Ireentrant_retint,
            self.Iorigargc,
            self.Iorigargv,
            self.Ienvgv,
            self.Iincgv,
            self.Ihintgv,
            self.Iorigfilename,
            self.Ixsubfilename,
            self.Idiehook,
            self.Iwarnhook,
            self.Ipatchlevel,
            self.Ilocalpatches,
            self.Isplitstr,
            self.Iminus_c,
            self.Iminus_n,
            self.Iminus_p,
            self.Iminus_l,
            self.Iminus_a,
            self.Iminus_F,
            self.Idoswitches,
            self.Iminus_E,
            self.Iinplace,
            self.Ie_script,
            self.Ibasetime,
            self.Imaxsysfd,
            self.Istatusvalue,
            self.Istatusvalue_posix,
            self.Isig_pending,
            self.Ipsig_pend,
            self.Istdingv,
            self.Istderrgv,
            self.Iargvgv,
            self.Iargvoutgv,
            self.Iargvout_stack,
            self.Ireplgv,
            self.Ierrgv,
            self.IDBgv,
            self.IDBline,
            self.IDBsub,
            self.IDBsingle,
            self.IDBtrace,
            self.IDBsignal,
            self.Idbargs,
            self.IDBcontrol,
            self.Idebstash,
            self.Iglobalstash,
            self.Icurstname,
            self.Ibeginav,
            self.Iendav,
            self.Iunitcheckav,
            self.Icheckav,
            self.Iinitav,
            self.Ifdpid,
            self.Iop_mask,
            self.Imain_cv,
            self.Imain_root,
            self.Imain_start,
            self.Ieval_root,
            self.Ieval_start,
            self.Icurcopdb,
            self.Ifilemode,
            self.Ilastfd,
            self.Ioldname,
            self.IArgv,
            self.ICmd,
            self.Ipreambleav,
            self.Imess_sv,
            self.Iors_sv,
            self.Iforkprocess,
            self.Igensym,
            self.Icv_has_eval,
            self.Itaint_warn,
            self.Ilaststype,
            self.Ilaststatval,
            self.Imodcount,
            self.Iexitlistlen,
            self.Iexitlist,
            self.Imodglobal,
            self.Iprofiledata,
            self.Icompiling,
            self.Icompcv,
            self.Icomppad_name,
            self.Icomppad_name_fill,
            self.Icomppad_name_floor,
            self.IDBcv,
            self.Igeneration,
            self.Iunicode,
            self.Iin_clean_objs,
            self.Iin_clean_all,
            self.Inomemok,
            self.Isavebegin,
            self.Idelaymagic_uid,
            self.Idelaymagic_euid,
            self.Idelaymagic_gid,
            self.Idelaymagic_egid,
            self.Ian,
            self.Ibreakable_sub_gen,
            self.Icop_seqmax,
            self.Ievalseq,
            self.Iorigalen,
            self.Iorigenviron,
            self.Iosname,
            self.Isighandlerp,
            self.Ibody_roots,
            self.Idebug,
            self.Imaxo,
            self.Irunops,
            self.Isubname,
            self.Isubline,
            self.Imin_intro_pending,
            self.Imax_intro_pending,
            self.Ipadix,
            self.Iconstpadix,
            self.Ipadix_floor,
            self.Icollation_name,
            self.Icollxfrm_base,
            self.Icollxfrm_mult,
            self.Icollation_ix,
            self.Icollation_standard,
            self.Iunsafe,
            self.Icolorset,
            self.Iphase,
            self.Iin_load_module,
            self.Iperl_destruct_level,
            self.Inumeric_standard,
            self.Inumeric_local,
            self.Inumeric_name,
            self.Inumeric_radix_sv,
            self.ILatin1,
            self.IUpperLatin1,
            self.IAboveLatin1,
            self.IInBitmap,
            self.INonL1NonFinalFold,
            self.IHasMultiCharFold,
            self.Iutf8_mark,
            self.Iutf8_toupper,
            self.Iutf8_totitle,
            self.Iutf8_tolower,
            self.Iutf8_tofold,
            self.Iutf8_charname_begin,
            self.Iutf8_charname_continue,
            self.Iutf8_swash_ptrs,
            self.IPosix_ptrs,
            self.IXPosix_ptrs,
            self.IGCB_invlist,
            self.ISB_invlist,
            self.IWB_invlist,
            self.Ilast_swash_hv,
            self.Ilast_swash_tmps,
            self.Ilast_swash_slen,
            self.Ilast_swash_key,
            self.Ilast_swash_klen,
            self.Ipad_reset_pending,
            self.Isrand_called,
            self.Ipsig_ptr,
            self.Ipsig_name,
            self.Iptr_table,
            self.Ibeginav_save,
            self.Ibody_arenas,
            self.Iregex_pad,
            self.Iregex_padav,
            self.Istashpad,
            self.Istashpadmax,
            self.Istashpadix,
            self.Ireentrant_buffer,
            self.Icustom_op_names,
            self.Icustom_op_descs,
            self.Iperlio,
            self.Iknown_layers,
            self.Idef_layerlist,
            self.Iencoding,
            self.Ilex_encoding,
            self.Iutf8_idstart,
            self.Iutf8_idcont,
            self.Iutf8_xidstart,
            self.Iutf8_perl_idstart,
            self.Iutf8_perl_idcont,
            self.Iutf8_xidcont,
            self.Isort_RealCmp,
            self.Icheckav_save,
            self.Iunitcheckav_save,
            self.Iclocktick,
            self.Isharehook,
            self.Ilockhook,
            self.Iunlockhook,
            self.Ithreadhook,
            self.Idestroyhook,
            self.Isignalhook,
            self.Iisarev,
            self.Iregistered_mros,
            self.Iblockhooks,
            self.Iutf8_foldclosures,
            self.Iutf8_foldable,
            self.Icustom_ops,
            self.IXpv,
            self.Iscopestack_name,
            self.Idebug_pad,
            self.Iglobhook,
            self.Ipadlist_generation,
            self.Imy_cxt_list,
            self.Imy_cxt_size,
            self.Isv_consts
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>(),
            self.Irandom_state
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptr_tbl_arena {
    pub _address: u8,
}
