/* automatically generated by rust-bindgen */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_ino_t = __uint32_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_uid_t = __uint32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl ::std::fmt::Debug for _opaque_pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "_opaque_pthread_mutex_t {{ __sig: {:?}, __opaque: [{}] }}",
            self.__sig,
            self.__opaque
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type dev_t = __darwin_dev_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type ino_t = __darwin_ino_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type off_t = __darwin_off_t;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        120usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atimespec as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtimespec as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctimespec as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_flags as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gen as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_lspare as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_qspare as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_qspare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms {
    pub tms_utime: clock_t,
    pub tms_stime: clock_t,
    pub tms_cutime: clock_t,
    pub tms_cstime: clock_t,
}
#[test]
fn bindgen_test_layout_tms() {
    assert_eq!(
        ::std::mem::size_of::<tms>(),
        32usize,
        concat!("Size of: ", stringify!(tms))
    );
    assert_eq!(
        ::std::mem::align_of::<tms>(),
        8usize,
        concat!("Alignment of ", stringify!(tms))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tms>())).tms_utime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tms>())).tms_stime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tms>())).tms_cutime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_cutime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tms>())).tms_cstime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tms),
            "::",
            stringify!(tms_cstime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dirent {
    pub d_ino: ino_t,
    pub d_reclen: __uint16_t,
    pub d_type: __uint8_t,
    pub d_namlen: __uint8_t,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        264usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        4usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_namlen as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_namlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
impl ::std::fmt::Debug for dirent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "dirent {{ d_ino: {:?}, d_reclen: {:?}, d_type: {:?}, d_namlen: {:?}, d_name: [{}] }}",
            self.d_ino,
            self.d_reclen,
            self.d_type,
            self.d_namlen,
            self.d_name
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __dd_rewind: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
#[test]
fn bindgen_test_layout_DIR() {
    assert_eq!(
        ::std::mem::size_of::<DIR>(),
        136usize,
        concat!("Size of: ", stringify!(DIR))
    );
    assert_eq!(
        ::std::mem::align_of::<DIR>(),
        8usize,
        concat!("Alignment of ", stringify!(DIR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_loc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_rewind as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_rewind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_lock as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_td as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_td)
        )
    );
}
impl ::std::fmt::Debug for DIR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "DIR {{ __dd_fd: {:?}, __dd_loc: {:?}, __dd_size: {:?}, __dd_buf: {:?}, __dd_len: {:?}, __dd_seek: {:?}, __dd_rewind: {:?}, __dd_flags: {:?}, __dd_lock: {:?}, __dd_td: {:?} }}",
            self.__dd_fd,
            self.__dd_loc,
            self.__dd_size,
            self.__dd_buf,
            self.__dd_len,
            self.__dd_seek,
            self.__dd_rewind,
            self.__dd_flags,
            self.__dd_lock,
            self.__dd_td
        )
    }
}
pub type IV = ::std::os::raw::c_long;
pub type UV = ::std::os::raw::c_ulong;
pub type NV = f64;
pub type STRLEN = usize;
pub type OP = op;
pub type COP = cop;
pub type PMOP = pmop;
pub type PerlInterpreter = interpreter;
pub type SV = sv;
pub type AV = av;
pub type HV = hv;
pub type CV = cv;
pub type REGEXP = regexp;
pub type GP = gp;
pub type GV = gv;
pub type PERL_CONTEXT = context;
pub type MAGIC = magic;
pub type XRV = xrv;
pub type XPV = xpv;
pub type XPVIV = xpviv;
pub type XPVNV = xpvnv;
pub type XPVMG = xpvmg;
pub type XPVLV = xpvlv;
pub type XPVAV = xpvav;
pub type XPVHV = xpvhv;
pub type XPVGV = xpvgv;
pub type XPVCV = xpvcv;
pub type XPVBM = xpvbm;
pub type XPVIO = xpvio;
pub type MGVTBL = mgvtbl;
pub type ANY = any;
pub type PTR_TBL_t = ptr_tbl;
pub type CLONE_PARAMS = clone_params;
pub type U8 = ::std::os::raw::c_uchar;
pub type U16 = ::std::os::raw::c_ushort;
pub type I32 = ::std::os::raw::c_int;
pub type U32 = ::std::os::raw::c_uint;
pub type line_t = U32;
#[repr(C)]
#[derive(Copy, Clone)]pub union any { pub any_ptr : * mut :: std :: os :: raw :: c_void , pub any_i32 : I32 , pub any_iv : IV , pub any_long : :: std :: os :: raw :: c_long , pub any_bool : :: std :: os :: raw :: c_char , pub any_dptr : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , pub any_dxptr : :: std :: option :: Option < unsafe extern "C" fn ( my_perl : * mut PerlInterpreter , arg1 : * mut :: std :: os :: raw :: c_void ) > , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_any() {
    assert_eq!(
        ::std::mem::size_of::<any>(),
        8usize,
        concat!("Size of: ", stringify!(any))
    );
    assert_eq!(
        ::std::mem::align_of::<any>(),
        8usize,
        concat!("Alignment of ", stringify!(any))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_long as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_bool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dxptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dxptr)
        )
    );
}
impl ::std::fmt::Debug for any {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "any {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PerlIO {
    _unused: [u8; 0],
}
pub type PerlIOl = _PerlIO;
pub type PerlIO = *mut PerlIOl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PerlIO_list_s {
    _unused: [u8; 0],
}
pub type PerlIO_list_t = PerlIO_list_s;
pub type Sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regnode {
    pub flags: U8,
    pub type_: U8,
    pub next_off: U16,
}
#[test]
fn bindgen_test_layout_regnode() {
    assert_eq!(
        ::std::mem::size_of::<regnode>(),
        4usize,
        concat!("Size of: ", stringify!(regnode))
    );
    assert_eq!(
        ::std::mem::align_of::<regnode>(),
        2usize,
        concat!("Alignment of ", stringify!(regnode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regnode>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regnode),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regnode>())).type_ as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(regnode),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regnode>())).next_off as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(regnode),
            "::",
            stringify!(next_off)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_substr_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regexp {
    pub startp: *mut I32,
    pub endp: *mut I32,
    pub regstclass: *mut regnode,
    pub substrs: *mut reg_substr_data,
    pub precomp: *mut ::std::os::raw::c_char,
    pub data: *mut reg_data,
    pub subbeg: *mut ::std::os::raw::c_char,
    pub offsets: *mut U32,
    pub sublen: I32,
    pub refcnt: I32,
    pub minlen: I32,
    pub prelen: I32,
    pub nparens: U32,
    pub lastparen: U32,
    pub lastcloseparen: U32,
    pub reganch: U32,
    pub program: [regnode; 1usize],
}
#[test]
fn bindgen_test_layout_regexp() {
    assert_eq!(
        ::std::mem::size_of::<regexp>(),
        104usize,
        concat!("Size of: ", stringify!(regexp))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).startp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(startp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).endp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(endp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).regstclass as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(regstclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).substrs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(substrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).precomp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(precomp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).subbeg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(subbeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).offsets as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).sublen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(sublen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).refcnt as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).minlen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(minlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).prelen as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(prelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).nparens as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(nparens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).lastparen as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(lastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).lastcloseparen as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(lastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).reganch as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(reganch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).program as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(program)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_scream_pos_data_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sv {
    pub sv_any: *mut ::std::os::raw::c_void,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_sv() {
    assert_eq!(
        ::std::mem::size_of::<sv>(),
        16usize,
        concat!("Size of: ", stringify!(sv))
    );
    assert_eq!(
        ::std::mem::align_of::<sv>(),
        8usize,
        concat!("Alignment of ", stringify!(sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gv {
    pub sv_any: *mut XPVGV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_gv() {
    assert_eq!(
        ::std::mem::size_of::<gv>(),
        16usize,
        concat!("Size of: ", stringify!(gv))
    );
    assert_eq!(
        ::std::mem::align_of::<gv>(),
        8usize,
        concat!("Alignment of ", stringify!(gv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cv {
    pub sv_any: *mut XPVCV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_cv() {
    assert_eq!(
        ::std::mem::size_of::<cv>(),
        16usize,
        concat!("Size of: ", stringify!(cv))
    );
    assert_eq!(
        ::std::mem::align_of::<cv>(),
        8usize,
        concat!("Alignment of ", stringify!(cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct av {
    pub sv_any: *mut XPVAV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_av() {
    assert_eq!(
        ::std::mem::size_of::<av>(),
        16usize,
        concat!("Size of: ", stringify!(av))
    );
    assert_eq!(
        ::std::mem::align_of::<av>(),
        8usize,
        concat!("Alignment of ", stringify!(av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hv {
    pub sv_any: *mut XPVHV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_hv() {
    assert_eq!(
        ::std::mem::size_of::<hv>(),
        16usize,
        concat!("Size of: ", stringify!(hv))
    );
    assert_eq!(
        ::std::mem::align_of::<hv>(),
        8usize,
        concat!("Alignment of ", stringify!(hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io {
    pub sv_any: *mut XPVIO,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_io() {
    assert_eq!(
        ::std::mem::size_of::<io>(),
        16usize,
        concat!("Size of: ", stringify!(io))
    );
    assert_eq!(
        ::std::mem::align_of::<io>(),
        8usize,
        concat!("Alignment of ", stringify!(io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xrv {
    pub xrv_rv: *mut SV,
}
#[test]
fn bindgen_test_layout_xrv() {
    assert_eq!(
        ::std::mem::size_of::<xrv>(),
        8usize,
        concat!("Size of: ", stringify!(xrv))
    );
    assert_eq!(
        ::std::mem::align_of::<xrv>(),
        8usize,
        concat!("Alignment of ", stringify!(xrv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xrv>())).xrv_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xrv),
            "::",
            stringify!(xrv_rv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpv {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
}
#[test]
fn bindgen_test_layout_xpv() {
    assert_eq!(
        ::std::mem::size_of::<xpv>(),
        24usize,
        concat!("Size of: ", stringify!(xpv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpv>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpv),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpv),
            "::",
            stringify!(xpv_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpviv {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_iv: IV,
}
#[test]
fn bindgen_test_layout_xpviv() {
    assert_eq!(
        ::std::mem::size_of::<xpviv>(),
        32usize,
        concat!("Size of: ", stringify!(xpviv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpviv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpviv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpviv>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpviv),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpviv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpviv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpviv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpviv),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpviv>())).xiv_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpviv),
            "::",
            stringify!(xiv_iv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvnv {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_iv: IV,
    pub xnv_nv: NV,
}
#[test]
fn bindgen_test_layout_xpvnv() {
    assert_eq!(
        ::std::mem::size_of::<xpvnv>(),
        40usize,
        concat!("Size of: ", stringify!(xpvnv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvnv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvnv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvnv>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvnv),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvnv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvnv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvnv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvnv),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvnv>())).xiv_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvnv),
            "::",
            stringify!(xiv_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvnv>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvnv),
            "::",
            stringify!(xnv_nv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvmg {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_iv: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
}
#[test]
fn bindgen_test_layout_xpvmg() {
    assert_eq!(
        ::std::mem::size_of::<xpvmg>(),
        56usize,
        concat!("Size of: ", stringify!(xpvmg))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvmg>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvmg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvmg>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvmg),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvmg>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvmg),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvmg>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvmg),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvmg>())).xiv_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvmg),
            "::",
            stringify!(xiv_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvmg>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvmg),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvmg>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvmg),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvmg>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvmg),
            "::",
            stringify!(xmg_stash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvlv {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_iv: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xlv_targoff: STRLEN,
    pub xlv_targlen: STRLEN,
    pub xlv_targ: *mut SV,
    pub xlv_type: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_xpvlv() {
    assert_eq!(
        ::std::mem::size_of::<xpvlv>(),
        88usize,
        concat!("Size of: ", stringify!(xpvlv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvlv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvlv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xiv_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xiv_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xlv_targoff as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xlv_targoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xlv_targlen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xlv_targlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xlv_targ as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xlv_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvlv>())).xlv_type as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvlv),
            "::",
            stringify!(xlv_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvgv {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_iv: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xgv_gp: *mut GP,
    pub xgv_name: *mut ::std::os::raw::c_char,
    pub xgv_namelen: STRLEN,
    pub xgv_stash: *mut HV,
    pub xgv_flags: U8,
}
#[test]
fn bindgen_test_layout_xpvgv() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv>(),
        96usize,
        concat!("Size of: ", stringify!(xpvgv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xiv_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xiv_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_gp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_name as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_namelen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_stash as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_flags as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvbm {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_iv: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xbm_useful: I32,
    pub xbm_previous: U16,
    pub xbm_rare: U8,
}
#[test]
fn bindgen_test_layout_xpvbm() {
    assert_eq!(
        ::std::mem::size_of::<xpvbm>(),
        64usize,
        concat!("Size of: ", stringify!(xpvbm))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvbm>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvbm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xiv_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xiv_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xbm_useful as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xbm_useful)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xbm_previous as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xbm_previous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvbm>())).xbm_rare as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvbm),
            "::",
            stringify!(xbm_rare)
        )
    );
}
pub type cv_flags_t = U16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvio {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_iv: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xio_ifp: *mut PerlIO,
    pub xio_ofp: *mut PerlIO,
    pub xio_dirpu: xpvio__bindgen_ty_1,
    pub xio_lines: IV,
    pub xio_page: IV,
    pub xio_page_len: IV,
    pub xio_lines_left: IV,
    pub xio_top_name: *mut ::std::os::raw::c_char,
    pub xio_top_gv: *mut GV,
    pub xio_fmt_name: *mut ::std::os::raw::c_char,
    pub xio_fmt_gv: *mut GV,
    pub xio_bottom_name: *mut ::std::os::raw::c_char,
    pub xio_bottom_gv: *mut GV,
    pub xio_subprocess: ::std::os::raw::c_short,
    pub xio_type: ::std::os::raw::c_char,
    pub xio_flags: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvio__bindgen_ty_1 { pub xiou_dirp : * mut DIR , pub xiou_any : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xiou_dirp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xiou_dirp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xiou_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xiou_any)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvio() {
    assert_eq!(
        ::std::mem::size_of::<xpvio>(),
        168usize,
        concat!("Size of: ", stringify!(xpvio))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xiv_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xiv_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_ifp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_ifp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_ofp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_ofp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_dirpu as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_dirpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_lines as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page_len as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_lines_left as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_lines_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_name as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_gv as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_name as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_gv as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_name as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_gv as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_subprocess as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_subprocess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_type as *const _ as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_flags as *const _ as usize },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_flags)
        )
    );
}
impl ::std::fmt::Debug for xpvio {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvio {{ xpv_pv: {:?}, xpv_cur: {:?}, xpv_len: {:?}, xiv_iv: {:?}, xnv_nv: {:?}, xmg_magic: {:?}, xmg_stash: {:?}, xio_ifp: {:?}, xio_ofp: {:?}, xio_dirpu: {:?}, xio_lines: {:?}, xio_page: {:?}, xio_page_len: {:?}, xio_lines_left: {:?}, xio_top_name: {:?}, xio_top_gv: {:?}, xio_fmt_name: {:?}, xio_fmt_gv: {:?}, xio_bottom_name: {:?}, xio_bottom_gv: {:?}, xio_subprocess: {:?}, xio_type: {:?}, xio_flags: {:?} }}",
            self.xpv_pv,
            self.xpv_cur,
            self.xpv_len,
            self.xiv_iv,
            self.xnv_nv,
            self.xmg_magic,
            self.xmg_stash,
            self.xio_ifp,
            self.xio_ofp,
            self.xio_dirpu,
            self.xio_lines,
            self.xio_page,
            self.xio_page_len,
            self.xio_lines_left,
            self.xio_top_name,
            self.xio_top_gv,
            self.xio_fmt_name,
            self.xio_fmt_gv,
            self.xio_bottom_name,
            self.xio_bottom_gv,
            self.xio_subprocess,
            self.xio_type,
            self.xio_flags
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clone_params {
    pub stashes: *mut AV,
    pub flags: UV,
    pub proto_perl: *mut PerlInterpreter,
}
#[test]
fn bindgen_test_layout_clone_params() {
    assert_eq!(
        ::std::mem::size_of::<clone_params>(),
        24usize,
        concat!("Size of: ", stringify!(clone_params))
    );
    assert_eq!(
        ::std::mem::align_of::<clone_params>(),
        8usize,
        concat!("Alignment of ", stringify!(clone_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).stashes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(stashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).proto_perl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(proto_perl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gp {
    pub gp_sv: *mut SV,
    pub gp_refcnt: U32,
    pub gp_io: *mut io,
    pub gp_form: *mut CV,
    pub gp_av: *mut AV,
    pub gp_hv: *mut HV,
    pub gp_egv: *mut GV,
    pub gp_cv: *mut CV,
    pub gp_cvgen: U32,
    pub gp_flags: U32,
    pub gp_line: line_t,
    pub gp_file: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_gp() {
    assert_eq!(
        ::std::mem::size_of::<gp>(),
        88usize,
        concat!("Size of: ", stringify!(gp))
    );
    assert_eq!(
        ::std::mem::align_of::<gp>(),
        8usize,
        concat!("Alignment of ", stringify!(gp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_sv as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_io as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_form as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_av as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_hv as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_egv as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_egv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cv as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cvgen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_cvgen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_flags as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_line as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_file as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_file)
        )
    );
}
pub type PADLIST = AV;
pub type PAD = AV;
pub type PADOFFSET = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvcv {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xof_off: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xcv_stash: *mut HV,
    pub xcv_start: *mut OP,
    pub xcv_root: *mut OP,
    pub xcv_xsub: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, arg1: *mut CV)>,
    pub xcv_xsubany: ANY,
    pub xcv_gv: *mut GV,
    pub xcv_file: *mut ::std::os::raw::c_char,
    pub xcv_depth: ::std::os::raw::c_long,
    pub xcv_padlist: *mut PADLIST,
    pub xcv_outside: *mut CV,
    pub xcv_flags: cv_flags_t,
    pub xcv_outside_seq: U32,
}
#[test]
fn bindgen_test_layout_xpvcv() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv>(),
        144usize,
        concat!("Size of: ", stringify!(xpvcv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xof_off as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xof_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_stash as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_start as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_root as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_xsub as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_xsub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_xsubany as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_xsubany)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_gv as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_file as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_depth as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_padlist as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_padlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_flags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside_seq as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside_seq)
        )
    );
}
impl ::std::fmt::Debug for xpvcv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvcv {{ xpv_pv: {:?}, xpv_cur: {:?}, xpv_len: {:?}, xof_off: {:?}, xnv_nv: {:?}, xmg_magic: {:?}, xmg_stash: {:?}, xcv_stash: {:?}, xcv_start: {:?}, xcv_root: {:?}, xcv_xsub: {:?}, xcv_xsubany: {:?}, xcv_gv: {:?}, xcv_file: {:?}, xcv_depth: {:?}, xcv_padlist: {:?}, xcv_outside: {:?}, xcv_flags: {:?}, xcv_outside_seq: {:?} }}",
            self.xpv_pv,
            self.xpv_cur,
            self.xpv_len,
            self.xof_off,
            self.xnv_nv,
            self.xmg_magic,
            self.xmg_stash,
            self.xcv_stash,
            self.xcv_start,
            self.xcv_root,
            self.xcv_xsub,
            self.xcv_xsubany,
            self.xcv_gv,
            self.xcv_file,
            self.xcv_depth,
            self.xcv_padlist,
            self.xcv_outside,
            self.xcv_flags,
            self.xcv_outside_seq
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct op {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub op_type: U16,
    pub op_seq: U16,
    pub op_flags: U8,
    pub op_private: U8,
}
#[test]
fn bindgen_test_layout_op() {
    assert_eq!(
        ::std::mem::size_of::<op>(),
        40usize,
        concat!("Size of: ", stringify!(op))
    );
    assert_eq!(
        ::std::mem::align_of::<op>(),
        8usize,
        concat!("Alignment of ", stringify!(op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_seq as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_private as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_private)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pmop {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub op_type: U16,
    pub op_seq: U16,
    pub op_flags: U8,
    pub op_private: U8,
    pub op_first: *mut OP,
    pub op_last: *mut OP,
    pub op_pmreplroot: *mut OP,
    pub op_pmreplstart: *mut OP,
    pub op_pmnext: *mut PMOP,
    pub op_pmoffset: IV,
    pub op_pmflags: U32,
    pub op_pmpermflags: U32,
    pub op_pmdynflags: U8,
    pub op_pmstashpv: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_pmop() {
    assert_eq!(
        ::std::mem::size_of::<pmop>(),
        112usize,
        concat!("Size of: ", stringify!(pmop))
    );
    assert_eq!(
        ::std::mem::align_of::<pmop>(),
        8usize,
        concat!("Alignment of ", stringify!(pmop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_seq as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_private as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_first as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_last as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmreplroot as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmreplroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmreplstart as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmreplstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmnext as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmoffset as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmflags as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmpermflags as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmpermflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmdynflags as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmdynflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmstashpv as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmstashpv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct passwd {
    pub pw_name: *mut ::std::os::raw::c_char,
    pub pw_passwd: *mut ::std::os::raw::c_char,
    pub pw_uid: uid_t,
    pub pw_gid: gid_t,
    pub pw_change: __darwin_time_t,
    pub pw_class: *mut ::std::os::raw::c_char,
    pub pw_gecos: *mut ::std::os::raw::c_char,
    pub pw_dir: *mut ::std::os::raw::c_char,
    pub pw_shell: *mut ::std::os::raw::c_char,
    pub pw_expire: __darwin_time_t,
}
#[test]
fn bindgen_test_layout_passwd() {
    assert_eq!(
        ::std::mem::size_of::<passwd>(),
        72usize,
        concat!("Size of: ", stringify!(passwd))
    );
    assert_eq!(
        ::std::mem::align_of::<passwd>(),
        8usize,
        concat!("Alignment of ", stringify!(passwd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_passwd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_change as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_change)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_class as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_gecos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_gecos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_dir as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_shell as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_shell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<passwd>())).pw_expire as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(passwd),
            "::",
            stringify!(pw_expire)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group {
    pub gr_name: *mut ::std::os::raw::c_char,
    pub gr_passwd: *mut ::std::os::raw::c_char,
    pub gr_gid: gid_t,
    pub gr_mem: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_group() {
    assert_eq!(
        ::std::mem::size_of::<group>(),
        32usize,
        concat!("Size of: ", stringify!(group))
    );
    assert_eq!(
        ::std::mem::align_of::<group>(),
        8usize,
        concat!("Alignment of ", stringify!(group))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group>())).gr_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group>())).gr_passwd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group>())).gr_gid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group>())).gr_mem as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(group),
            "::",
            stringify!(gr_mem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct REENTR {
    pub _asctime_buffer: *mut ::std::os::raw::c_char,
    pub _asctime_size: usize,
    pub _ctime_buffer: *mut ::std::os::raw::c_char,
    pub _ctime_size: usize,
    pub _grent_struct: group,
    pub _grent_buffer: *mut ::std::os::raw::c_char,
    pub _grent_size: usize,
    pub _grent_ptr: *mut group,
    pub _getlogin_buffer: *mut ::std::os::raw::c_char,
    pub _getlogin_size: usize,
    pub _pwent_struct: passwd,
    pub _pwent_buffer: *mut ::std::os::raw::c_char,
    pub _pwent_size: usize,
    pub _pwent_ptr: *mut passwd,
    pub _gmtime_struct: tm,
    pub _localtime_struct: tm,
    pub _readdir_struct: *mut dirent,
    pub _readdir_size: usize,
    pub _readdir_ptr: *mut dirent,
    pub _strerror_buffer: *mut ::std::os::raw::c_char,
    pub _strerror_size: usize,
    pub _ttyname_buffer: *mut ::std::os::raw::c_char,
    pub _ttyname_size: usize,
    pub dummy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_REENTR() {
    assert_eq!(
        ::std::mem::size_of::<REENTR>(),
        376usize,
        concat!("Size of: ", stringify!(REENTR))
    );
    assert_eq!(
        ::std::mem::align_of::<REENTR>(),
        8usize,
        concat!("Alignment of ", stringify!(REENTR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._asctime_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_asctime_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._asctime_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_asctime_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._ctime_buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_ctime_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._ctime_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_ctime_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._grent_struct as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_grent_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._grent_buffer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_grent_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._grent_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_grent_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._grent_ptr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_grent_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._getlogin_buffer as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_getlogin_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._getlogin_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_getlogin_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._pwent_struct as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_pwent_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._pwent_buffer as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_pwent_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._pwent_size as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_pwent_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._pwent_ptr as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_pwent_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._gmtime_struct as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_gmtime_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._localtime_struct as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_localtime_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._readdir_struct as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_readdir_struct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._readdir_size as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_readdir_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._readdir_ptr as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_readdir_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._strerror_buffer as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_strerror_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._strerror_size as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_strerror_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._ttyname_buffer as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_ttyname_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>()))._ttyname_size as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(_ttyname_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<REENTR>())).dummy as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(REENTR),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cop {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub op_type: U16,
    pub op_seq: U16,
    pub op_flags: U8,
    pub op_private: U8,
    pub cop_label: *mut ::std::os::raw::c_char,
    pub cop_stashpv: *mut ::std::os::raw::c_char,
    pub cop_file: *mut ::std::os::raw::c_char,
    pub cop_seq: U32,
    pub cop_arybase: I32,
    pub cop_line: line_t,
    pub cop_warnings: *mut SV,
    pub cop_io: *mut SV,
}
#[test]
fn bindgen_test_layout_cop() {
    assert_eq!(
        ::std::mem::size_of::<cop>(),
        96usize,
        concat!("Size of: ", stringify!(cop))
    );
    assert_eq!(
        ::std::mem::align_of::<cop>(),
        8usize,
        concat!("Alignment of ", stringify!(cop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_seq as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).op_private as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(op_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_label as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_stashpv as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_stashpv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_file as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_seq as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_arybase as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_arybase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_line as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_warnings as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_warnings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cop>())).cop_io as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cop),
            "::",
            stringify!(cop_io)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_sub {
    pub cv: *mut CV,
    pub gv: *mut GV,
    pub dfoutgv: *mut GV,
    pub savearray: *mut AV,
    pub argarray: *mut AV,
    pub olddepth: ::std::os::raw::c_long,
    pub hasargs: U8,
    pub lval: U8,
    pub oldcomppad: *mut PAD,
}
#[test]
fn bindgen_test_layout_block_sub() {
    assert_eq!(
        ::std::mem::size_of::<block_sub>(),
        64usize,
        concat!("Size of: ", stringify!(block_sub))
    );
    assert_eq!(
        ::std::mem::align_of::<block_sub>(),
        8usize,
        concat!("Alignment of ", stringify!(block_sub))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).cv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(cv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).gv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).dfoutgv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(dfoutgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).savearray as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(savearray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).argarray as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(argarray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).olddepth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(olddepth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).hasargs as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(hasargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).lval as *const _ as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(lval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_sub>())).oldcomppad as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(block_sub),
            "::",
            stringify!(oldcomppad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_eval {
    pub old_in_eval: I32,
    pub old_op_type: I32,
    pub old_namesv: *mut SV,
    pub old_eval_root: *mut OP,
    pub cur_text: *mut SV,
    pub cv: *mut CV,
}
#[test]
fn bindgen_test_layout_block_eval() {
    assert_eq!(
        ::std::mem::size_of::<block_eval>(),
        40usize,
        concat!("Size of: ", stringify!(block_eval))
    );
    assert_eq!(
        ::std::mem::align_of::<block_eval>(),
        8usize,
        concat!("Alignment of ", stringify!(block_eval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).old_in_eval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(old_in_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).old_op_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(old_op_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).old_namesv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(old_namesv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).old_eval_root as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(old_eval_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).cur_text as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(cur_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_eval>())).cv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block_eval),
            "::",
            stringify!(cv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct block_loop {
    pub label: *mut ::std::os::raw::c_char,
    pub resetsp: I32,
    pub redo_op: *mut OP,
    pub next_op: *mut OP,
    pub last_op: *mut OP,
    pub iterdata: *mut ::std::os::raw::c_void,
    pub oldcomppad: *mut PAD,
    pub itersave: *mut SV,
    pub iterlval: *mut SV,
    pub iterary: *mut AV,
    pub iterix: IV,
    pub itermax: IV,
}
#[test]
fn bindgen_test_layout_block_loop() {
    assert_eq!(
        ::std::mem::size_of::<block_loop>(),
        96usize,
        concat!("Size of: ", stringify!(block_loop))
    );
    assert_eq!(
        ::std::mem::align_of::<block_loop>(),
        8usize,
        concat!("Alignment of ", stringify!(block_loop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).label as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).resetsp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(resetsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).redo_op as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(redo_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).next_op as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(next_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).last_op as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(last_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).iterdata as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(iterdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).oldcomppad as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(oldcomppad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).itersave as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(itersave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).iterlval as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(iterlval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).iterary as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(iterary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).iterix as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(iterix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block_loop>())).itermax as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(block_loop),
            "::",
            stringify!(itermax)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct block {
    pub blku_oldsp: I32,
    pub blku_oldcop: *mut COP,
    pub blku_oldretsp: I32,
    pub blku_oldmarksp: I32,
    pub blku_oldscopesp: I32,
    pub blku_oldpm: *mut PMOP,
    pub blku_gimme: U8,
    pub blk_u: block__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]; 12usize ] , }#[test]
fn bindgen_test_layout_block__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<block__bindgen_ty_1>(),
        96usize,
        concat!("Size of: ", stringify!(block__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<block__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(block__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block__bindgen_ty_1>())).blku_sub as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block__bindgen_ty_1),
            "::",
            stringify!(blku_sub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block__bindgen_ty_1>())).blku_eval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block__bindgen_ty_1),
            "::",
            stringify!(blku_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block__bindgen_ty_1>())).blku_loop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block__bindgen_ty_1),
            "::",
            stringify!(blku_loop)
        )
    );
}
impl ::std::fmt::Debug for block__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "block__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_block() {
    assert_eq!(
        ::std::mem::size_of::<block>(),
        144usize,
        concat!("Size of: ", stringify!(block))
    );
    assert_eq!(
        ::std::mem::align_of::<block>(),
        8usize,
        concat!("Alignment of ", stringify!(block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldsp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldcop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldcop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldretsp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldretsp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldmarksp as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldmarksp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldscopesp as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldscopesp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_oldpm as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_oldpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blku_gimme as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blku_gimme)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<block>())).blk_u as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(block),
            "::",
            stringify!(blk_u)
        )
    );
}
impl ::std::fmt::Debug for block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "block {{ blku_oldsp: {:?}, blku_oldcop: {:?}, blku_oldretsp: {:?}, blku_oldmarksp: {:?}, blku_oldscopesp: {:?}, blku_oldpm: {:?}, blku_gimme: {:?}, blk_u: {:?} }}",
            self.blku_oldsp,
            self.blku_oldcop,
            self.blku_oldretsp,
            self.blku_oldmarksp,
            self.blku_oldscopesp,
            self.blku_oldpm,
            self.blku_gimme,
            self.blk_u
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct subst {
    pub sbu_iters: I32,
    pub sbu_maxiters: I32,
    pub sbu_rflags: I32,
    pub sbu_oldsave: I32,
    pub sbu_once: ::std::os::raw::c_char,
    pub sbu_rxtainted: ::std::os::raw::c_char,
    pub sbu_orig: *mut ::std::os::raw::c_char,
    pub sbu_dstr: *mut SV,
    pub sbu_targ: *mut SV,
    pub sbu_s: *mut ::std::os::raw::c_char,
    pub sbu_m: *mut ::std::os::raw::c_char,
    pub sbu_strend: *mut ::std::os::raw::c_char,
    pub sbu_rxres: *mut ::std::os::raw::c_void,
    pub sbu_rx: *mut REGEXP,
}
#[test]
fn bindgen_test_layout_subst() {
    assert_eq!(
        ::std::mem::size_of::<subst>(),
        88usize,
        concat!("Size of: ", stringify!(subst))
    );
    assert_eq!(
        ::std::mem::align_of::<subst>(),
        8usize,
        concat!("Alignment of ", stringify!(subst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_iters as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_iters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_maxiters as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_maxiters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_rflags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_rflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_oldsave as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_oldsave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_once as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_once)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_rxtainted as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_rxtainted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_orig as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_orig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_dstr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_dstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_targ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_s as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_m as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_strend as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_strend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_rxres as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_rxres)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<subst>())).sbu_rx as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(subst),
            "::",
            stringify!(sbu_rx)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct context {
    pub cx_type: U32,
    pub cx_u: context__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]; 18usize ] , }#[test]
fn bindgen_test_layout_context__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<context__bindgen_ty_1>(),
        144usize,
        concat!("Size of: ", stringify!(context__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<context__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(context__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context__bindgen_ty_1>())).cx_blk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context__bindgen_ty_1),
            "::",
            stringify!(cx_blk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context__bindgen_ty_1>())).cx_subst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context__bindgen_ty_1),
            "::",
            stringify!(cx_subst)
        )
    );
}
impl ::std::fmt::Debug for context__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "context__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_context() {
    assert_eq!(
        ::std::mem::size_of::<context>(),
        152usize,
        concat!("Size of: ", stringify!(context))
    );
    assert_eq!(
        ::std::mem::align_of::<context>(),
        8usize,
        concat!("Alignment of ", stringify!(context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context>())).cx_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context),
            "::",
            stringify!(cx_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context>())).cx_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(context),
            "::",
            stringify!(cx_u)
        )
    );
}
impl ::std::fmt::Debug for context {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "context {{ cx_type: {:?}, cx_u: {:?} }}",
            self.cx_type,
            self.cx_u
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stackinfo {
    pub si_stack: *mut AV,
    pub si_cxstack: *mut PERL_CONTEXT,
    pub si_cxix: I32,
    pub si_cxmax: I32,
    pub si_type: I32,
    pub si_prev: *mut stackinfo,
    pub si_next: *mut stackinfo,
    pub si_markoff: I32,
}
#[test]
fn bindgen_test_layout_stackinfo() {
    assert_eq!(
        ::std::mem::size_of::<stackinfo>(),
        56usize,
        concat!("Size of: ", stringify!(stackinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<stackinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(stackinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_stack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_cxstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_cxstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_cxix as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_cxix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_cxmax as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_cxmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_prev as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stackinfo>())).si_markoff as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stackinfo),
            "::",
            stringify!(si_markoff)
        )
    );
}
pub type PERL_SI = stackinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvav {
    pub xav_array: *mut ::std::os::raw::c_char,
    pub xav_fill: isize,
    pub xav_max: isize,
    pub xof_off: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xav_alloc: *mut *mut SV,
    pub xav_arylen: *mut SV,
    pub xav_flags: U8,
}
#[test]
fn bindgen_test_layout_xpvav() {
    assert_eq!(
        ::std::mem::size_of::<xpvav>(),
        80usize,
        concat!("Size of: ", stringify!(xpvav))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvav))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_fill as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xof_off as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xof_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_alloc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_arylen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_arylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_flags)
        )
    );
}
pub type HE = he;
pub type HEK = hek;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct he {
    pub hent_next: *mut HE,
    pub hent_hek: *mut HEK,
    pub hent_val: *mut SV,
}
#[test]
fn bindgen_test_layout_he() {
    assert_eq!(
        ::std::mem::size_of::<he>(),
        24usize,
        concat!("Size of: ", stringify!(he))
    );
    assert_eq!(
        ::std::mem::align_of::<he>(),
        8usize,
        concat!("Alignment of ", stringify!(he))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_hek as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_hek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hek {
    pub hek_hash: U32,
    pub hek_len: I32,
    pub hek_key: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_hek() {
    assert_eq!(
        ::std::mem::size_of::<hek>(),
        12usize,
        concat!("Size of: ", stringify!(hek))
    );
    assert_eq!(
        ::std::mem::align_of::<hek>(),
        4usize,
        concat!("Alignment of ", stringify!(hek))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvhv {
    pub xhv_array: *mut ::std::os::raw::c_char,
    pub xhv_fill: STRLEN,
    pub xhv_max: STRLEN,
    pub xhv_keys: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xhv_riter: I32,
    pub xhv_eiter: *mut HE,
    pub xhv_pmroot: *mut PMOP,
    pub xhv_name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_xpvhv() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv>(),
        88usize,
        concat!("Size of: ", stringify!(xpvhv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvhv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_fill as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_keys as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_riter as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_riter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_eiter as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_eiter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_pmroot as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_pmroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_name as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mgvtbl {
    pub svt_get: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_set: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_len: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> U32>,
    pub svt_clear: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_free: ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_copy: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             sv: *mut SV,
                             mg: *mut MAGIC,
                             nsv: *mut SV,
                             name: *const ::std::os::raw::c_char,
                             namlen: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub svt_dup: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             mg: *mut MAGIC,
                             param: *mut CLONE_PARAMS) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_mgvtbl() {
    assert_eq!(
        ::std::mem::size_of::<mgvtbl>(),
        56usize,
        concat!("Size of: ", stringify!(mgvtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<mgvtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(mgvtbl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_get as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_set as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_clear as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_copy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_dup as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_dup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct magic {
    pub mg_moremagic: *mut MAGIC,
    pub mg_virtual: *mut MGVTBL,
    pub mg_private: U16,
    pub mg_type: ::std::os::raw::c_char,
    pub mg_flags: U8,
    pub mg_obj: *mut SV,
    pub mg_ptr: *mut ::std::os::raw::c_char,
    pub mg_len: I32,
}
#[test]
fn bindgen_test_layout_magic() {
    assert_eq!(
        ::std::mem::size_of::<magic>(),
        48usize,
        concat!("Size of: ", stringify!(magic))
    );
    assert_eq!(
        ::std::mem::align_of::<magic>(),
        8usize,
        concat!("Alignment of ", stringify!(magic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_moremagic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_moremagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_virtual as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_virtual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_private as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_type as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_flags as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_obj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_ptr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct jmpenv {
    pub je_prev: *mut jmpenv,
    pub je_buf: sigjmp_buf,
    pub je_ret: ::std::os::raw::c_int,
    pub je_mustcatch: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_jmpenv() {
    assert_eq!(
        ::std::mem::size_of::<jmpenv>(),
        168usize,
        concat!("Size of: ", stringify!(jmpenv))
    );
    assert_eq!(
        ::std::mem::align_of::<jmpenv>(),
        8usize,
        concat!("Alignment of ", stringify!(jmpenv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jmpenv>())).je_prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jmpenv),
            "::",
            stringify!(je_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jmpenv>())).je_buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jmpenv),
            "::",
            stringify!(je_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jmpenv>())).je_ret as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jmpenv),
            "::",
            stringify!(je_ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jmpenv>())).je_mustcatch as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(jmpenv),
            "::",
            stringify!(je_mustcatch)
        )
    );
}
impl ::std::fmt::Debug for jmpenv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "jmpenv {{ je_prev: {:?}, je_buf: [{}], je_ret: {:?}, je_mustcatch: {:?} }}",
            self.je_prev,
            self.je_buf
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>(),
            self.je_ret,
            self.je_mustcatch
        )
    }
}
pub type JMPENV = jmpenv;
pub type CURCUR = curcur;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curcur {
    pub parenfloor: ::std::os::raw::c_int,
    pub cur: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub max: ::std::os::raw::c_int,
    pub minmod: ::std::os::raw::c_int,
    pub scan: *mut regnode,
    pub next: *mut regnode,
    pub lastloc: *mut ::std::os::raw::c_char,
    pub oldcc: *mut CURCUR,
}
#[test]
fn bindgen_test_layout_curcur() {
    assert_eq!(
        ::std::mem::size_of::<curcur>(),
        56usize,
        concat!("Size of: ", stringify!(curcur))
    );
    assert_eq!(
        ::std::mem::align_of::<curcur>(),
        8usize,
        concat!("Alignment of ", stringify!(curcur))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curcur>())).parenfloor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(curcur),
            "::",
            stringify!(parenfloor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curcur>())).cur as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(curcur),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curcur>())).min as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(curcur),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curcur>())).max as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(curcur),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curcur>())).minmod as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(curcur),
            "::",
            stringify!(minmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curcur>())).scan as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(curcur),
            "::",
            stringify!(scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curcur>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(curcur),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curcur>())).lastloc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(curcur),
            "::",
            stringify!(lastloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<curcur>())).oldcc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(curcur),
            "::",
            stringify!(oldcc)
        )
    );
}
pub type SUBLEXINFO = _sublex_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sublex_info {
    pub super_state: I32,
    pub sub_inwhat: I32,
    pub sub_op: *mut OP,
    pub super_bufptr: *mut ::std::os::raw::c_char,
    pub super_bufend: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__sublex_info() {
    assert_eq!(
        ::std::mem::size_of::<_sublex_info>(),
        32usize,
        concat!("Size of: ", stringify!(_sublex_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_sublex_info>(),
        8usize,
        concat!("Alignment of ", stringify!(_sublex_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sublex_info>())).super_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sublex_info),
            "::",
            stringify!(super_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sublex_info>())).sub_inwhat as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_sublex_info),
            "::",
            stringify!(sub_inwhat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sublex_info>())).sub_op as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_sublex_info),
            "::",
            stringify!(sub_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sublex_info>())).super_bufptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sublex_info),
            "::",
            stringify!(super_bufptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_sublex_info>())).super_bufend as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_sublex_info),
            "::",
            stringify!(super_bufend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptr_tbl_ent {
    pub next: *mut ptr_tbl_ent,
    pub oldval: *const ::std::os::raw::c_void,
    pub newval: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ptr_tbl_ent() {
    assert_eq!(
        ::std::mem::size_of::<ptr_tbl_ent>(),
        24usize,
        concat!("Size of: ", stringify!(ptr_tbl_ent))
    );
    assert_eq!(
        ::std::mem::align_of::<ptr_tbl_ent>(),
        8usize,
        concat!("Alignment of ", stringify!(ptr_tbl_ent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl_ent>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl_ent),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl_ent>())).oldval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl_ent),
            "::",
            stringify!(oldval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl_ent>())).newval as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl_ent),
            "::",
            stringify!(newval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ptr_tbl {
    pub tbl_ary: *mut *mut ptr_tbl_ent,
    pub tbl_max: UV,
    pub tbl_items: UV,
}
#[test]
fn bindgen_test_layout_ptr_tbl() {
    assert_eq!(
        ::std::mem::size_of::<ptr_tbl>(),
        24usize,
        concat!("Size of: ", stringify!(ptr_tbl))
    );
    assert_eq!(
        ::std::mem::align_of::<ptr_tbl>(),
        8usize,
        concat!("Alignment of ", stringify!(ptr_tbl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl>())).tbl_ary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl),
            "::",
            stringify!(tbl_ary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl>())).tbl_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl),
            "::",
            stringify!(tbl_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ptr_tbl>())).tbl_items as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ptr_tbl),
            "::",
            stringify!(tbl_items)
        )
    );
}
pub type runops_proc_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> ::std::os::raw::c_int>;
pub type share_proc_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, sv: *mut SV)>;
pub type thrhook_proc_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Copy, Clone)]pub union YYSTYPE { pub ival : I32 , pub pval : * mut :: std :: os :: raw :: c_char , pub opval : * mut OP , pub gvval : * mut GV , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_YYSTYPE() {
    assert_eq!(
        ::std::mem::size_of::<YYSTYPE>(),
        8usize,
        concat!("Size of: ", stringify!(YYSTYPE))
    );
    assert_eq!(
        ::std::mem::align_of::<YYSTYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(YYSTYPE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YYSTYPE>())).ival as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYSTYPE),
            "::",
            stringify!(ival)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YYSTYPE>())).pval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYSTYPE),
            "::",
            stringify!(pval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YYSTYPE>())).opval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYSTYPE),
            "::",
            stringify!(opval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<YYSTYPE>())).gvval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(YYSTYPE),
            "::",
            stringify!(gvval)
        )
    );
}
impl ::std::fmt::Debug for YYSTYPE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "YYSTYPE {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct perl_debug_pad {
    pub pad: [SV; 3usize],
}
#[test]
fn bindgen_test_layout_perl_debug_pad() {
    assert_eq!(
        ::std::mem::size_of::<perl_debug_pad>(),
        48usize,
        concat!("Size of: ", stringify!(perl_debug_pad))
    );
    assert_eq!(
        ::std::mem::align_of::<perl_debug_pad>(),
        8usize,
        concat!("Alignment of ", stringify!(perl_debug_pad))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<perl_debug_pad>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(perl_debug_pad),
            "::",
            stringify!(pad)
        )
    );
}
pub type peep_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, o: *mut OP)>;
pub type regcomp_t = ::std::option::Option<
    unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                         exp: *mut ::std::os::raw::c_char,
                         xend: *mut ::std::os::raw::c_char,
                         pm: *mut PMOP) -> *mut regexp,
>;
pub type regexec_t = ::std::option::Option<
    unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                         prog: *mut regexp,
                         stringarg: *mut ::std::os::raw::c_char,
                         strend: *mut ::std::os::raw::c_char,
                         strbeg: *mut ::std::os::raw::c_char,
                         minend: I32,
                         screamer: *mut SV,
                         data: *mut ::std::os::raw::c_void,
                         flags: U32) -> I32,
>;
pub type re_intuit_start_t = ::std::option::Option<
    unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                         prog: *mut regexp,
                         sv: *mut SV,
                         strpos: *mut ::std::os::raw::c_char,
                         strend: *mut ::std::os::raw::c_char,
                         flags: U32,
                         d: *mut re_scream_pos_data_s) -> *mut ::std::os::raw::c_char,
>;
pub type re_intuit_string_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, prog: *mut regexp) -> *mut SV>;
pub type regfree_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, r: *mut regexp)>;
pub type SVCOMPARE_t = ::std::option::Option<unsafe extern "C" fn(my_perl: *mut PerlInterpreter, arg1: *mut SV, arg2: *mut SV) -> I32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exitlistentry {
    pub fn_: ::std::option::Option<
        unsafe extern "C" fn(my_perl: *mut PerlInterpreter,
                             arg1: *mut ::std::os::raw::c_void),
    >,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_exitlistentry() {
    assert_eq!(
        ::std::mem::size_of::<exitlistentry>(),
        16usize,
        concat!("Size of: ", stringify!(exitlistentry))
    );
    assert_eq!(
        ::std::mem::align_of::<exitlistentry>(),
        8usize,
        concat!("Alignment of ", stringify!(exitlistentry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exitlistentry>())).fn_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exitlistentry),
            "::",
            stringify!(fn_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exitlistentry>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exitlistentry),
            "::",
            stringify!(ptr)
        )
    );
}
pub type PerlExitListEntry = exitlistentry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct interpreter {
    pub Tstack_sp: *mut *mut SV,
    pub Top: *mut OP,
    pub Tcurpad: *mut *mut SV,
    pub Tstack_base: *mut *mut SV,
    pub Tstack_max: *mut *mut SV,
    pub Tscopestack: *mut I32,
    pub Tscopestack_ix: I32,
    pub Tscopestack_max: I32,
    pub Tsavestack: *mut ANY,
    pub Tsavestack_ix: I32,
    pub Tsavestack_max: I32,
    pub Ttmps_stack: *mut *mut SV,
    pub Ttmps_ix: I32,
    pub Ttmps_floor: I32,
    pub Ttmps_max: I32,
    pub Tmarkstack: *mut I32,
    pub Tmarkstack_ptr: *mut I32,
    pub Tmarkstack_max: *mut I32,
    pub Tretstack: *mut *mut OP,
    pub Tretstack_ix: I32,
    pub Tretstack_max: I32,
    pub TSv: *mut SV,
    pub TXpv: *mut XPV,
    pub Tna: STRLEN,
    pub Tstatbuf: stat,
    pub Tstatcache: stat,
    pub Tstatgv: *mut GV,
    pub Tstatname: *mut SV,
    pub Ttimesbuf: tms,
    pub Ttainted: ::std::os::raw::c_char,
    pub Tcurpm: *mut PMOP,
    pub Tnrs: *mut SV,
    pub Trs: *mut SV,
    pub Tlast_in_gv: *mut GV,
    pub Tofs_sv: *mut SV,
    pub Tdefoutgv: *mut GV,
    pub Tchopset: *const ::std::os::raw::c_char,
    pub Tformtarget: *mut SV,
    pub Tbodytarget: *mut SV,
    pub Ttoptarget: *mut SV,
    pub Tdefstash: *mut HV,
    pub Tcurstash: *mut HV,
    pub Trestartop: *mut OP,
    pub Tcurcop: *mut COP,
    pub Tin_eval: ::std::os::raw::c_int,
    pub Tdelaymagic: ::std::os::raw::c_int,
    pub Tdirty: ::std::os::raw::c_char,
    pub Tlocalizing: ::std::os::raw::c_int,
    pub Tcurstack: *mut AV,
    pub Tcurstackinfo: *mut PERL_SI,
    pub Tmainstack: *mut AV,
    pub Ttop_env: *mut JMPENV,
    pub Tstart_env: JMPENV,
    pub Terrors: *mut SV,
    pub Tav_fetch_sv: *mut SV,
    pub Thv_fetch_sv: *mut SV,
    pub Thv_fetch_ent_mh: *mut HE,
    pub Tmodcount: I32,
    pub Tlastgotoprobe: *mut OP,
    pub Tdumpindent: I32,
    pub Tsortcop: *mut OP,
    pub Tsortstash: *mut HV,
    pub Tfirstgv: *mut GV,
    pub Tsecondgv: *mut GV,
    pub Tsortcxix: I32,
    pub Tefloatbuf: *mut ::std::os::raw::c_char,
    pub Tefloatsize: STRLEN,
    pub Tscreamfirst: *mut I32,
    pub Tscreamnext: *mut I32,
    pub Tmaxscream: I32,
    pub Tlastscream: *mut SV,
    pub Tregdummy: regnode,
    pub Tregcomp_parse: *mut ::std::os::raw::c_char,
    pub Tregxend: *mut ::std::os::raw::c_char,
    pub Tregcode: *mut regnode,
    pub Tregnaughty: I32,
    pub Tregsawback: I32,
    pub Tregprecomp: *mut ::std::os::raw::c_char,
    pub Tregnpar: I32,
    pub Tregsize: I32,
    pub Tregflags: U32,
    pub Tregseen: U32,
    pub Tseen_zerolen: I32,
    pub Tseen_evals: I32,
    pub Tregcomp_rx: *mut regexp,
    pub Textralen: I32,
    pub Tcolorset: ::std::os::raw::c_int,
    pub Tcolors: [*mut ::std::os::raw::c_char; 6usize],
    pub Treg_whilem_seen: I32,
    pub Treginput: *mut ::std::os::raw::c_char,
    pub Tregbol: *mut ::std::os::raw::c_char,
    pub Tregeol: *mut ::std::os::raw::c_char,
    pub Tregstartp: *mut I32,
    pub Tregendp: *mut I32,
    pub Treglastparen: *mut U32,
    pub Treglastcloseparen: *mut U32,
    pub Tregtill: *mut ::std::os::raw::c_char,
    pub Tregcompat1: ::std::os::raw::c_char,
    pub Treg_start_tmp: *mut *mut ::std::os::raw::c_char,
    pub Treg_start_tmpl: U32,
    pub Tregdata: *mut reg_data,
    pub Tbostr: *mut ::std::os::raw::c_char,
    pub Treg_flags: U32,
    pub Treg_eval_set: I32,
    pub Tregnarrate: I32,
    pub Tregprogram: *mut regnode,
    pub Tregindent: ::std::os::raw::c_int,
    pub Tregcc: *mut CURCUR,
    pub Treg_call_cc: *mut re_cc_state,
    pub Treg_re: *mut regexp,
    pub Treg_ganch: *mut ::std::os::raw::c_char,
    pub Treg_sv: *mut SV,
    pub Treg_magic: *mut MAGIC,
    pub Treg_oldpos: I32,
    pub Treg_oldcurpm: *mut PMOP,
    pub Treg_curpm: *mut PMOP,
    pub Treg_oldsaved: *mut ::std::os::raw::c_char,
    pub Treg_oldsavedlen: STRLEN,
    pub Treg_maxiter: I32,
    pub Treg_leftiter: I32,
    pub Treg_poscache: *mut ::std::os::raw::c_char,
    pub Treg_poscache_size: STRLEN,
    pub Tpeepp: peep_t,
    pub Tregcompp: regcomp_t,
    pub Tregexecp: regexec_t,
    pub Tregint_start: re_intuit_start_t,
    pub Tregint_string: re_intuit_string_t,
    pub Tregfree: regfree_t,
    pub Treginterp_cnt: ::std::os::raw::c_int,
    pub Treg_starttry: *mut ::std::os::raw::c_char,
    pub Twatchaddr: *mut *mut ::std::os::raw::c_char,
    pub Twatchok: *mut ::std::os::raw::c_char,
    pub Treg_match_utf8: ::std::os::raw::c_char,
    pub Tcomppad: *mut AV,
    pub Iorigargc: ::std::os::raw::c_int,
    pub Iorigargv: *mut *mut ::std::os::raw::c_char,
    pub Ienvgv: *mut GV,
    pub Iincgv: *mut GV,
    pub Ihintgv: *mut GV,
    pub Iorigfilename: *mut ::std::os::raw::c_char,
    pub Idiehook: *mut SV,
    pub Iwarnhook: *mut SV,
    pub Iminus_c: ::std::os::raw::c_char,
    pub Ipatchlevel: *mut SV,
    pub Ilocalpatches: *mut *mut ::std::os::raw::c_char,
    pub Isplitstr: *const ::std::os::raw::c_char,
    pub Ipreprocess: ::std::os::raw::c_char,
    pub Iminus_n: ::std::os::raw::c_char,
    pub Iminus_p: ::std::os::raw::c_char,
    pub Iminus_l: ::std::os::raw::c_char,
    pub Iminus_a: ::std::os::raw::c_char,
    pub Iminus_F: ::std::os::raw::c_char,
    pub Idoswitches: ::std::os::raw::c_char,
    pub Idowarn: U8,
    pub Iwidesyscalls: ::std::os::raw::c_char,
    pub Idoextract: ::std::os::raw::c_char,
    pub Isawampersand: ::std::os::raw::c_char,
    pub Iunsafe: ::std::os::raw::c_char,
    pub Iinplace: *mut ::std::os::raw::c_char,
    pub Ie_script: *mut SV,
    pub Iperldb: U32,
    pub Iperl_destruct_level: ::std::os::raw::c_int,
    pub Ibasetime: time_t,
    pub Iformfeed: *mut SV,
    pub Imaxsysfd: I32,
    pub Imultiline: ::std::os::raw::c_int,
    pub Istatusvalue: I32,
    pub Iexit_flags: U8,
    pub Istdingv: *mut GV,
    pub Istderrgv: *mut GV,
    pub Idefgv: *mut GV,
    pub Iargvgv: *mut GV,
    pub Iargvoutgv: *mut GV,
    pub Iargvout_stack: *mut AV,
    pub Ireplgv: *mut GV,
    pub Ierrgv: *mut GV,
    pub IDBgv: *mut GV,
    pub IDBline: *mut GV,
    pub IDBsub: *mut GV,
    pub IDBsingle: *mut SV,
    pub IDBtrace: *mut SV,
    pub IDBsignal: *mut SV,
    pub Ilineary: *mut AV,
    pub Idbargs: *mut AV,
    pub Idebstash: *mut HV,
    pub Iglobalstash: *mut HV,
    pub Icurstname: *mut SV,
    pub Ibeginav: *mut AV,
    pub Iendav: *mut AV,
    pub Icheckav: *mut AV,
    pub Iinitav: *mut AV,
    pub Istrtab: *mut HV,
    pub Isub_generation: U32,
    pub Isv_count: I32,
    pub Isv_objcount: I32,
    pub Isv_root: *mut SV,
    pub Isv_arenaroot: *mut SV,
    pub Iforkprocess: ::std::os::raw::c_int,
    pub Ifdpid: *mut AV,
    pub Itainting: ::std::os::raw::c_char,
    pub Iop_mask: *mut ::std::os::raw::c_char,
    pub Imain_cv: *mut CV,
    pub Imain_root: *mut OP,
    pub Imain_start: *mut OP,
    pub Ieval_root: *mut OP,
    pub Ieval_start: *mut OP,
    pub Icurcopdb: *mut COP,
    pub Icopline: line_t,
    pub Ifilemode: ::std::os::raw::c_int,
    pub Ilastfd: ::std::os::raw::c_int,
    pub Ioldname: *mut ::std::os::raw::c_char,
    pub IArgv: *mut *mut ::std::os::raw::c_char,
    pub ICmd: *mut ::std::os::raw::c_char,
    pub Igensym: I32,
    pub Ipreambled: ::std::os::raw::c_char,
    pub Ipreambleav: *mut AV,
    pub Ilaststatval: ::std::os::raw::c_int,
    pub Ilaststype: I32,
    pub Imess_sv: *mut SV,
    pub Iors_sv: *mut SV,
    pub Iofmt: *mut ::std::os::raw::c_char,
    pub Iexitlist: *mut PerlExitListEntry,
    pub Iexitlistlen: I32,
    pub Imodglobal: *mut HV,
    pub Iprofiledata: *mut U32,
    pub Irsfp: *mut PerlIO,
    pub Irsfp_filters: *mut AV,
    pub Icompiling: COP,
    pub Icompcv: *mut CV,
    pub IBINCOMPAT0: *mut AV,
    pub Icomppad_name: *mut AV,
    pub Icomppad_name_fill: I32,
    pub Icomppad_name_floor: I32,
    pub Igeneration: ::std::os::raw::c_int,
    pub IDBcv: *mut CV,
    pub Iin_clean_objs: ::std::os::raw::c_char,
    pub Iin_clean_all: ::std::os::raw::c_char,
    pub Ilinestart: *mut ::std::os::raw::c_char,
    pub Ipending_ident: ::std::os::raw::c_char,
    pub Isublex_info: SUBLEXINFO,
    pub Iuid: uid_t,
    pub Ieuid: uid_t,
    pub Igid: gid_t,
    pub Iegid: gid_t,
    pub Inomemok: ::std::os::raw::c_char,
    pub Ian: U32,
    pub Icop_seqmax: U32,
    pub Iop_seqmax: U16,
    pub Ievalseq: U32,
    pub Iorigenviron: *mut *mut ::std::os::raw::c_char,
    pub Iorigalen: U32,
    pub Ipidstatus: *mut HV,
    pub Imaxo: ::std::os::raw::c_int,
    pub Iosname: *mut ::std::os::raw::c_char,
    pub Ish_path_compat: *const ::std::os::raw::c_char,
    pub Isighandlerp: Sighandler_t,
    pub Ixiv_arenaroot: *mut XPV,
    pub Ixiv_root: *mut IV,
    pub Ixnv_root: *mut NV,
    pub Ixrv_root: *mut XRV,
    pub Ixpv_root: *mut XPV,
    pub Ixpviv_root: *mut XPVIV,
    pub Ixpvnv_root: *mut XPVNV,
    pub Ixpvcv_root: *mut XPVCV,
    pub Ixpvav_root: *mut XPVAV,
    pub Ixpvhv_root: *mut XPVHV,
    pub Ixpvmg_root: *mut XPVMG,
    pub Ixpvlv_root: *mut XPVLV,
    pub Ixpvbm_root: *mut XPVBM,
    pub Ihe_root: *mut HE,
    pub Inice_chunk: *mut ::std::os::raw::c_char,
    pub Inice_chunk_size: U32,
    pub Irunops: runops_proc_t,
    pub Itokenbuf: [::std::os::raw::c_char; 256usize],
    pub Isv_undef: SV,
    pub Isv_no: SV,
    pub Isv_yes: SV,
    pub Icshname: *const ::std::os::raw::c_char,
    pub Icshlen: I32,
    pub Ilex_state: U32,
    pub Ilex_defer: U32,
    pub Ilex_expect: ::std::os::raw::c_int,
    pub Ilex_brackets: I32,
    pub Ilex_formbrack: I32,
    pub Ilex_casemods: I32,
    pub Ilex_dojoin: I32,
    pub Ilex_starts: I32,
    pub Ilex_stuff: *mut SV,
    pub Ilex_repl: *mut SV,
    pub Ilex_op: *mut OP,
    pub Ilex_inpat: *mut OP,
    pub Ilex_inwhat: I32,
    pub Ilex_brackstack: *mut ::std::os::raw::c_char,
    pub Ilex_casestack: *mut ::std::os::raw::c_char,
    pub Inextval: [YYSTYPE; 5usize],
    pub Inexttype: [I32; 5usize],
    pub Inexttoke: I32,
    pub Ilinestr: *mut SV,
    pub Ibufptr: *mut ::std::os::raw::c_char,
    pub Ioldbufptr: *mut ::std::os::raw::c_char,
    pub Ioldoldbufptr: *mut ::std::os::raw::c_char,
    pub Ibufend: *mut ::std::os::raw::c_char,
    pub Iexpect: ::std::os::raw::c_int,
    pub Imulti_start: I32,
    pub Imulti_end: I32,
    pub Imulti_open: I32,
    pub Imulti_close: I32,
    pub Ierror_count: I32,
    pub Isubline: I32,
    pub Isubname: *mut SV,
    pub Imin_intro_pending: I32,
    pub Imax_intro_pending: I32,
    pub Ipadix: I32,
    pub Ipadix_floor: I32,
    pub Ipad_reset_pending: I32,
    pub Ilast_uni: *mut ::std::os::raw::c_char,
    pub Ilast_lop: *mut ::std::os::raw::c_char,
    pub Ilast_lop_op: U16,
    pub Iin_my: I32,
    pub Iin_my_stash: *mut HV,
    pub Ihints: U32,
    pub Idebug: U32,
    pub Iamagic_generation: ::std::os::raw::c_long,
    pub Icollation_ix: U32,
    pub Icollation_name: *mut ::std::os::raw::c_char,
    pub Icollation_standard: ::std::os::raw::c_char,
    pub Icollxfrm_base: usize,
    pub Icollxfrm_mult: usize,
    pub Inumeric_name: *mut ::std::os::raw::c_char,
    pub Inumeric_standard: ::std::os::raw::c_char,
    pub Inumeric_local: ::std::os::raw::c_char,
    pub Inumeric_compat1: ::std::os::raw::c_char,
    pub Iutf8_alnum: *mut SV,
    pub Iutf8_alnumc: *mut SV,
    pub Iutf8_ascii: *mut SV,
    pub Iutf8_alpha: *mut SV,
    pub Iutf8_space: *mut SV,
    pub Iutf8_cntrl: *mut SV,
    pub Iutf8_graph: *mut SV,
    pub Iutf8_digit: *mut SV,
    pub Iutf8_upper: *mut SV,
    pub Iutf8_lower: *mut SV,
    pub Iutf8_print: *mut SV,
    pub Iutf8_punct: *mut SV,
    pub Iutf8_xdigit: *mut SV,
    pub Iutf8_mark: *mut SV,
    pub Iutf8_toupper: *mut SV,
    pub Iutf8_totitle: *mut SV,
    pub Iutf8_tolower: *mut SV,
    pub Iutf8_tofold: *mut SV,
    pub Ilast_swash_hv: *mut HV,
    pub Ilast_swash_klen: U32,
    pub Ilast_swash_key: [U8; 10usize],
    pub Ilast_swash_tmps: *mut U8,
    pub Ilast_swash_slen: STRLEN,
    pub Iyydebug: ::std::os::raw::c_int,
    pub Iyynerrs: ::std::os::raw::c_int,
    pub Iyyerrflag: ::std::os::raw::c_int,
    pub Iyychar: ::std::os::raw::c_int,
    pub Iyyval: YYSTYPE,
    pub Iyylval: YYSTYPE,
    pub Iglob_index: ::std::os::raw::c_int,
    pub Isrand_called: ::std::os::raw::c_char,
    pub Iuudmap: [::std::os::raw::c_char; 256usize],
    pub Ibitcount: *mut ::std::os::raw::c_char,
    pub Ipsig_ptr: *mut *mut SV,
    pub Ipsig_name: *mut *mut SV,
    pub Iptr_table: *mut PTR_TBL_t,
    pub Ibeginav_save: *mut AV,
    pub Inullstash: *mut HV,
    pub Ixnv_arenaroot: *mut XPV,
    pub Ixrv_arenaroot: *mut XPV,
    pub Ixpv_arenaroot: *mut XPV,
    pub Ixpviv_arenaroot: *mut XPVIV,
    pub Ixpvnv_arenaroot: *mut XPVNV,
    pub Ixpvcv_arenaroot: *mut XPVCV,
    pub Ixpvav_arenaroot: *mut XPVAV,
    pub Ixpvhv_arenaroot: *mut XPVHV,
    pub Ixpvmg_arenaroot: *mut XPVMG,
    pub Ixpvlv_arenaroot: *mut XPVLV,
    pub Ixpvbm_arenaroot: *mut XPVBM,
    pub Ihe_arenaroot: *mut XPV,
    pub Ipsig_pend: *mut ::std::os::raw::c_int,
    pub Isig_pending: ::std::os::raw::c_int,
    pub Inumeric_radix_sv: *mut SV,
    pub Iregex_pad: *mut *mut SV,
    pub Iregex_padav: *mut AV,
    pub Ireentrant_buffer: *mut REENTR,
    pub Isavebegin: ::std::os::raw::c_char,
    pub Icustom_op_names: *mut HV,
    pub Icustom_op_descs: *mut HV,
    pub Iperlio: *mut PerlIO,
    pub Iknown_layers: *mut PerlIO_list_t,
    pub Idef_layerlist: *mut PerlIO_list_t,
    pub Iencoding: *mut SV,
    pub Idebug_pad: perl_debug_pad,
    pub Itaint_warn: ::std::os::raw::c_char,
    pub Iutf8locale: ::std::os::raw::c_char,
    pub Iutf8_idstart: *mut SV,
    pub Iutf8_idcont: *mut SV,
    pub Isort_RealCmp: SVCOMPARE_t,
    pub Icheckav_save: *mut AV,
    pub Iclocktick: ::std::os::raw::c_long,
    pub Iin_load_module: ::std::os::raw::c_int,
    pub Iunicode: U32,
    pub Isignals: U32,
    pub Istashcache: *mut HV,
    pub Ireentrant_retint: ::std::os::raw::c_int,
    pub Isharehook: share_proc_t,
    pub Ilockhook: share_proc_t,
    pub Iunlockhook: share_proc_t,
    pub Ithreadhook: thrhook_proc_t,
    pub Irunops_std: runops_proc_t,
    pub Irunops_dbg: runops_proc_t,
    pub Ihash_seed: UV,
    pub Ihash_seed_set: ::std::os::raw::c_char,
    pub Irehash_seed: UV,
    pub Irehash_seed_set: ::std::os::raw::c_char,
    pub Ifdscript: ::std::os::raw::c_int,
    pub Isuidscript: ::std::os::raw::c_int,
    pub Ipte_root: *mut ptr_tbl_ent,
    pub Ipte_arenaroot: *mut XPV,
    pub object_compatibility: [::std::os::raw::c_char; 30usize],
}
#[test]
fn bindgen_test_layout_interpreter() {
    assert_eq!(
        ::std::mem::size_of::<interpreter>(),
        4128usize,
        concat!("Size of: ", stringify!(interpreter))
    );
    assert_eq!(
        ::std::mem::align_of::<interpreter>(),
        8usize,
        concat!("Alignment of ", stringify!(interpreter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tstack_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tstack_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tcurpad as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tcurpad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tstack_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tstack_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tstack_max as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tstack_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tscopestack as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tscopestack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tscopestack_ix as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tscopestack_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tscopestack_max as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tscopestack_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tsavestack as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tsavestack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tsavestack_ix as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tsavestack_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tsavestack_max as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tsavestack_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ttmps_stack as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ttmps_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ttmps_ix as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ttmps_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ttmps_floor as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ttmps_floor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ttmps_max as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ttmps_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tmarkstack as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tmarkstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tmarkstack_ptr as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tmarkstack_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tmarkstack_max as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tmarkstack_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tretstack as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tretstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tretstack_ix as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tretstack_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tretstack_max as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tretstack_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).TSv as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(TSv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).TXpv as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(TXpv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tna as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tna)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tstatbuf as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tstatbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tstatcache as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tstatcache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tstatgv as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tstatgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tstatname as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tstatname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ttimesbuf as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ttimesbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ttainted as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ttainted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tcurpm as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tcurpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tnrs as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tnrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Trs as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Trs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tlast_in_gv as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tlast_in_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tofs_sv as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tofs_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tdefoutgv as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tdefoutgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tchopset as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tchopset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tformtarget as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tformtarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tbodytarget as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tbodytarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ttoptarget as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ttoptarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tdefstash as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tdefstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tcurstash as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tcurstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Trestartop as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Trestartop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tcurcop as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tcurcop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tin_eval as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tin_eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tdelaymagic as *const _ as usize },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tdelaymagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tdirty as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tdirty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tlocalizing as *const _ as usize },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tlocalizing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tcurstack as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tcurstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tcurstackinfo as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tcurstackinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tmainstack as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tmainstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ttop_env as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ttop_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tstart_env as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tstart_env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Terrors as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Terrors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tav_fetch_sv as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tav_fetch_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Thv_fetch_sv as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Thv_fetch_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Thv_fetch_ent_mh as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Thv_fetch_ent_mh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tmodcount as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tmodcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tlastgotoprobe as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tlastgotoprobe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tdumpindent as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tdumpindent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tsortcop as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tsortcop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tsortstash as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tsortstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tfirstgv as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tfirstgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tsecondgv as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tsecondgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tsortcxix as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tsortcxix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tefloatbuf as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tefloatbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tefloatsize as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tefloatsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tscreamfirst as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tscreamfirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tscreamnext as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tscreamnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tmaxscream as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tmaxscream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tlastscream as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tlastscream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregdummy as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregdummy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregcomp_parse as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregcomp_parse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregxend as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregxend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregcode as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregnaughty as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregnaughty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregsawback as *const _ as usize },
        964usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregsawback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregprecomp as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregprecomp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregnpar as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregnpar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregsize as *const _ as usize },
        980usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregflags as *const _ as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregseen as *const _ as usize },
        988usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregseen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tseen_zerolen as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tseen_zerolen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tseen_evals as *const _ as usize },
        996usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tseen_evals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregcomp_rx as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregcomp_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Textralen as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Textralen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tcolorset as *const _ as usize },
        1012usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tcolorset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tcolors as *const _ as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tcolors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_whilem_seen as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_whilem_seen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treginput as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treginput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregbol as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregeol as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregeol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregstartp as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregstartp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregendp as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregendp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treglastparen as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treglastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treglastcloseparen as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treglastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregtill as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregtill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregcompat1 as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregcompat1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_start_tmp as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_start_tmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_start_tmpl as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_start_tmpl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregdata as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tbostr as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tbostr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_flags as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_eval_set as *const _ as usize },
        1180usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_eval_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregnarrate as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregnarrate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregprogram as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregprogram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregindent as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregindent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregcc as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregcc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_call_cc as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_call_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_re as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_ganch as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_ganch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_sv as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_magic as *const _ as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_oldpos as *const _ as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_oldpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_oldcurpm as *const _ as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_oldcurpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_curpm as *const _ as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_curpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_oldsaved as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_oldsaved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_oldsavedlen as *const _ as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_oldsavedlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_maxiter as *const _ as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_maxiter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_leftiter as *const _ as usize },
        1300usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_leftiter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_poscache as *const _ as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_poscache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_poscache_size as *const _ as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_poscache_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tpeepp as *const _ as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tpeepp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregcompp as *const _ as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregcompp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregexecp as *const _ as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregexecp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregint_start as *const _ as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregint_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregint_string as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregint_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tregfree as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tregfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treginterp_cnt as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treginterp_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_starttry as *const _ as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_starttry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Twatchaddr as *const _ as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Twatchaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Twatchok as *const _ as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Twatchok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Treg_match_utf8 as *const _ as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Treg_match_utf8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Tcomppad as *const _ as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Tcomppad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigargc as *const _ as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigargc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigargv as *const _ as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigargv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ienvgv as *const _ as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ienvgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iincgv as *const _ as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iincgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ihintgv as *const _ as usize },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ihintgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigfilename as *const _ as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigfilename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idiehook as *const _ as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idiehook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iwarnhook as *const _ as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iwarnhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_c as *const _ as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipatchlevel as *const _ as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipatchlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilocalpatches as *const _ as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilocalpatches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isplitstr as *const _ as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isplitstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipreprocess as *const _ as usize },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipreprocess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_n as *const _ as usize },
        1513usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_p as *const _ as usize },
        1514usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_l as *const _ as usize },
        1515usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_a as *const _ as usize },
        1516usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iminus_F as *const _ as usize },
        1517usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iminus_F)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idoswitches as *const _ as usize },
        1518usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idoswitches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idowarn as *const _ as usize },
        1519usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idowarn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iwidesyscalls as *const _ as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iwidesyscalls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idoextract as *const _ as usize },
        1521usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idoextract)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isawampersand as *const _ as usize },
        1522usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isawampersand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iunsafe as *const _ as usize },
        1523usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iunsafe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iinplace as *const _ as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iinplace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ie_script as *const _ as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ie_script)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iperldb as *const _ as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iperldb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iperl_destruct_level as *const _ as usize },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iperl_destruct_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibasetime as *const _ as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibasetime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iformfeed as *const _ as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iformfeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imaxsysfd as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imaxsysfd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imultiline as *const _ as usize },
        1572usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imultiline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istatusvalue as *const _ as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istatusvalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iexit_flags as *const _ as usize },
        1580usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iexit_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istdingv as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istdingv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istderrgv as *const _ as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istderrgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idefgv as *const _ as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idefgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iargvgv as *const _ as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iargvgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iargvoutgv as *const _ as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iargvoutgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iargvout_stack as *const _ as usize },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iargvout_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ireplgv as *const _ as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ireplgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ierrgv as *const _ as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ierrgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBgv as *const _ as usize },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBline as *const _ as usize },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBsub as *const _ as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBsub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBsingle as *const _ as usize },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBsingle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBtrace as *const _ as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBtrace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBsignal as *const _ as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBsignal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilineary as *const _ as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilineary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idbargs as *const _ as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idbargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idebstash as *const _ as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idebstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iglobalstash as *const _ as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iglobalstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurstname as *const _ as usize },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurstname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibeginav as *const _ as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibeginav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iendav as *const _ as usize },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iendav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icheckav as *const _ as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icheckav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iinitav as *const _ as usize },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iinitav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istrtab as *const _ as usize },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istrtab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isub_generation as *const _ as usize },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isub_generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_count as *const _ as usize },
        1780usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_objcount as *const _ as usize },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_objcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_root as *const _ as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_arenaroot as *const _ as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iforkprocess as *const _ as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iforkprocess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ifdpid as *const _ as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ifdpid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itainting as *const _ as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itainting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iop_mask as *const _ as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iop_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imain_cv as *const _ as usize },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imain_cv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imain_root as *const _ as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imain_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imain_start as *const _ as usize },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imain_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ieval_root as *const _ as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ieval_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ieval_start as *const _ as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ieval_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icurcopdb as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icurcopdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icopline as *const _ as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icopline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ifilemode as *const _ as usize },
        1892usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ifilemode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilastfd as *const _ as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilastfd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ioldname as *const _ as usize },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ioldname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IArgv as *const _ as usize },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IArgv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).ICmd as *const _ as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(ICmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Igensym as *const _ as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Igensym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipreambled as *const _ as usize },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipreambled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipreambleav as *const _ as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipreambleav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilaststatval as *const _ as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilaststatval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilaststype as *const _ as usize },
        1948usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilaststype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imess_sv as *const _ as usize },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imess_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iors_sv as *const _ as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iors_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iofmt as *const _ as usize },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iofmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iexitlist as *const _ as usize },
        1976usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iexitlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iexitlistlen as *const _ as usize },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iexitlistlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imodglobal as *const _ as usize },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imodglobal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iprofiledata as *const _ as usize },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iprofiledata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irsfp as *const _ as usize },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irsfp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irsfp_filters as *const _ as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irsfp_filters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icompiling as *const _ as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icompiling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icompcv as *const _ as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icompcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IBINCOMPAT0 as *const _ as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IBINCOMPAT0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icomppad_name as *const _ as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icomppad_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icomppad_name_fill as *const _ as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icomppad_name_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icomppad_name_floor as *const _ as usize },
        2148usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icomppad_name_floor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Igeneration as *const _ as usize },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Igeneration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).IDBcv as *const _ as usize },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(IDBcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_clean_objs as *const _ as usize },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_clean_objs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_clean_all as *const _ as usize },
        2169usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_clean_all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilinestart as *const _ as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilinestart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipending_ident as *const _ as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipending_ident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isublex_info as *const _ as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isublex_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iuid as *const _ as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ieuid as *const _ as usize },
        2228usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ieuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Igid as *const _ as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Igid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iegid as *const _ as usize },
        2236usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iegid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inomemok as *const _ as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inomemok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ian as *const _ as usize },
        2244usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icop_seqmax as *const _ as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icop_seqmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iop_seqmax as *const _ as usize },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iop_seqmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ievalseq as *const _ as usize },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ievalseq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigenviron as *const _ as usize },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigenviron)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iorigalen as *const _ as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iorigalen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipidstatus as *const _ as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipidstatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imaxo as *const _ as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imaxo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iosname as *const _ as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iosname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ish_path_compat as *const _ as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ish_path_compat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isighandlerp as *const _ as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isighandlerp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixiv_arenaroot as *const _ as usize },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixiv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixiv_root as *const _ as usize },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixiv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixnv_root as *const _ as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixnv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixrv_root as *const _ as usize },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixrv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpv_root as *const _ as usize },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpviv_root as *const _ as usize },
        2360usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpviv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvnv_root as *const _ as usize },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvnv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvcv_root as *const _ as usize },
        2376usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvcv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvav_root as *const _ as usize },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvav_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvhv_root as *const _ as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvhv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvmg_root as *const _ as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvmg_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvlv_root as *const _ as usize },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvlv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvbm_root as *const _ as usize },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvbm_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ihe_root as *const _ as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ihe_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inice_chunk as *const _ as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inice_chunk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inice_chunk_size as *const _ as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inice_chunk_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irunops as *const _ as usize },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irunops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itokenbuf as *const _ as usize },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itokenbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_undef as *const _ as usize },
        2712usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_undef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_no as *const _ as usize },
        2728usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isv_yes as *const _ as usize },
        2744usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isv_yes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icshname as *const _ as usize },
        2760usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icshname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icshlen as *const _ as usize },
        2768usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icshlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_state as *const _ as usize },
        2772usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_defer as *const _ as usize },
        2776usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_defer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_expect as *const _ as usize },
        2780usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_expect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_brackets as *const _ as usize },
        2784usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_brackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_formbrack as *const _ as usize },
        2788usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_formbrack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_casemods as *const _ as usize },
        2792usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_casemods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_dojoin as *const _ as usize },
        2796usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_dojoin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_starts as *const _ as usize },
        2800usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_starts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_stuff as *const _ as usize },
        2808usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_stuff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_repl as *const _ as usize },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_repl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_op as *const _ as usize },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_inpat as *const _ as usize },
        2832usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_inpat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_inwhat as *const _ as usize },
        2840usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_inwhat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_brackstack as *const _ as usize },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_brackstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilex_casestack as *const _ as usize },
        2856usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilex_casestack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inextval as *const _ as usize },
        2864usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inextval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inexttype as *const _ as usize },
        2904usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inexttype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inexttoke as *const _ as usize },
        2924usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inexttoke)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilinestr as *const _ as usize },
        2928usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilinestr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibufptr as *const _ as usize },
        2936usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibufptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ioldbufptr as *const _ as usize },
        2944usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ioldbufptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ioldoldbufptr as *const _ as usize },
        2952usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ioldoldbufptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibufend as *const _ as usize },
        2960usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibufend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iexpect as *const _ as usize },
        2968usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iexpect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imulti_start as *const _ as usize },
        2972usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imulti_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imulti_end as *const _ as usize },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imulti_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imulti_open as *const _ as usize },
        2980usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imulti_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imulti_close as *const _ as usize },
        2984usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imulti_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ierror_count as *const _ as usize },
        2988usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ierror_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isubline as *const _ as usize },
        2992usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isubline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isubname as *const _ as usize },
        3000usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isubname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imin_intro_pending as *const _ as usize },
        3008usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imin_intro_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Imax_intro_pending as *const _ as usize },
        3012usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Imax_intro_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipadix as *const _ as usize },
        3016usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipadix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipadix_floor as *const _ as usize },
        3020usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipadix_floor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipad_reset_pending as *const _ as usize },
        3024usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipad_reset_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_uni as *const _ as usize },
        3032usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_uni)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_lop as *const _ as usize },
        3040usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_lop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_lop_op as *const _ as usize },
        3048usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_lop_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_my as *const _ as usize },
        3052usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_my)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_my_stash as *const _ as usize },
        3056usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_my_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ihints as *const _ as usize },
        3064usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ihints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idebug as *const _ as usize },
        3068usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iamagic_generation as *const _ as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iamagic_generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollation_ix as *const _ as usize },
        3080usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollation_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollation_name as *const _ as usize },
        3088usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollation_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollation_standard as *const _ as usize },
        3096usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollation_standard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollxfrm_base as *const _ as usize },
        3104usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollxfrm_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icollxfrm_mult as *const _ as usize },
        3112usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icollxfrm_mult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inumeric_name as *const _ as usize },
        3120usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inumeric_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inumeric_standard as *const _ as usize },
        3128usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inumeric_standard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inumeric_local as *const _ as usize },
        3129usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inumeric_local)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inumeric_compat1 as *const _ as usize },
        3130usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inumeric_compat1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_alnum as *const _ as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_alnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_alnumc as *const _ as usize },
        3144usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_alnumc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_ascii as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_ascii)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_alpha as *const _ as usize },
        3160usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_space as *const _ as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_cntrl as *const _ as usize },
        3176usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_cntrl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_graph as *const _ as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_graph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_digit as *const _ as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_digit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_upper as *const _ as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_upper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_lower as *const _ as usize },
        3208usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_lower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_print as *const _ as usize },
        3216usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_print)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_punct as *const _ as usize },
        3224usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_punct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_xdigit as *const _ as usize },
        3232usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_xdigit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_mark as *const _ as usize },
        3240usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_toupper as *const _ as usize },
        3248usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_totitle as *const _ as usize },
        3256usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_totitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_tolower as *const _ as usize },
        3264usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_tofold as *const _ as usize },
        3272usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_tofold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_hv as *const _ as usize },
        3280usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_hv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_klen as *const _ as usize },
        3288usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_klen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_key as *const _ as usize },
        3292usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_tmps as *const _ as usize },
        3304usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_tmps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilast_swash_slen as *const _ as usize },
        3312usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilast_swash_slen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iyydebug as *const _ as usize },
        3320usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iyydebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iyynerrs as *const _ as usize },
        3324usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iyynerrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iyyerrflag as *const _ as usize },
        3328usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iyyerrflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iyychar as *const _ as usize },
        3332usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iyychar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iyyval as *const _ as usize },
        3336usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iyyval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iyylval as *const _ as usize },
        3344usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iyylval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iglob_index as *const _ as usize },
        3352usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iglob_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isrand_called as *const _ as usize },
        3356usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isrand_called)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iuudmap as *const _ as usize },
        3357usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iuudmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibitcount as *const _ as usize },
        3616usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibitcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipsig_ptr as *const _ as usize },
        3624usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipsig_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipsig_name as *const _ as usize },
        3632usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipsig_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iptr_table as *const _ as usize },
        3640usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iptr_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ibeginav_save as *const _ as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ibeginav_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inullstash as *const _ as usize },
        3656usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inullstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixnv_arenaroot as *const _ as usize },
        3664usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixnv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixrv_arenaroot as *const _ as usize },
        3672usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixrv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpv_arenaroot as *const _ as usize },
        3680usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpviv_arenaroot as *const _ as usize },
        3688usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpviv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvnv_arenaroot as *const _ as usize },
        3696usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvnv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvcv_arenaroot as *const _ as usize },
        3704usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvcv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvav_arenaroot as *const _ as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvav_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvhv_arenaroot as *const _ as usize },
        3720usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvhv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvmg_arenaroot as *const _ as usize },
        3728usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvmg_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvlv_arenaroot as *const _ as usize },
        3736usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvlv_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ixpvbm_arenaroot as *const _ as usize },
        3744usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ixpvbm_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ihe_arenaroot as *const _ as usize },
        3752usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ihe_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipsig_pend as *const _ as usize },
        3760usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipsig_pend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isig_pending as *const _ as usize },
        3768usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isig_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Inumeric_radix_sv as *const _ as usize },
        3776usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Inumeric_radix_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iregex_pad as *const _ as usize },
        3784usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iregex_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iregex_padav as *const _ as usize },
        3792usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iregex_padav)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ireentrant_buffer as *const _ as usize },
        3800usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ireentrant_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isavebegin as *const _ as usize },
        3808usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isavebegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icustom_op_names as *const _ as usize },
        3816usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icustom_op_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icustom_op_descs as *const _ as usize },
        3824usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icustom_op_descs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iperlio as *const _ as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iperlio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iknown_layers as *const _ as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iknown_layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idef_layerlist as *const _ as usize },
        3848usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idef_layerlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iencoding as *const _ as usize },
        3856usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iencoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Idebug_pad as *const _ as usize },
        3864usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Idebug_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Itaint_warn as *const _ as usize },
        3912usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Itaint_warn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8locale as *const _ as usize },
        3913usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_idstart as *const _ as usize },
        3920usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_idstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iutf8_idcont as *const _ as usize },
        3928usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iutf8_idcont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isort_RealCmp as *const _ as usize },
        3936usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isort_RealCmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Icheckav_save as *const _ as usize },
        3944usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Icheckav_save)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iclocktick as *const _ as usize },
        3952usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iclocktick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iin_load_module as *const _ as usize },
        3960usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iin_load_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iunicode as *const _ as usize },
        3964usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iunicode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isignals as *const _ as usize },
        3968usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isignals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Istashcache as *const _ as usize },
        3976usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Istashcache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ireentrant_retint as *const _ as usize },
        3984usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ireentrant_retint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isharehook as *const _ as usize },
        3992usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isharehook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ilockhook as *const _ as usize },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ilockhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Iunlockhook as *const _ as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Iunlockhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ithreadhook as *const _ as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ithreadhook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irunops_std as *const _ as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irunops_std)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irunops_dbg as *const _ as usize },
        4032usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irunops_dbg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ihash_seed as *const _ as usize },
        4040usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ihash_seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ihash_seed_set as *const _ as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ihash_seed_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irehash_seed as *const _ as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irehash_seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Irehash_seed_set as *const _ as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Irehash_seed_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ifdscript as *const _ as usize },
        4068usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ifdscript)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Isuidscript as *const _ as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Isuidscript)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipte_root as *const _ as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipte_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).Ipte_arenaroot as *const _ as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(Ipte_arenaroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).object_compatibility as *const _ as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(object_compatibility)
        )
    );
}
impl ::std::fmt::Debug for interpreter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "interpreter {{ Tstack_sp: {:?}, Top: {:?}, Tcurpad: {:?}, Tstack_base: {:?}, Tstack_max: {:?}, Tscopestack: {:?}, Tscopestack_ix: {:?}, Tscopestack_max: {:?}, Tsavestack: {:?}, Tsavestack_ix: {:?}, Tsavestack_max: {:?}, Ttmps_stack: {:?}, Ttmps_ix: {:?}, Ttmps_floor: {:?}, Ttmps_max: {:?}, Tmarkstack: {:?}, Tmarkstack_ptr: {:?}, Tmarkstack_max: {:?}, Tretstack: {:?}, Tretstack_ix: {:?}, Tretstack_max: {:?}, TSv: {:?}, TXpv: {:?}, Tna: {:?}, Tstatbuf: {:?}, Tstatcache: {:?}, Tstatgv: {:?}, Tstatname: {:?}, Ttimesbuf: {:?}, Ttainted: {:?}, Tcurpm: {:?}, Tnrs: {:?}, Trs: {:?}, Tlast_in_gv: {:?}, Tofs_sv: {:?}, Tdefoutgv: {:?}, Tchopset: {:?}, Tformtarget: {:?}, Tbodytarget: {:?}, Ttoptarget: {:?}, Tdefstash: {:?}, Tcurstash: {:?}, Trestartop: {:?}, Tcurcop: {:?}, Tin_eval: {:?}, Tdelaymagic: {:?}, Tdirty: {:?}, Tlocalizing: {:?}, Tcurstack: {:?}, Tcurstackinfo: {:?}, Tmainstack: {:?}, Ttop_env: {:?}, Tstart_env: {:?}, Terrors: {:?}, Tav_fetch_sv: {:?}, Thv_fetch_sv: {:?}, Thv_fetch_ent_mh: {:?}, Tmodcount: {:?}, Tlastgotoprobe: {:?}, Tdumpindent: {:?}, Tsortcop: {:?}, Tsortstash: {:?}, Tfirstgv: {:?}, Tsecondgv: {:?}, Tsortcxix: {:?}, Tefloatbuf: {:?}, Tefloatsize: {:?}, Tscreamfirst: {:?}, Tscreamnext: {:?}, Tmaxscream: {:?}, Tlastscream: {:?}, Tregdummy: {:?}, Tregcomp_parse: {:?}, Tregxend: {:?}, Tregcode: {:?}, Tregnaughty: {:?}, Tregsawback: {:?}, Tregprecomp: {:?}, Tregnpar: {:?}, Tregsize: {:?}, Tregflags: {:?}, Tregseen: {:?}, Tseen_zerolen: {:?}, Tseen_evals: {:?}, Tregcomp_rx: {:?}, Textralen: {:?}, Tcolorset: {:?}, Tcolors: {:?}, Treg_whilem_seen: {:?}, Treginput: {:?}, Tregbol: {:?}, Tregeol: {:?}, Tregstartp: {:?}, Tregendp: {:?}, Treglastparen: {:?}, Treglastcloseparen: {:?}, Tregtill: {:?}, Tregcompat1: {:?}, Treg_start_tmp: {:?}, Treg_start_tmpl: {:?}, Tregdata: {:?}, Tbostr: {:?}, Treg_flags: {:?}, Treg_eval_set: {:?}, Tregnarrate: {:?}, Tregprogram: {:?}, Tregindent: {:?}, Tregcc: {:?}, Treg_call_cc: {:?}, Treg_re: {:?}, Treg_ganch: {:?}, Treg_sv: {:?}, Treg_magic: {:?}, Treg_oldpos: {:?}, Treg_oldcurpm: {:?}, Treg_curpm: {:?}, Treg_oldsaved: {:?}, Treg_oldsavedlen: {:?}, Treg_maxiter: {:?}, Treg_leftiter: {:?}, Treg_poscache: {:?}, Treg_poscache_size: {:?}, Tpeepp: {:?}, Tregcompp: {:?}, Tregexecp: {:?}, Tregint_start: {:?}, Tregint_string: {:?}, Tregfree: {:?}, Treginterp_cnt: {:?}, Treg_starttry: {:?}, Twatchaddr: {:?}, Twatchok: {:?}, Treg_match_utf8: {:?}, Tcomppad: {:?}, Iorigargc: {:?}, Iorigargv: {:?}, Ienvgv: {:?}, Iincgv: {:?}, Ihintgv: {:?}, Iorigfilename: {:?}, Idiehook: {:?}, Iwarnhook: {:?}, Iminus_c: {:?}, Ipatchlevel: {:?}, Ilocalpatches: {:?}, Isplitstr: {:?}, Ipreprocess: {:?}, Iminus_n: {:?}, Iminus_p: {:?}, Iminus_l: {:?}, Iminus_a: {:?}, Iminus_F: {:?}, Idoswitches: {:?}, Idowarn: {:?}, Iwidesyscalls: {:?}, Idoextract: {:?}, Isawampersand: {:?}, Iunsafe: {:?}, Iinplace: {:?}, Ie_script: {:?}, Iperldb: {:?}, Iperl_destruct_level: {:?}, Ibasetime: {:?}, Iformfeed: {:?}, Imaxsysfd: {:?}, Imultiline: {:?}, Istatusvalue: {:?}, Iexit_flags: {:?}, Istdingv: {:?}, Istderrgv: {:?}, Idefgv: {:?}, Iargvgv: {:?}, Iargvoutgv: {:?}, Iargvout_stack: {:?}, Ireplgv: {:?}, Ierrgv: {:?}, IDBgv: {:?}, IDBline: {:?}, IDBsub: {:?}, IDBsingle: {:?}, IDBtrace: {:?}, IDBsignal: {:?}, Ilineary: {:?}, Idbargs: {:?}, Idebstash: {:?}, Iglobalstash: {:?}, Icurstname: {:?}, Ibeginav: {:?}, Iendav: {:?}, Icheckav: {:?}, Iinitav: {:?}, Istrtab: {:?}, Isub_generation: {:?}, Isv_count: {:?}, Isv_objcount: {:?}, Isv_root: {:?}, Isv_arenaroot: {:?}, Iforkprocess: {:?}, Ifdpid: {:?}, Itainting: {:?}, Iop_mask: {:?}, Imain_cv: {:?}, Imain_root: {:?}, Imain_start: {:?}, Ieval_root: {:?}, Ieval_start: {:?}, Icurcopdb: {:?}, Icopline: {:?}, Ifilemode: {:?}, Ilastfd: {:?}, Ioldname: {:?}, IArgv: {:?}, ICmd: {:?}, Igensym: {:?}, Ipreambled: {:?}, Ipreambleav: {:?}, Ilaststatval: {:?}, Ilaststype: {:?}, Imess_sv: {:?}, Iors_sv: {:?}, Iofmt: {:?}, Iexitlist: {:?}, Iexitlistlen: {:?}, Imodglobal: {:?}, Iprofiledata: {:?}, Irsfp: {:?}, Irsfp_filters: {:?}, Icompiling: {:?}, Icompcv: {:?}, IBINCOMPAT0: {:?}, Icomppad_name: {:?}, Icomppad_name_fill: {:?}, Icomppad_name_floor: {:?}, Igeneration: {:?}, IDBcv: {:?}, Iin_clean_objs: {:?}, Iin_clean_all: {:?}, Ilinestart: {:?}, Ipending_ident: {:?}, Isublex_info: {:?}, Iuid: {:?}, Ieuid: {:?}, Igid: {:?}, Iegid: {:?}, Inomemok: {:?}, Ian: {:?}, Icop_seqmax: {:?}, Iop_seqmax: {:?}, Ievalseq: {:?}, Iorigenviron: {:?}, Iorigalen: {:?}, Ipidstatus: {:?}, Imaxo: {:?}, Iosname: {:?}, Ish_path_compat: {:?}, Isighandlerp: {:?}, Ixiv_arenaroot: {:?}, Ixiv_root: {:?}, Ixnv_root: {:?}, Ixrv_root: {:?}, Ixpv_root: {:?}, Ixpviv_root: {:?}, Ixpvnv_root: {:?}, Ixpvcv_root: {:?}, Ixpvav_root: {:?}, Ixpvhv_root: {:?}, Ixpvmg_root: {:?}, Ixpvlv_root: {:?}, Ixpvbm_root: {:?}, Ihe_root: {:?}, Inice_chunk: {:?}, Inice_chunk_size: {:?}, Irunops: {:?}, Itokenbuf: [{}], Isv_undef: {:?}, Isv_no: {:?}, Isv_yes: {:?}, Icshname: {:?}, Icshlen: {:?}, Ilex_state: {:?}, Ilex_defer: {:?}, Ilex_expect: {:?}, Ilex_brackets: {:?}, Ilex_formbrack: {:?}, Ilex_casemods: {:?}, Ilex_dojoin: {:?}, Ilex_starts: {:?}, Ilex_stuff: {:?}, Ilex_repl: {:?}, Ilex_op: {:?}, Ilex_inpat: {:?}, Ilex_inwhat: {:?}, Ilex_brackstack: {:?}, Ilex_casestack: {:?}, Inextval: {:?}, Inexttype: {:?}, Inexttoke: {:?}, Ilinestr: {:?}, Ibufptr: {:?}, Ioldbufptr: {:?}, Ioldoldbufptr: {:?}, Ibufend: {:?}, Iexpect: {:?}, Imulti_start: {:?}, Imulti_end: {:?}, Imulti_open: {:?}, Imulti_close: {:?}, Ierror_count: {:?}, Isubline: {:?}, Isubname: {:?}, Imin_intro_pending: {:?}, Imax_intro_pending: {:?}, Ipadix: {:?}, Ipadix_floor: {:?}, Ipad_reset_pending: {:?}, Ilast_uni: {:?}, Ilast_lop: {:?}, Ilast_lop_op: {:?}, Iin_my: {:?}, Iin_my_stash: {:?}, Ihints: {:?}, Idebug: {:?}, Iamagic_generation: {:?}, Icollation_ix: {:?}, Icollation_name: {:?}, Icollation_standard: {:?}, Icollxfrm_base: {:?}, Icollxfrm_mult: {:?}, Inumeric_name: {:?}, Inumeric_standard: {:?}, Inumeric_local: {:?}, Inumeric_compat1: {:?}, Iutf8_alnum: {:?}, Iutf8_alnumc: {:?}, Iutf8_ascii: {:?}, Iutf8_alpha: {:?}, Iutf8_space: {:?}, Iutf8_cntrl: {:?}, Iutf8_graph: {:?}, Iutf8_digit: {:?}, Iutf8_upper: {:?}, Iutf8_lower: {:?}, Iutf8_print: {:?}, Iutf8_punct: {:?}, Iutf8_xdigit: {:?}, Iutf8_mark: {:?}, Iutf8_toupper: {:?}, Iutf8_totitle: {:?}, Iutf8_tolower: {:?}, Iutf8_tofold: {:?}, Ilast_swash_hv: {:?}, Ilast_swash_klen: {:?}, Ilast_swash_key: {:?}, Ilast_swash_tmps: {:?}, Ilast_swash_slen: {:?}, Iyydebug: {:?}, Iyynerrs: {:?}, Iyyerrflag: {:?}, Iyychar: {:?}, Iyyval: {:?}, Iyylval: {:?}, Iglob_index: {:?}, Isrand_called: {:?}, Iuudmap: [{}], Ibitcount: {:?}, Ipsig_ptr: {:?}, Ipsig_name: {:?}, Iptr_table: {:?}, Ibeginav_save: {:?}, Inullstash: {:?}, Ixnv_arenaroot: {:?}, Ixrv_arenaroot: {:?}, Ixpv_arenaroot: {:?}, Ixpviv_arenaroot: {:?}, Ixpvnv_arenaroot: {:?}, Ixpvcv_arenaroot: {:?}, Ixpvav_arenaroot: {:?}, Ixpvhv_arenaroot: {:?}, Ixpvmg_arenaroot: {:?}, Ixpvlv_arenaroot: {:?}, Ixpvbm_arenaroot: {:?}, Ihe_arenaroot: {:?}, Ipsig_pend: {:?}, Isig_pending: {:?}, Inumeric_radix_sv: {:?}, Iregex_pad: {:?}, Iregex_padav: {:?}, Ireentrant_buffer: {:?}, Isavebegin: {:?}, Icustom_op_names: {:?}, Icustom_op_descs: {:?}, Iperlio: {:?}, Iknown_layers: {:?}, Idef_layerlist: {:?}, Iencoding: {:?}, Idebug_pad: {:?}, Itaint_warn: {:?}, Iutf8locale: {:?}, Iutf8_idstart: {:?}, Iutf8_idcont: {:?}, Isort_RealCmp: {:?}, Icheckav_save: {:?}, Iclocktick: {:?}, Iin_load_module: {:?}, Iunicode: {:?}, Isignals: {:?}, Istashcache: {:?}, Ireentrant_retint: {:?}, Isharehook: {:?}, Ilockhook: {:?}, Iunlockhook: {:?}, Ithreadhook: {:?}, Irunops_std: {:?}, Irunops_dbg: {:?}, Ihash_seed: {:?}, Ihash_seed_set: {:?}, Irehash_seed: {:?}, Irehash_seed_set: {:?}, Ifdscript: {:?}, Isuidscript: {:?}, Ipte_root: {:?}, Ipte_arenaroot: {:?}, object_compatibility: {:?} }}",
            self.Tstack_sp,
            self.Top,
            self.Tcurpad,
            self.Tstack_base,
            self.Tstack_max,
            self.Tscopestack,
            self.Tscopestack_ix,
            self.Tscopestack_max,
            self.Tsavestack,
            self.Tsavestack_ix,
            self.Tsavestack_max,
            self.Ttmps_stack,
            self.Ttmps_ix,
            self.Ttmps_floor,
            self.Ttmps_max,
            self.Tmarkstack,
            self.Tmarkstack_ptr,
            self.Tmarkstack_max,
            self.Tretstack,
            self.Tretstack_ix,
            self.Tretstack_max,
            self.TSv,
            self.TXpv,
            self.Tna,
            self.Tstatbuf,
            self.Tstatcache,
            self.Tstatgv,
            self.Tstatname,
            self.Ttimesbuf,
            self.Ttainted,
            self.Tcurpm,
            self.Tnrs,
            self.Trs,
            self.Tlast_in_gv,
            self.Tofs_sv,
            self.Tdefoutgv,
            self.Tchopset,
            self.Tformtarget,
            self.Tbodytarget,
            self.Ttoptarget,
            self.Tdefstash,
            self.Tcurstash,
            self.Trestartop,
            self.Tcurcop,
            self.Tin_eval,
            self.Tdelaymagic,
            self.Tdirty,
            self.Tlocalizing,
            self.Tcurstack,
            self.Tcurstackinfo,
            self.Tmainstack,
            self.Ttop_env,
            self.Tstart_env,
            self.Terrors,
            self.Tav_fetch_sv,
            self.Thv_fetch_sv,
            self.Thv_fetch_ent_mh,
            self.Tmodcount,
            self.Tlastgotoprobe,
            self.Tdumpindent,
            self.Tsortcop,
            self.Tsortstash,
            self.Tfirstgv,
            self.Tsecondgv,
            self.Tsortcxix,
            self.Tefloatbuf,
            self.Tefloatsize,
            self.Tscreamfirst,
            self.Tscreamnext,
            self.Tmaxscream,
            self.Tlastscream,
            self.Tregdummy,
            self.Tregcomp_parse,
            self.Tregxend,
            self.Tregcode,
            self.Tregnaughty,
            self.Tregsawback,
            self.Tregprecomp,
            self.Tregnpar,
            self.Tregsize,
            self.Tregflags,
            self.Tregseen,
            self.Tseen_zerolen,
            self.Tseen_evals,
            self.Tregcomp_rx,
            self.Textralen,
            self.Tcolorset,
            self.Tcolors,
            self.Treg_whilem_seen,
            self.Treginput,
            self.Tregbol,
            self.Tregeol,
            self.Tregstartp,
            self.Tregendp,
            self.Treglastparen,
            self.Treglastcloseparen,
            self.Tregtill,
            self.Tregcompat1,
            self.Treg_start_tmp,
            self.Treg_start_tmpl,
            self.Tregdata,
            self.Tbostr,
            self.Treg_flags,
            self.Treg_eval_set,
            self.Tregnarrate,
            self.Tregprogram,
            self.Tregindent,
            self.Tregcc,
            self.Treg_call_cc,
            self.Treg_re,
            self.Treg_ganch,
            self.Treg_sv,
            self.Treg_magic,
            self.Treg_oldpos,
            self.Treg_oldcurpm,
            self.Treg_curpm,
            self.Treg_oldsaved,
            self.Treg_oldsavedlen,
            self.Treg_maxiter,
            self.Treg_leftiter,
            self.Treg_poscache,
            self.Treg_poscache_size,
            self.Tpeepp,
            self.Tregcompp,
            self.Tregexecp,
            self.Tregint_start,
            self.Tregint_string,
            self.Tregfree,
            self.Treginterp_cnt,
            self.Treg_starttry,
            self.Twatchaddr,
            self.Twatchok,
            self.Treg_match_utf8,
            self.Tcomppad,
            self.Iorigargc,
            self.Iorigargv,
            self.Ienvgv,
            self.Iincgv,
            self.Ihintgv,
            self.Iorigfilename,
            self.Idiehook,
            self.Iwarnhook,
            self.Iminus_c,
            self.Ipatchlevel,
            self.Ilocalpatches,
            self.Isplitstr,
            self.Ipreprocess,
            self.Iminus_n,
            self.Iminus_p,
            self.Iminus_l,
            self.Iminus_a,
            self.Iminus_F,
            self.Idoswitches,
            self.Idowarn,
            self.Iwidesyscalls,
            self.Idoextract,
            self.Isawampersand,
            self.Iunsafe,
            self.Iinplace,
            self.Ie_script,
            self.Iperldb,
            self.Iperl_destruct_level,
            self.Ibasetime,
            self.Iformfeed,
            self.Imaxsysfd,
            self.Imultiline,
            self.Istatusvalue,
            self.Iexit_flags,
            self.Istdingv,
            self.Istderrgv,
            self.Idefgv,
            self.Iargvgv,
            self.Iargvoutgv,
            self.Iargvout_stack,
            self.Ireplgv,
            self.Ierrgv,
            self.IDBgv,
            self.IDBline,
            self.IDBsub,
            self.IDBsingle,
            self.IDBtrace,
            self.IDBsignal,
            self.Ilineary,
            self.Idbargs,
            self.Idebstash,
            self.Iglobalstash,
            self.Icurstname,
            self.Ibeginav,
            self.Iendav,
            self.Icheckav,
            self.Iinitav,
            self.Istrtab,
            self.Isub_generation,
            self.Isv_count,
            self.Isv_objcount,
            self.Isv_root,
            self.Isv_arenaroot,
            self.Iforkprocess,
            self.Ifdpid,
            self.Itainting,
            self.Iop_mask,
            self.Imain_cv,
            self.Imain_root,
            self.Imain_start,
            self.Ieval_root,
            self.Ieval_start,
            self.Icurcopdb,
            self.Icopline,
            self.Ifilemode,
            self.Ilastfd,
            self.Ioldname,
            self.IArgv,
            self.ICmd,
            self.Igensym,
            self.Ipreambled,
            self.Ipreambleav,
            self.Ilaststatval,
            self.Ilaststype,
            self.Imess_sv,
            self.Iors_sv,
            self.Iofmt,
            self.Iexitlist,
            self.Iexitlistlen,
            self.Imodglobal,
            self.Iprofiledata,
            self.Irsfp,
            self.Irsfp_filters,
            self.Icompiling,
            self.Icompcv,
            self.IBINCOMPAT0,
            self.Icomppad_name,
            self.Icomppad_name_fill,
            self.Icomppad_name_floor,
            self.Igeneration,
            self.IDBcv,
            self.Iin_clean_objs,
            self.Iin_clean_all,
            self.Ilinestart,
            self.Ipending_ident,
            self.Isublex_info,
            self.Iuid,
            self.Ieuid,
            self.Igid,
            self.Iegid,
            self.Inomemok,
            self.Ian,
            self.Icop_seqmax,
            self.Iop_seqmax,
            self.Ievalseq,
            self.Iorigenviron,
            self.Iorigalen,
            self.Ipidstatus,
            self.Imaxo,
            self.Iosname,
            self.Ish_path_compat,
            self.Isighandlerp,
            self.Ixiv_arenaroot,
            self.Ixiv_root,
            self.Ixnv_root,
            self.Ixrv_root,
            self.Ixpv_root,
            self.Ixpviv_root,
            self.Ixpvnv_root,
            self.Ixpvcv_root,
            self.Ixpvav_root,
            self.Ixpvhv_root,
            self.Ixpvmg_root,
            self.Ixpvlv_root,
            self.Ixpvbm_root,
            self.Ihe_root,
            self.Inice_chunk,
            self.Inice_chunk_size,
            self.Irunops,
            self.Itokenbuf
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>(),
            self.Isv_undef,
            self.Isv_no,
            self.Isv_yes,
            self.Icshname,
            self.Icshlen,
            self.Ilex_state,
            self.Ilex_defer,
            self.Ilex_expect,
            self.Ilex_brackets,
            self.Ilex_formbrack,
            self.Ilex_casemods,
            self.Ilex_dojoin,
            self.Ilex_starts,
            self.Ilex_stuff,
            self.Ilex_repl,
            self.Ilex_op,
            self.Ilex_inpat,
            self.Ilex_inwhat,
            self.Ilex_brackstack,
            self.Ilex_casestack,
            self.Inextval,
            self.Inexttype,
            self.Inexttoke,
            self.Ilinestr,
            self.Ibufptr,
            self.Ioldbufptr,
            self.Ioldoldbufptr,
            self.Ibufend,
            self.Iexpect,
            self.Imulti_start,
            self.Imulti_end,
            self.Imulti_open,
            self.Imulti_close,
            self.Ierror_count,
            self.Isubline,
            self.Isubname,
            self.Imin_intro_pending,
            self.Imax_intro_pending,
            self.Ipadix,
            self.Ipadix_floor,
            self.Ipad_reset_pending,
            self.Ilast_uni,
            self.Ilast_lop,
            self.Ilast_lop_op,
            self.Iin_my,
            self.Iin_my_stash,
            self.Ihints,
            self.Idebug,
            self.Iamagic_generation,
            self.Icollation_ix,
            self.Icollation_name,
            self.Icollation_standard,
            self.Icollxfrm_base,
            self.Icollxfrm_mult,
            self.Inumeric_name,
            self.Inumeric_standard,
            self.Inumeric_local,
            self.Inumeric_compat1,
            self.Iutf8_alnum,
            self.Iutf8_alnumc,
            self.Iutf8_ascii,
            self.Iutf8_alpha,
            self.Iutf8_space,
            self.Iutf8_cntrl,
            self.Iutf8_graph,
            self.Iutf8_digit,
            self.Iutf8_upper,
            self.Iutf8_lower,
            self.Iutf8_print,
            self.Iutf8_punct,
            self.Iutf8_xdigit,
            self.Iutf8_mark,
            self.Iutf8_toupper,
            self.Iutf8_totitle,
            self.Iutf8_tolower,
            self.Iutf8_tofold,
            self.Ilast_swash_hv,
            self.Ilast_swash_klen,
            self.Ilast_swash_key,
            self.Ilast_swash_tmps,
            self.Ilast_swash_slen,
            self.Iyydebug,
            self.Iyynerrs,
            self.Iyyerrflag,
            self.Iyychar,
            self.Iyyval,
            self.Iyylval,
            self.Iglob_index,
            self.Isrand_called,
            self.Iuudmap
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>(),
            self.Ibitcount,
            self.Ipsig_ptr,
            self.Ipsig_name,
            self.Iptr_table,
            self.Ibeginav_save,
            self.Inullstash,
            self.Ixnv_arenaroot,
            self.Ixrv_arenaroot,
            self.Ixpv_arenaroot,
            self.Ixpviv_arenaroot,
            self.Ixpvnv_arenaroot,
            self.Ixpvcv_arenaroot,
            self.Ixpvav_arenaroot,
            self.Ixpvhv_arenaroot,
            self.Ixpvmg_arenaroot,
            self.Ixpvlv_arenaroot,
            self.Ixpvbm_arenaroot,
            self.Ihe_arenaroot,
            self.Ipsig_pend,
            self.Isig_pending,
            self.Inumeric_radix_sv,
            self.Iregex_pad,
            self.Iregex_padav,
            self.Ireentrant_buffer,
            self.Isavebegin,
            self.Icustom_op_names,
            self.Icustom_op_descs,
            self.Iperlio,
            self.Iknown_layers,
            self.Idef_layerlist,
            self.Iencoding,
            self.Idebug_pad,
            self.Itaint_warn,
            self.Iutf8locale,
            self.Iutf8_idstart,
            self.Iutf8_idcont,
            self.Isort_RealCmp,
            self.Icheckav_save,
            self.Iclocktick,
            self.Iin_load_module,
            self.Iunicode,
            self.Isignals,
            self.Istashcache,
            self.Ireentrant_retint,
            self.Isharehook,
            self.Ilockhook,
            self.Iunlockhook,
            self.Ithreadhook,
            self.Irunops_std,
            self.Irunops_dbg,
            self.Ihash_seed,
            self.Ihash_seed_set,
            self.Irehash_seed,
            self.Irehash_seed_set,
            self.Ifdscript,
            self.Isuidscript,
            self.Ipte_root,
            self.Ipte_arenaroot,
            self.object_compatibility
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_cc_state {
    pub _address: u8,
}
