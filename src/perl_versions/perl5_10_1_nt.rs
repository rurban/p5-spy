#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl ::std::fmt::Debug for _opaque_pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "_opaque_pthread_mutex_t {{ __sig: {:?}, __opaque: [{}] }}",
            self.__sig,
            self.__opaque
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __dd_rewind: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
#[test]
fn bindgen_test_layout_DIR() {
    assert_eq!(
        ::std::mem::size_of::<DIR>(),
        136usize,
        concat!("Size of: ", stringify!(DIR))
    );
    assert_eq!(
        ::std::mem::align_of::<DIR>(),
        8usize,
        concat!("Alignment of ", stringify!(DIR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_loc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_rewind as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_rewind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_lock as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_td as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_td)
        )
    );
}
impl ::std::fmt::Debug for DIR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "DIR {{ __dd_fd: {:?}, __dd_loc: {:?}, __dd_size: {:?}, __dd_buf: {:?}, __dd_len: {:?}, __dd_seek: {:?}, __dd_rewind: {:?}, __dd_flags: {:?}, __dd_lock: {:?}, __dd_td: {:?} }}",
            self.__dd_fd,
            self.__dd_loc,
            self.__dd_size,
            self.__dd_buf,
            self.__dd_len,
            self.__dd_seek,
            self.__dd_rewind,
            self.__dd_flags,
            self.__dd_lock,
            self.__dd_td
        )
    }
}
pub type IV = ::std::os::raw::c_long;
pub type UV = ::std::os::raw::c_ulong;
pub type NV = f64;
pub type STRLEN = usize;
pub type OP = op;
pub type PerlInterpreter = interpreter;
pub type SV = sv;
pub type AV = av;
pub type HV = hv;
pub type CV = cv;
pub type GP = gp;
pub type GV = gv;
pub type MAGIC = magic;
pub type XPVAV = xpvav;
pub type XPVHV = xpvhv;
pub type XPVGV = xpvgv;
pub type XPVCV = xpvcv;
pub type XPVIO = xpvio;
pub type MGVTBL = mgvtbl;
pub type ANY = any;
pub type CLONE_PARAMS = clone_params;
pub type U8 = ::std::os::raw::c_uchar;
pub type U16 = ::std::os::raw::c_ushort;
pub type I32 = ::std::os::raw::c_int;
pub type U32 = ::std::os::raw::c_uint;
pub type line_t = U32;
#[repr(C)]
#[derive(Copy, Clone)]pub union any { pub any_ptr : * mut :: std :: os :: raw :: c_void , pub any_i32 : I32 , pub any_iv : IV , pub any_long : :: std :: os :: raw :: c_long , pub any_bool : :: std :: os :: raw :: c_char , pub any_dptr : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , pub any_dxptr : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_any() {
    assert_eq!(
        ::std::mem::size_of::<any>(),
        8usize,
        concat!("Size of: ", stringify!(any))
    );
    assert_eq!(
        ::std::mem::align_of::<any>(),
        8usize,
        concat!("Alignment of ", stringify!(any))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_long as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_bool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dxptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dxptr)
        )
    );
}
impl ::std::fmt::Debug for any {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "any {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PerlIO {
    _unused: [u8; 0],
}
pub type PerlIOl = _PerlIO;
pub type PerlIO = *mut PerlIOl;
pub type HE = he;
pub type HEK = hek;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sv {
    pub sv_any: *mut ::std::os::raw::c_void,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: sv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union sv__bindgen_ty_1 { pub svu_iv : IV , pub svu_uv : UV , pub svu_rv : * mut SV , pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_sv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
}
impl ::std::fmt::Debug for sv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "sv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_sv() {
    assert_eq!(
        ::std::mem::size_of::<sv>(),
        24usize,
        concat!("Size of: ", stringify!(sv))
    );
    assert_eq!(
        ::std::mem::align_of::<sv>(),
        8usize,
        concat!("Alignment of ", stringify!(sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(sv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for sv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "sv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gv {
    pub sv_any: *mut XPVGV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: gv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union gv__bindgen_ty_1 { pub svu_iv : IV , pub svu_uv : UV , pub svu_rv : * mut SV , pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_gv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<gv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(gv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<gv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(gv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
}
impl ::std::fmt::Debug for gv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "gv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_gv() {
    assert_eq!(
        ::std::mem::size_of::<gv>(),
        24usize,
        concat!("Size of: ", stringify!(gv))
    );
    assert_eq!(
        ::std::mem::align_of::<gv>(),
        8usize,
        concat!("Alignment of ", stringify!(gv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(gv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for gv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "gv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cv {
    pub sv_any: *mut XPVCV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: cv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union cv__bindgen_ty_1 { pub svu_iv : IV , pub svu_uv : UV , pub svu_rv : * mut SV , pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_cv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
}
impl ::std::fmt::Debug for cv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_cv() {
    assert_eq!(
        ::std::mem::size_of::<cv>(),
        24usize,
        concat!("Size of: ", stringify!(cv))
    );
    assert_eq!(
        ::std::mem::align_of::<cv>(),
        8usize,
        concat!("Alignment of ", stringify!(cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(cv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for cv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct av {
    pub sv_any: *mut XPVAV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: av__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union av__bindgen_ty_1 { pub svu_iv : IV , pub svu_uv : UV , pub svu_rv : * mut SV , pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_av__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<av__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(av__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<av__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(av__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
}
impl ::std::fmt::Debug for av__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "av__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_av() {
    assert_eq!(
        ::std::mem::size_of::<av>(),
        24usize,
        concat!("Size of: ", stringify!(av))
    );
    assert_eq!(
        ::std::mem::align_of::<av>(),
        8usize,
        concat!("Alignment of ", stringify!(av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(av), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for av {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "av {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hv {
    pub sv_any: *mut XPVHV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: hv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union hv__bindgen_ty_1 { pub svu_iv : IV , pub svu_uv : UV , pub svu_rv : * mut SV , pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_hv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(hv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
}
impl ::std::fmt::Debug for hv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "hv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_hv() {
    assert_eq!(
        ::std::mem::size_of::<hv>(),
        24usize,
        concat!("Size of: ", stringify!(hv))
    );
    assert_eq!(
        ::std::mem::align_of::<hv>(),
        8usize,
        concat!("Alignment of ", stringify!(hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(hv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for hv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "hv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io {
    pub sv_any: *mut XPVIO,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: io__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union io__bindgen_ty_1 { pub svu_iv : IV , pub svu_uv : UV , pub svu_rv : * mut SV , pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_io__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<io__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(io__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
}
impl ::std::fmt::Debug for io__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "io__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_io() {
    assert_eq!(
        ::std::mem::size_of::<io>(),
        24usize,
        concat!("Size of: ", stringify!(io))
    );
    assert_eq!(
        ::std::mem::align_of::<io>(),
        8usize,
        concat!("Alignment of ", stringify!(io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(io), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for io {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "io {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvgv {
    pub xnv_u: xpvgv__bindgen_ty_1,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_u: xpvgv__bindgen_ty_2,
    pub xmg_u: xpvgv__bindgen_ty_3,
    pub xmg_stash: *mut HV,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvgv__bindgen_ty_1 { pub xnv_nv : NV , pub xgv_stash : * mut HV , pub xpad_cop_seq : xpvgv__bindgen_ty_1__bindgen_ty_1 , pub xbm_s : xpvgv__bindgen_ty_1__bindgen_ty_2 , _bindgen_union_align : u64 , }#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvgv__bindgen_ty_1__bindgen_ty_1 {
    pub xlow: U32,
    pub xhigh: U32,
}
#[test]
fn bindgen_test_layout_xpvgv__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvgv__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvgv__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1__bindgen_ty_1>())).xlow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xlow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1__bindgen_ty_1>())).xhigh as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xhigh)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvgv__bindgen_ty_1__bindgen_ty_2 {
    pub xbm_previous: U32,
    pub xbm_flags: U8,
    pub xbm_rare: U8,
}
#[test]
fn bindgen_test_layout_xpvgv__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvgv__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvgv__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1__bindgen_ty_2>())).xbm_previous as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_previous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1__bindgen_ty_2>())).xbm_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1__bindgen_ty_2>())).xbm_rare as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_rare)
        )
    );
}
#[test]
fn bindgen_test_layout_xpvgv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvgv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1>())).xnv_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1>())).xgv_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1),
            "::",
            stringify!(xgv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1>())).xpad_cop_seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1),
            "::",
            stringify!(xpad_cop_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1>())).xbm_s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1),
            "::",
            stringify!(xbm_s)
        )
    );
}
impl ::std::fmt::Debug for xpvgv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvgv__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvgv__bindgen_ty_2 { pub xivu_iv : IV , pub xivu_uv : UV , pub xivu_p1 : * mut :: std :: os :: raw :: c_void , pub xivu_i32 : I32 , pub xivu_namehek : * mut HEK , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvgv__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvgv__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_2>())).xivu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_2),
            "::",
            stringify!(xivu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_2>())).xivu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_2),
            "::",
            stringify!(xivu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_2>())).xivu_p1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_2),
            "::",
            stringify!(xivu_p1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_2>())).xivu_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_2),
            "::",
            stringify!(xivu_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_2>())).xivu_namehek as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_2),
            "::",
            stringify!(xivu_namehek)
        )
    );
}
impl ::std::fmt::Debug for xpvgv__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvgv__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvgv__bindgen_ty_3 { pub xmg_magic : * mut MAGIC , pub xmg_ourstash : * mut HV , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvgv__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(xpvgv__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_3>())).xmg_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_3),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_3>())).xmg_ourstash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_3),
            "::",
            stringify!(xmg_ourstash)
        )
    );
}
impl ::std::fmt::Debug for xpvgv__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvgv__bindgen_ty_3 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvgv() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv>(),
        48usize,
        concat!("Size of: ", stringify!(xpvgv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xnv_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xnv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xiv_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xiv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_stash as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_stash)
        )
    );
}
impl ::std::fmt::Debug for xpvgv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvgv {{ xnv_u: {:?}, xpv_cur: {:?}, xpv_len: {:?}, xiv_u: {:?}, xmg_u: {:?}, xmg_stash: {:?} }}",
            self.xnv_u,
            self.xpv_cur,
            self.xpv_len,
            self.xiv_u,
            self.xmg_u,
            self.xmg_stash
        )
    }
}
pub type cv_flags_t = U16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvio {
    pub xnv_u: xpvio__bindgen_ty_1,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_u: xpvio__bindgen_ty_2,
    pub xmg_u: xpvio__bindgen_ty_3,
    pub xmg_stash: *mut HV,
    pub xio_ifp: *mut PerlIO,
    pub xio_ofp: *mut PerlIO,
    pub xio_dirpu: xpvio__bindgen_ty_4,
    pub xio_lines: IV,
    pub xio_page: IV,
    pub xio_page_len: IV,
    pub xio_lines_left: IV,
    pub xio_top_name: *mut ::std::os::raw::c_char,
    pub xio_top_gv: *mut GV,
    pub xio_fmt_name: *mut ::std::os::raw::c_char,
    pub xio_fmt_gv: *mut GV,
    pub xio_bottom_name: *mut ::std::os::raw::c_char,
    pub xio_bottom_gv: *mut GV,
    pub xio_type: ::std::os::raw::c_char,
    pub xio_flags: U8,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvio__bindgen_ty_1 { pub xnv_nv : NV , pub xgv_stash : * mut HV , pub xpad_cop_seq : xpvio__bindgen_ty_1__bindgen_ty_1 , pub xbm_s : xpvio__bindgen_ty_1__bindgen_ty_2 , _bindgen_union_align : u64 , }#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvio__bindgen_ty_1__bindgen_ty_1 {
    pub xlow: U32,
    pub xhigh: U32,
}
#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvio__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1__bindgen_ty_1>())).xlow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xlow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1__bindgen_ty_1>())).xhigh as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xhigh)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvio__bindgen_ty_1__bindgen_ty_2 {
    pub xbm_previous: U32,
    pub xbm_flags: U8,
    pub xbm_rare: U8,
}
#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvio__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1__bindgen_ty_2>())).xbm_previous as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_previous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1__bindgen_ty_2>())).xbm_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1__bindgen_ty_2>())).xbm_rare as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_rare)
        )
    );
}
#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xnv_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xgv_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xgv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xpad_cop_seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xpad_cop_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xbm_s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xbm_s)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvio__bindgen_ty_2 { pub xivu_iv : IV , pub xivu_uv : UV , pub xivu_p1 : * mut :: std :: os :: raw :: c_void , pub xivu_i32 : I32 , pub xivu_namehek : * mut HEK , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_2>())).xivu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_2),
            "::",
            stringify!(xivu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_2>())).xivu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_2),
            "::",
            stringify!(xivu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_2>())).xivu_p1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_2),
            "::",
            stringify!(xivu_p1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_2>())).xivu_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_2),
            "::",
            stringify!(xivu_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_2>())).xivu_namehek as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_2),
            "::",
            stringify!(xivu_namehek)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvio__bindgen_ty_3 { pub xmg_magic : * mut MAGIC , pub xmg_ourstash : * mut HV , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_3>())).xmg_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_3),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_3>())).xmg_ourstash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_3),
            "::",
            stringify!(xmg_ourstash)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_3 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvio__bindgen_ty_4 { pub xiou_dirp : * mut DIR , pub xiou_any : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_4>())).xiou_dirp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_4),
            "::",
            stringify!(xiou_dirp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_4>())).xiou_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_4),
            "::",
            stringify!(xiou_any)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_4 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvio() {
    assert_eq!(
        ::std::mem::size_of::<xpvio>(),
        160usize,
        concat!("Size of: ", stringify!(xpvio))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xnv_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xnv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xiv_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xiv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_stash as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_ifp as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_ifp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_ofp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_ofp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_dirpu as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_dirpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_lines as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page_len as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_lines_left as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_lines_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_name as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_gv as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_name as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_gv as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_name as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_gv as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_type as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_flags as *const _ as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_flags)
        )
    );
}
impl ::std::fmt::Debug for xpvio {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvio {{ xnv_u: {:?}, xpv_cur: {:?}, xpv_len: {:?}, xiv_u: {:?}, xmg_u: {:?}, xmg_stash: {:?}, xio_ifp: {:?}, xio_ofp: {:?}, xio_dirpu: {:?}, xio_lines: {:?}, xio_page: {:?}, xio_page_len: {:?}, xio_lines_left: {:?}, xio_top_name: {:?}, xio_top_gv: {:?}, xio_fmt_name: {:?}, xio_fmt_gv: {:?}, xio_bottom_name: {:?}, xio_bottom_gv: {:?}, xio_type: {:?}, xio_flags: {:?} }}",
            self.xnv_u,
            self.xpv_cur,
            self.xpv_len,
            self.xiv_u,
            self.xmg_u,
            self.xmg_stash,
            self.xio_ifp,
            self.xio_ofp,
            self.xio_dirpu,
            self.xio_lines,
            self.xio_page,
            self.xio_page_len,
            self.xio_lines_left,
            self.xio_top_name,
            self.xio_top_gv,
            self.xio_fmt_name,
            self.xio_fmt_gv,
            self.xio_bottom_name,
            self.xio_bottom_gv,
            self.xio_type,
            self.xio_flags
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clone_params {
    pub stashes: *mut AV,
    pub flags: UV,
    pub proto_perl: *mut PerlInterpreter,
}
#[test]
fn bindgen_test_layout_clone_params() {
    assert_eq!(
        ::std::mem::size_of::<clone_params>(),
        24usize,
        concat!("Size of: ", stringify!(clone_params))
    );
    assert_eq!(
        ::std::mem::align_of::<clone_params>(),
        8usize,
        concat!("Alignment of ", stringify!(clone_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).stashes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(stashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).proto_perl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(proto_perl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gp {
    pub gp_sv: *mut SV,
    pub gp_io: *mut io,
    pub gp_cv: *mut CV,
    pub gp_cvgen: U32,
    pub gp_refcnt: U32,
    pub gp_hv: *mut HV,
    pub gp_av: *mut AV,
    pub gp_form: *mut CV,
    pub gp_egv: *mut GV,
    pub gp_line: line_t,
    pub gp_file_hek: *mut HEK,
}
#[test]
fn bindgen_test_layout_gp() {
    assert_eq!(
        ::std::mem::size_of::<gp>(),
        80usize,
        concat!("Size of: ", stringify!(gp))
    );
    assert_eq!(
        ::std::mem::align_of::<gp>(),
        8usize,
        concat!("Alignment of ", stringify!(gp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_sv as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_io as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cv as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cvgen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_cvgen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_refcnt as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_hv as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_av as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_form as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_egv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_egv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_line as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_file_hek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_file_hek)
        )
    );
}
pub type PADLIST = AV;
pub type PADOFFSET = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvcv {
    pub xnv_u: xpvcv__bindgen_ty_1,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_u: xpvcv__bindgen_ty_2,
    pub xmg_u: xpvcv__bindgen_ty_3,
    pub xmg_stash: *mut HV,
    pub xcv_stash: *mut HV,
    pub xcv_start_u: xpvcv__bindgen_ty_4,
    pub xcv_root_u: xpvcv__bindgen_ty_5,
    pub xcv_gv: *mut GV,
    pub xcv_file: *mut ::std::os::raw::c_char,
    pub xcv_padlist: *mut PADLIST,
    pub xcv_outside: *mut CV,
    pub xcv_outside_seq: U32,
    pub xcv_flags: cv_flags_t,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_1 { pub xnv_nv : NV , pub xgv_stash : * mut HV , pub xpad_cop_seq : xpvcv__bindgen_ty_1__bindgen_ty_1 , pub xbm_s : xpvcv__bindgen_ty_1__bindgen_ty_2 , _bindgen_union_align : u64 , }#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvcv__bindgen_ty_1__bindgen_ty_1 {
    pub xlow: U32,
    pub xhigh: U32,
}
#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvcv__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1__bindgen_ty_1>())).xlow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xlow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1__bindgen_ty_1>())).xhigh as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xhigh)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvcv__bindgen_ty_1__bindgen_ty_2 {
    pub xbm_previous: U32,
    pub xbm_flags: U8,
    pub xbm_rare: U8,
}
#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvcv__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1__bindgen_ty_2>())).xbm_previous as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_previous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1__bindgen_ty_2>())).xbm_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1__bindgen_ty_2>())).xbm_rare as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_rare)
        )
    );
}
#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1>())).xnv_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1>())).xgv_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1),
            "::",
            stringify!(xgv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1>())).xpad_cop_seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1),
            "::",
            stringify!(xpad_cop_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1>())).xbm_s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1),
            "::",
            stringify!(xbm_s)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_2 { pub xivu_iv : IV , pub xivu_uv : UV , pub xivu_p1 : * mut :: std :: os :: raw :: c_void , pub xivu_i32 : I32 , pub xivu_namehek : * mut HEK , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_2>())).xivu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_2),
            "::",
            stringify!(xivu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_2>())).xivu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_2),
            "::",
            stringify!(xivu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_2>())).xivu_p1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_2),
            "::",
            stringify!(xivu_p1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_2>())).xivu_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_2),
            "::",
            stringify!(xivu_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_2>())).xivu_namehek as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_2),
            "::",
            stringify!(xivu_namehek)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_3 { pub xmg_magic : * mut MAGIC , pub xmg_ourstash : * mut HV , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_3>())).xmg_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_3),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_3>())).xmg_ourstash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_3),
            "::",
            stringify!(xmg_ourstash)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_3 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_4 { pub xcv_start : * mut OP , pub xcv_xsubany : ANY , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_4>())).xcv_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_4),
            "::",
            stringify!(xcv_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_4>())).xcv_xsubany as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_4),
            "::",
            stringify!(xcv_xsubany)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_4 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_5 { pub xcv_root : * mut OP , pub xcv_xsub : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut CV ) > , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_5>())).xcv_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_5),
            "::",
            stringify!(xcv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_5>())).xcv_xsub as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_5),
            "::",
            stringify!(xcv_xsub)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_5 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_5 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvcv() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv>(),
        112usize,
        concat!("Size of: ", stringify!(xpvcv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xnv_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xnv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xiv_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xiv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_stash as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_start_u as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_start_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_root_u as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_root_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_gv as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_file as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_padlist as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_padlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside_seq as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_flags as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_flags)
        )
    );
}
impl ::std::fmt::Debug for xpvcv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvcv {{ xnv_u: {:?}, xpv_cur: {:?}, xpv_len: {:?}, xiv_u: {:?}, xmg_u: {:?}, xmg_stash: {:?}, xcv_stash: {:?}, xcv_start_u: {:?}, xcv_root_u: {:?}, xcv_gv: {:?}, xcv_file: {:?}, xcv_padlist: {:?}, xcv_outside: {:?}, xcv_outside_seq: {:?}, xcv_flags: {:?} }}",
            self.xnv_u,
            self.xpv_cur,
            self.xpv_len,
            self.xiv_u,
            self.xmg_u,
            self.xmg_stash,
            self.xcv_stash,
            self.xcv_start_u,
            self.xcv_root_u,
            self.xcv_gv,
            self.xcv_file,
            self.xcv_padlist,
            self.xcv_outside,
            self.xcv_outside_seq,
            self.xcv_flags
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct op {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn() -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub op_flags: U8,
    pub op_private: U8,
}
#[test]
fn bindgen_test_layout_op() {
    assert_eq!(
        ::std::mem::size_of::<op>(),
        40usize,
        concat!("Size of: ", stringify!(op))
    );
    assert_eq!(
        ::std::mem::align_of::<op>(),
        8usize,
        concat!("Alignment of ", stringify!(op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_flags as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_private as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_private)
        )
    );
}
impl op {
    #[inline]
    pub fn op_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_op_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn op_opt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_opt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_latefree(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_latefree(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_latefreed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_latefreed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_attached(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_attached(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_spare(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_op_spare(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(op_type: ::std::os::raw::c_uint, op_opt: ::std::os::raw::c_uint, op_latefree: ::std::os::raw::c_uint, op_latefreed: ::std::os::raw::c_uint, op_attached: ::std::os::raw::c_uint, op_spare: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let op_type: u32 = unsafe { ::std::mem::transmute(op_type) };
            op_type as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let op_opt: u32 = unsafe { ::std::mem::transmute(op_opt) };
            op_opt as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let op_latefree: u32 = unsafe { ::std::mem::transmute(op_latefree) };
            op_latefree as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let op_latefreed: u32 = unsafe { ::std::mem::transmute(op_latefreed) };
            op_latefreed as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let op_attached: u32 = unsafe { ::std::mem::transmute(op_attached) };
            op_attached as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let op_spare: u32 = unsafe { ::std::mem::transmute(op_spare) };
            op_spare as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct he {
    pub hent_next: *mut HE,
    pub hent_hek: *mut HEK,
    pub he_valu: he__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union he__bindgen_ty_1 { pub hent_val : * mut SV , pub hent_refcount : usize , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_he__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<he__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(he__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<he__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(he__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he__bindgen_ty_1>())).hent_val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he__bindgen_ty_1),
            "::",
            stringify!(hent_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he__bindgen_ty_1>())).hent_refcount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he__bindgen_ty_1),
            "::",
            stringify!(hent_refcount)
        )
    );
}
impl ::std::fmt::Debug for he__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "he__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_he() {
    assert_eq!(
        ::std::mem::size_of::<he>(),
        24usize,
        concat!("Size of: ", stringify!(he))
    );
    assert_eq!(
        ::std::mem::align_of::<he>(),
        8usize,
        concat!("Alignment of ", stringify!(he))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_hek as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_hek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).he_valu as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(he_valu)
        )
    );
}
impl ::std::fmt::Debug for he {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "he {{ hent_next: {:?}, hent_hek: {:?}, he_valu: {:?} }}",
            self.hent_next,
            self.hent_hek,
            self.he_valu
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hek {
    pub hek_hash: U32,
    pub hek_len: I32,
    pub hek_key: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_hek() {
    assert_eq!(
        ::std::mem::size_of::<hek>(),
        12usize,
        concat!("Size of: ", stringify!(hek))
    );
    assert_eq!(
        ::std::mem::align_of::<hek>(),
        4usize,
        concat!("Alignment of ", stringify!(hek))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_key)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvhv {
    pub xnv_u: xpvhv__bindgen_ty_1,
    pub xhv_fill: STRLEN,
    pub xhv_max: STRLEN,
    pub xiv_u: xpvhv__bindgen_ty_2,
    pub xmg_u: xpvhv__bindgen_ty_3,
    pub xmg_stash: *mut HV,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvhv__bindgen_ty_1 { pub xnv_nv : NV , pub xgv_stash : * mut HV , pub xpad_cop_seq : xpvhv__bindgen_ty_1__bindgen_ty_1 , pub xbm_s : xpvhv__bindgen_ty_1__bindgen_ty_2 , _bindgen_union_align : u64 , }#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvhv__bindgen_ty_1__bindgen_ty_1 {
    pub xlow: U32,
    pub xhigh: U32,
}
#[test]
fn bindgen_test_layout_xpvhv__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvhv__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvhv__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_1__bindgen_ty_1>())).xlow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xlow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_1__bindgen_ty_1>())).xhigh as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xhigh)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvhv__bindgen_ty_1__bindgen_ty_2 {
    pub xbm_previous: U32,
    pub xbm_flags: U8,
    pub xbm_rare: U8,
}
#[test]
fn bindgen_test_layout_xpvhv__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvhv__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvhv__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_1__bindgen_ty_2>())).xbm_previous as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_previous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_1__bindgen_ty_2>())).xbm_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_1__bindgen_ty_2>())).xbm_rare as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_rare)
        )
    );
}
#[test]
fn bindgen_test_layout_xpvhv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvhv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvhv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_1>())).xnv_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_1),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_1>())).xgv_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_1),
            "::",
            stringify!(xgv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_1>())).xpad_cop_seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_1),
            "::",
            stringify!(xpad_cop_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_1>())).xbm_s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_1),
            "::",
            stringify!(xbm_s)
        )
    );
}
impl ::std::fmt::Debug for xpvhv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvhv__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvhv__bindgen_ty_2 { pub xivu_iv : IV , pub xivu_uv : UV , pub xivu_p1 : * mut :: std :: os :: raw :: c_void , pub xivu_i32 : I32 , pub xivu_namehek : * mut HEK , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvhv__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvhv__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvhv__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_2>())).xivu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_2),
            "::",
            stringify!(xivu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_2>())).xivu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_2),
            "::",
            stringify!(xivu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_2>())).xivu_p1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_2),
            "::",
            stringify!(xivu_p1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_2>())).xivu_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_2),
            "::",
            stringify!(xivu_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_2>())).xivu_namehek as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_2),
            "::",
            stringify!(xivu_namehek)
        )
    );
}
impl ::std::fmt::Debug for xpvhv__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvhv__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvhv__bindgen_ty_3 { pub xmg_magic : * mut MAGIC , pub xmg_ourstash : * mut HV , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvhv__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(xpvhv__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvhv__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_3>())).xmg_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_3),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv__bindgen_ty_3>())).xmg_ourstash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv__bindgen_ty_3),
            "::",
            stringify!(xmg_ourstash)
        )
    );
}
impl ::std::fmt::Debug for xpvhv__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvhv__bindgen_ty_3 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvhv() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv>(),
        48usize,
        concat!("Size of: ", stringify!(xpvhv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvhv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xnv_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xnv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_fill as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xiv_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xiv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_stash as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_stash)
        )
    );
}
impl ::std::fmt::Debug for xpvhv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvhv {{ xnv_u: {:?}, xhv_fill: {:?}, xhv_max: {:?}, xiv_u: {:?}, xmg_u: {:?}, xmg_stash: {:?} }}",
            self.xnv_u,
            self.xhv_fill,
            self.xhv_max,
            self.xiv_u,
            self.xmg_u,
            self.xmg_stash
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvav {
    pub xnv_u: xpvav__bindgen_ty_1,
    pub xav_fill: isize,
    pub xav_max: isize,
    pub xiv_u: xpvav__bindgen_ty_2,
    pub xmg_u: xpvav__bindgen_ty_3,
    pub xmg_stash: *mut HV,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvav__bindgen_ty_1 { pub xnv_nv : NV , pub xgv_stash : * mut HV , pub xpad_cop_seq : xpvav__bindgen_ty_1__bindgen_ty_1 , pub xbm_s : xpvav__bindgen_ty_1__bindgen_ty_2 , _bindgen_union_align : u64 , }#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvav__bindgen_ty_1__bindgen_ty_1 {
    pub xlow: U32,
    pub xhigh: U32,
}
#[test]
fn bindgen_test_layout_xpvav__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvav__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvav__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvav__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_1__bindgen_ty_1>())).xlow as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xlow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_1__bindgen_ty_1>())).xhigh as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xhigh)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvav__bindgen_ty_1__bindgen_ty_2 {
    pub xbm_previous: U32,
    pub xbm_flags: U8,
    pub xbm_rare: U8,
}
#[test]
fn bindgen_test_layout_xpvav__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvav__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvav__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xpvav__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_1__bindgen_ty_2>())).xbm_previous as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_previous)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_1__bindgen_ty_2>())).xbm_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_1__bindgen_ty_2>())).xbm_rare as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xbm_rare)
        )
    );
}
#[test]
fn bindgen_test_layout_xpvav__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvav__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvav__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvav__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_1>())).xnv_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_1),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_1>())).xgv_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_1),
            "::",
            stringify!(xgv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_1>())).xpad_cop_seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_1),
            "::",
            stringify!(xpad_cop_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_1>())).xbm_s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_1),
            "::",
            stringify!(xbm_s)
        )
    );
}
impl ::std::fmt::Debug for xpvav__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvav__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvav__bindgen_ty_2 { pub xivu_iv : IV , pub xivu_uv : UV , pub xivu_p1 : * mut :: std :: os :: raw :: c_void , pub xivu_i32 : I32 , pub xivu_namehek : * mut HEK , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvav__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvav__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvav__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvav__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_2>())).xivu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_2),
            "::",
            stringify!(xivu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_2>())).xivu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_2),
            "::",
            stringify!(xivu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_2>())).xivu_p1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_2),
            "::",
            stringify!(xivu_p1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_2>())).xivu_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_2),
            "::",
            stringify!(xivu_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_2>())).xivu_namehek as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_2),
            "::",
            stringify!(xivu_namehek)
        )
    );
}
impl ::std::fmt::Debug for xpvav__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvav__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvav__bindgen_ty_3 { pub xmg_magic : * mut MAGIC , pub xmg_ourstash : * mut HV , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvav__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xpvav__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(xpvav__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvav__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_3>())).xmg_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_3),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav__bindgen_ty_3>())).xmg_ourstash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav__bindgen_ty_3),
            "::",
            stringify!(xmg_ourstash)
        )
    );
}
impl ::std::fmt::Debug for xpvav__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvav__bindgen_ty_3 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvav() {
    assert_eq!(
        ::std::mem::size_of::<xpvav>(),
        48usize,
        concat!("Size of: ", stringify!(xpvav))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvav))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xnv_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xnv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_fill as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xiv_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xiv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_stash as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_stash)
        )
    );
}
impl ::std::fmt::Debug for xpvav {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvav {{ xnv_u: {:?}, xav_fill: {:?}, xav_max: {:?}, xiv_u: {:?}, xmg_u: {:?}, xmg_stash: {:?} }}",
            self.xnv_u,
            self.xav_fill,
            self.xav_max,
            self.xiv_u,
            self.xmg_u,
            self.xmg_stash
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mgvtbl {
    pub svt_get: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_set: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_len: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> U32>,
    pub svt_clear: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_free: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_copy: ::std::option::Option<
        unsafe extern "C" fn(sv: *mut SV,
                             mg: *mut MAGIC,
                             nsv: *mut SV,
                             name: *const ::std::os::raw::c_char,
                             namlen: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub svt_dup: ::std::option::Option<unsafe extern "C" fn(mg: *mut MAGIC, param: *mut CLONE_PARAMS) -> ::std::os::raw::c_int>,
    pub svt_local: ::std::option::Option<unsafe extern "C" fn(nsv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_mgvtbl() {
    assert_eq!(
        ::std::mem::size_of::<mgvtbl>(),
        64usize,
        concat!("Size of: ", stringify!(mgvtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<mgvtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(mgvtbl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_get as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_set as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_clear as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_copy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_dup as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_dup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_local as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_local)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct magic {
    pub mg_moremagic: *mut MAGIC,
    pub mg_virtual: *mut MGVTBL,
    pub mg_private: U16,
    pub mg_type: ::std::os::raw::c_char,
    pub mg_flags: U8,
    pub mg_len: I32,
    pub mg_obj: *mut SV,
    pub mg_ptr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_magic() {
    assert_eq!(
        ::std::mem::size_of::<magic>(),
        40usize,
        concat!("Size of: ", stringify!(magic))
    );
    assert_eq!(
        ::std::mem::align_of::<magic>(),
        8usize,
        concat!("Alignment of ", stringify!(magic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_moremagic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_moremagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_virtual as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_virtual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_private as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_type as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_flags as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_len as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_obj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_ptr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct interpreter {
    pub broiled: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_interpreter() {
    assert_eq!(
        ::std::mem::size_of::<interpreter>(),
        1usize,
        concat!("Size of: ", stringify!(interpreter))
    );
    assert_eq!(
        ::std::mem::align_of::<interpreter>(),
        1usize,
        concat!("Alignment of ", stringify!(interpreter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).broiled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(broiled)
        )
    );
}
