/* automatically generated by rust-bindgen */

pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl ::std::fmt::Debug for _opaque_pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "_opaque_pthread_mutex_t {{ __sig: {:?}, __opaque: [{}] }}",
            self.__sig,
            self.__opaque
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __dd_rewind: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
#[test]
fn bindgen_test_layout_DIR() {
    assert_eq!(
        ::std::mem::size_of::<DIR>(),
        136usize,
        concat!("Size of: ", stringify!(DIR))
    );
    assert_eq!(
        ::std::mem::align_of::<DIR>(),
        8usize,
        concat!("Alignment of ", stringify!(DIR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_loc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_rewind as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_rewind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_lock as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_td as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_td)
        )
    );
}
impl ::std::fmt::Debug for DIR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "DIR {{ __dd_fd: {:?}, __dd_loc: {:?}, __dd_size: {:?}, __dd_buf: {:?}, __dd_len: {:?}, __dd_seek: {:?}, __dd_rewind: {:?}, __dd_flags: {:?}, __dd_lock: {:?}, __dd_td: {:?} }}",
            self.__dd_fd,
            self.__dd_loc,
            self.__dd_size,
            self.__dd_buf,
            self.__dd_len,
            self.__dd_seek,
            self.__dd_rewind,
            self.__dd_flags,
            self.__dd_lock,
            self.__dd_td
        )
    }
}
pub type IV = ::std::os::raw::c_long;
pub type UV = ::std::os::raw::c_ulong;
pub type NV = f64;
pub type STRLEN = usize;
pub type OP = op;
pub type PMOP = pmop;
pub type PerlInterpreter = interpreter;
pub type SV = sv;
pub type AV = av;
pub type HV = hv;
pub type CV = cv;
pub type REGEXP = regexp;
pub type GP = gp;
pub type GV = gv;
pub type MAGIC = magic;
pub type XPVAV = xpvav;
pub type XPVHV = xpvhv;
pub type XPVGV = xpvgv;
pub type XPVCV = xpvcv;
pub type XPVIO = xpvio;
pub type MGVTBL = mgvtbl;
pub type ANY = any;
pub type CLONE_PARAMS = clone_params;
pub type U8 = ::std::os::raw::c_uchar;
pub type U16 = ::std::os::raw::c_ushort;
pub type I32 = ::std::os::raw::c_int;
pub type U32 = ::std::os::raw::c_uint;
pub type line_t = U32;
#[repr(C)]
#[derive(Copy, Clone)]pub union any { pub any_ptr : * mut :: std :: os :: raw :: c_void , pub any_i32 : I32 , pub any_iv : IV , pub any_long : :: std :: os :: raw :: c_long , pub any_bool : :: std :: os :: raw :: c_char , pub any_dptr : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , pub any_dxptr : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_any() {
    assert_eq!(
        ::std::mem::size_of::<any>(),
        8usize,
        concat!("Size of: ", stringify!(any))
    );
    assert_eq!(
        ::std::mem::align_of::<any>(),
        8usize,
        concat!("Alignment of ", stringify!(any))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_long as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_bool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dxptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dxptr)
        )
    );
}
impl ::std::fmt::Debug for any {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "any {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PerlIO {
    _unused: [u8; 0],
}
pub type PerlIOl = _PerlIO;
pub type PerlIO = *mut PerlIOl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regnode {
    pub flags: U8,
    pub type_: U8,
    pub next_off: U16,
}
#[test]
fn bindgen_test_layout_regnode() {
    assert_eq!(
        ::std::mem::size_of::<regnode>(),
        4usize,
        concat!("Size of: ", stringify!(regnode))
    );
    assert_eq!(
        ::std::mem::align_of::<regnode>(),
        2usize,
        concat!("Alignment of ", stringify!(regnode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regnode>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regnode),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regnode>())).type_ as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(regnode),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regnode>())).next_off as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(regnode),
            "::",
            stringify!(next_off)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_substr_datum {
    pub min_offset: I32,
    pub max_offset: I32,
    pub substr: *mut SV,
    pub utf8_substr: *mut SV,
}
#[test]
fn bindgen_test_layout_reg_substr_datum() {
    assert_eq!(
        ::std::mem::size_of::<reg_substr_datum>(),
        24usize,
        concat!("Size of: ", stringify!(reg_substr_datum))
    );
    assert_eq!(
        ::std::mem::align_of::<reg_substr_datum>(),
        8usize,
        concat!("Alignment of ", stringify!(reg_substr_datum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).min_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(min_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).max_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(max_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).substr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(substr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).utf8_substr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(utf8_substr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_substr_data {
    pub data: [reg_substr_datum; 3usize],
}
#[test]
fn bindgen_test_layout_reg_substr_data() {
    assert_eq!(
        ::std::mem::size_of::<reg_substr_data>(),
        72usize,
        concat!("Size of: ", stringify!(reg_substr_data))
    );
    assert_eq!(
        ::std::mem::align_of::<reg_substr_data>(),
        8usize,
        concat!("Alignment of ", stringify!(reg_substr_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_data>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regexp {
    pub startp: *mut I32,
    pub endp: *mut I32,
    pub regstclass: *mut regnode,
    pub substrs: *mut reg_substr_data,
    pub precomp: *mut ::std::os::raw::c_char,
    pub data: *mut reg_data,
    pub subbeg: *mut ::std::os::raw::c_char,
    pub offsets: *mut U32,
    pub sublen: I32,
    pub refcnt: I32,
    pub minlen: I32,
    pub prelen: I32,
    pub nparens: U32,
    pub lastparen: U32,
    pub lastcloseparen: U32,
    pub reganch: U32,
    pub program: [regnode; 1usize],
}
#[test]
fn bindgen_test_layout_regexp() {
    assert_eq!(
        ::std::mem::size_of::<regexp>(),
        104usize,
        concat!("Size of: ", stringify!(regexp))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).startp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(startp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).endp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(endp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).regstclass as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(regstclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).substrs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(substrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).precomp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(precomp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).data as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).subbeg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(subbeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).offsets as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).sublen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(sublen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).refcnt as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).minlen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(minlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).prelen as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(prelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).nparens as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(nparens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).lastparen as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(lastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).lastcloseparen as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(lastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).reganch as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(reganch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).program as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(program)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sv {
    pub sv_any: *mut ::std::os::raw::c_void,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_sv() {
    assert_eq!(
        ::std::mem::size_of::<sv>(),
        16usize,
        concat!("Size of: ", stringify!(sv))
    );
    assert_eq!(
        ::std::mem::align_of::<sv>(),
        8usize,
        concat!("Alignment of ", stringify!(sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gv {
    pub sv_any: *mut XPVGV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_gv() {
    assert_eq!(
        ::std::mem::size_of::<gv>(),
        16usize,
        concat!("Size of: ", stringify!(gv))
    );
    assert_eq!(
        ::std::mem::align_of::<gv>(),
        8usize,
        concat!("Alignment of ", stringify!(gv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cv {
    pub sv_any: *mut XPVCV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_cv() {
    assert_eq!(
        ::std::mem::size_of::<cv>(),
        16usize,
        concat!("Size of: ", stringify!(cv))
    );
    assert_eq!(
        ::std::mem::align_of::<cv>(),
        8usize,
        concat!("Alignment of ", stringify!(cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct av {
    pub sv_any: *mut XPVAV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_av() {
    assert_eq!(
        ::std::mem::size_of::<av>(),
        16usize,
        concat!("Size of: ", stringify!(av))
    );
    assert_eq!(
        ::std::mem::align_of::<av>(),
        8usize,
        concat!("Alignment of ", stringify!(av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hv {
    pub sv_any: *mut XPVHV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_hv() {
    assert_eq!(
        ::std::mem::size_of::<hv>(),
        16usize,
        concat!("Size of: ", stringify!(hv))
    );
    assert_eq!(
        ::std::mem::align_of::<hv>(),
        8usize,
        concat!("Alignment of ", stringify!(hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io {
    pub sv_any: *mut XPVIO,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
}
#[test]
fn bindgen_test_layout_io() {
    assert_eq!(
        ::std::mem::size_of::<io>(),
        16usize,
        concat!("Size of: ", stringify!(io))
    );
    assert_eq!(
        ::std::mem::align_of::<io>(),
        8usize,
        concat!("Alignment of ", stringify!(io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvgv {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_iv: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xgv_gp: *mut GP,
    pub xgv_name: *mut ::std::os::raw::c_char,
    pub xgv_namelen: STRLEN,
    pub xgv_stash: *mut HV,
    pub xgv_flags: U8,
}
#[test]
fn bindgen_test_layout_xpvgv() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv>(),
        96usize,
        concat!("Size of: ", stringify!(xpvgv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xiv_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xiv_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_gp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_name as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_namelen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_stash as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xgv_flags as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xgv_flags)
        )
    );
}
pub type cv_flags_t = U16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvio {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xiv_iv: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xio_ifp: *mut PerlIO,
    pub xio_ofp: *mut PerlIO,
    pub xio_dirpu: xpvio__bindgen_ty_1,
    pub xio_lines: IV,
    pub xio_page: IV,
    pub xio_page_len: IV,
    pub xio_lines_left: IV,
    pub xio_top_name: *mut ::std::os::raw::c_char,
    pub xio_top_gv: *mut GV,
    pub xio_fmt_name: *mut ::std::os::raw::c_char,
    pub xio_fmt_gv: *mut GV,
    pub xio_bottom_name: *mut ::std::os::raw::c_char,
    pub xio_bottom_gv: *mut GV,
    pub xio_subprocess: ::std::os::raw::c_short,
    pub xio_type: ::std::os::raw::c_char,
    pub xio_flags: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvio__bindgen_ty_1 { pub xiou_dirp : * mut DIR , pub xiou_any : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xiou_dirp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xiou_dirp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xiou_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xiou_any)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvio() {
    assert_eq!(
        ::std::mem::size_of::<xpvio>(),
        168usize,
        concat!("Size of: ", stringify!(xpvio))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xiv_iv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xiv_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_ifp as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_ifp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_ofp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_ofp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_dirpu as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_dirpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_lines as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page_len as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_lines_left as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_lines_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_name as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_gv as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_name as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_gv as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_name as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_gv as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_subprocess as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_subprocess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_type as *const _ as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_flags as *const _ as usize },
        163usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_flags)
        )
    );
}
impl ::std::fmt::Debug for xpvio {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvio {{ xpv_pv: {:?}, xpv_cur: {:?}, xpv_len: {:?}, xiv_iv: {:?}, xnv_nv: {:?}, xmg_magic: {:?}, xmg_stash: {:?}, xio_ifp: {:?}, xio_ofp: {:?}, xio_dirpu: {:?}, xio_lines: {:?}, xio_page: {:?}, xio_page_len: {:?}, xio_lines_left: {:?}, xio_top_name: {:?}, xio_top_gv: {:?}, xio_fmt_name: {:?}, xio_fmt_gv: {:?}, xio_bottom_name: {:?}, xio_bottom_gv: {:?}, xio_subprocess: {:?}, xio_type: {:?}, xio_flags: {:?} }}",
            self.xpv_pv,
            self.xpv_cur,
            self.xpv_len,
            self.xiv_iv,
            self.xnv_nv,
            self.xmg_magic,
            self.xmg_stash,
            self.xio_ifp,
            self.xio_ofp,
            self.xio_dirpu,
            self.xio_lines,
            self.xio_page,
            self.xio_page_len,
            self.xio_lines_left,
            self.xio_top_name,
            self.xio_top_gv,
            self.xio_fmt_name,
            self.xio_fmt_gv,
            self.xio_bottom_name,
            self.xio_bottom_gv,
            self.xio_subprocess,
            self.xio_type,
            self.xio_flags
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clone_params {
    pub stashes: *mut AV,
    pub flags: UV,
    pub proto_perl: *mut PerlInterpreter,
}
#[test]
fn bindgen_test_layout_clone_params() {
    assert_eq!(
        ::std::mem::size_of::<clone_params>(),
        24usize,
        concat!("Size of: ", stringify!(clone_params))
    );
    assert_eq!(
        ::std::mem::align_of::<clone_params>(),
        8usize,
        concat!("Alignment of ", stringify!(clone_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).stashes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(stashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).proto_perl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(proto_perl)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gp {
    pub gp_sv: *mut SV,
    pub gp_refcnt: U32,
    pub gp_io: *mut io,
    pub gp_form: *mut CV,
    pub gp_av: *mut AV,
    pub gp_hv: *mut HV,
    pub gp_egv: *mut GV,
    pub gp_cv: *mut CV,
    pub gp_cvgen: U32,
    pub gp_flags: U32,
    pub gp_line: line_t,
    pub gp_file: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_gp() {
    assert_eq!(
        ::std::mem::size_of::<gp>(),
        88usize,
        concat!("Size of: ", stringify!(gp))
    );
    assert_eq!(
        ::std::mem::align_of::<gp>(),
        8usize,
        concat!("Alignment of ", stringify!(gp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_sv as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_io as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_form as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_av as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_hv as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_egv as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_egv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cv as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cvgen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_cvgen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_flags as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_line as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_file as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_file)
        )
    );
}
pub type PADLIST = AV;
pub type PADOFFSET = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvcv {
    pub xpv_pv: *mut ::std::os::raw::c_char,
    pub xpv_cur: STRLEN,
    pub xpv_len: STRLEN,
    pub xof_off: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xcv_stash: *mut HV,
    pub xcv_start: *mut OP,
    pub xcv_root: *mut OP,
    pub xcv_xsub: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CV)>,
    pub xcv_xsubany: ANY,
    pub xcv_gv: *mut GV,
    pub xcv_file: *mut ::std::os::raw::c_char,
    pub xcv_depth: ::std::os::raw::c_long,
    pub xcv_padlist: *mut PADLIST,
    pub xcv_outside: *mut CV,
    pub xcv_flags: cv_flags_t,
    pub xcv_outside_seq: U32,
}
#[test]
fn bindgen_test_layout_xpvcv() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv>(),
        144usize,
        concat!("Size of: ", stringify!(xpvcv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_cur as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xof_off as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xof_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_stash as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_start as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_root as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_xsub as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_xsub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_xsubany as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_xsubany)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_gv as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_file as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_depth as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_padlist as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_padlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_flags as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside_seq as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside_seq)
        )
    );
}
impl ::std::fmt::Debug for xpvcv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvcv {{ xpv_pv: {:?}, xpv_cur: {:?}, xpv_len: {:?}, xof_off: {:?}, xnv_nv: {:?}, xmg_magic: {:?}, xmg_stash: {:?}, xcv_stash: {:?}, xcv_start: {:?}, xcv_root: {:?}, xcv_xsub: {:?}, xcv_xsubany: {:?}, xcv_gv: {:?}, xcv_file: {:?}, xcv_depth: {:?}, xcv_padlist: {:?}, xcv_outside: {:?}, xcv_flags: {:?}, xcv_outside_seq: {:?} }}",
            self.xpv_pv,
            self.xpv_cur,
            self.xpv_len,
            self.xof_off,
            self.xnv_nv,
            self.xmg_magic,
            self.xmg_stash,
            self.xcv_stash,
            self.xcv_start,
            self.xcv_root,
            self.xcv_xsub,
            self.xcv_xsubany,
            self.xcv_gv,
            self.xcv_file,
            self.xcv_depth,
            self.xcv_padlist,
            self.xcv_outside,
            self.xcv_flags,
            self.xcv_outside_seq
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct op {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn() -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub op_type: U16,
    pub op_seq: U16,
    pub op_flags: U8,
    pub op_private: U8,
}
#[test]
fn bindgen_test_layout_op() {
    assert_eq!(
        ::std::mem::size_of::<op>(),
        40usize,
        concat!("Size of: ", stringify!(op))
    );
    assert_eq!(
        ::std::mem::align_of::<op>(),
        8usize,
        concat!("Alignment of ", stringify!(op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_seq as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_private as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_private)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pmop {
    pub op_next: *mut OP,
    pub op_sibling: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn() -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub op_type: U16,
    pub op_seq: U16,
    pub op_flags: U8,
    pub op_private: U8,
    pub op_first: *mut OP,
    pub op_last: *mut OP,
    pub op_pmreplroot: *mut OP,
    pub op_pmreplstart: *mut OP,
    pub op_pmnext: *mut PMOP,
    pub op_pmregexp: *mut REGEXP,
    pub op_pmflags: U32,
    pub op_pmpermflags: U32,
    pub op_pmdynflags: U8,
    pub op_pmstash: *mut HV,
}
#[test]
fn bindgen_test_layout_pmop() {
    assert_eq!(
        ::std::mem::size_of::<pmop>(),
        112usize,
        concat!("Size of: ", stringify!(pmop))
    );
    assert_eq!(
        ::std::mem::align_of::<pmop>(),
        8usize,
        concat!("Alignment of ", stringify!(pmop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_sibling as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_sibling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_seq as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_private as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_first as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_last as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmreplroot as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmreplroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmreplstart as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmreplstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmnext as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmnext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmregexp as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmregexp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmflags as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmpermflags as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmpermflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmdynflags as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmdynflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pmop>())).op_pmstash as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(pmop),
            "::",
            stringify!(op_pmstash)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvav {
    pub xav_array: *mut ::std::os::raw::c_char,
    pub xav_fill: isize,
    pub xav_max: isize,
    pub xof_off: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xav_alloc: *mut *mut SV,
    pub xav_arylen: *mut SV,
    pub xav_flags: U8,
}
#[test]
fn bindgen_test_layout_xpvav() {
    assert_eq!(
        ::std::mem::size_of::<xpvav>(),
        80usize,
        concat!("Size of: ", stringify!(xpvav))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvav))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_fill as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xof_off as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xof_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_alloc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_arylen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_arylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_flags)
        )
    );
}
pub type HE = he;
pub type HEK = hek;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct he {
    pub hent_next: *mut HE,
    pub hent_hek: *mut HEK,
    pub hent_val: *mut SV,
}
#[test]
fn bindgen_test_layout_he() {
    assert_eq!(
        ::std::mem::size_of::<he>(),
        24usize,
        concat!("Size of: ", stringify!(he))
    );
    assert_eq!(
        ::std::mem::align_of::<he>(),
        8usize,
        concat!("Alignment of ", stringify!(he))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_hek as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_hek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hek {
    pub hek_hash: U32,
    pub hek_len: I32,
    pub hek_key: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_hek() {
    assert_eq!(
        ::std::mem::size_of::<hek>(),
        12usize,
        concat!("Size of: ", stringify!(hek))
    );
    assert_eq!(
        ::std::mem::align_of::<hek>(),
        4usize,
        concat!("Alignment of ", stringify!(hek))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hek>())).hek_key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hek),
            "::",
            stringify!(hek_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xpvhv {
    pub xhv_array: *mut ::std::os::raw::c_char,
    pub xhv_fill: STRLEN,
    pub xhv_max: STRLEN,
    pub xhv_keys: IV,
    pub xnv_nv: NV,
    pub xmg_magic: *mut MAGIC,
    pub xmg_stash: *mut HV,
    pub xhv_riter: I32,
    pub xhv_eiter: *mut HE,
    pub xhv_pmroot: *mut PMOP,
    pub xhv_name: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_xpvhv() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv>(),
        88usize,
        concat!("Size of: ", stringify!(xpvhv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvhv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_fill as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_keys as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xnv_nv as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_magic as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_stash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_riter as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_riter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_eiter as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_eiter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_pmroot as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_pmroot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_name as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mgvtbl {
    pub svt_get: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_set: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_len: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> U32>,
    pub svt_clear: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_free: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_copy: ::std::option::Option<
        unsafe extern "C" fn(sv: *mut SV,
                             mg: *mut MAGIC,
                             nsv: *mut SV,
                             name: *const ::std::os::raw::c_char,
                             namlen: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub svt_dup: ::std::option::Option<unsafe extern "C" fn(mg: *mut MAGIC, param: *mut CLONE_PARAMS) -> ::std::os::raw::c_int>,
    pub svt_local: ::std::option::Option<unsafe extern "C" fn(nsv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_mgvtbl() {
    assert_eq!(
        ::std::mem::size_of::<mgvtbl>(),
        64usize,
        concat!("Size of: ", stringify!(mgvtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<mgvtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(mgvtbl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_get as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_set as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_clear as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_copy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_dup as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_dup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_local as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_local)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct magic {
    pub mg_moremagic: *mut MAGIC,
    pub mg_virtual: *mut MGVTBL,
    pub mg_private: U16,
    pub mg_type: ::std::os::raw::c_char,
    pub mg_flags: U8,
    pub mg_obj: *mut SV,
    pub mg_ptr: *mut ::std::os::raw::c_char,
    pub mg_len: I32,
}
#[test]
fn bindgen_test_layout_magic() {
    assert_eq!(
        ::std::mem::size_of::<magic>(),
        48usize,
        concat!("Size of: ", stringify!(magic))
    );
    assert_eq!(
        ::std::mem::align_of::<magic>(),
        8usize,
        concat!("Alignment of ", stringify!(magic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_moremagic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_moremagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_virtual as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_virtual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_private as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_type as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_flags as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_obj as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_ptr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct interpreter {
    pub broiled: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_interpreter() {
    assert_eq!(
        ::std::mem::size_of::<interpreter>(),
        1usize,
        concat!("Size of: ", stringify!(interpreter))
    );
    assert_eq!(
        ::std::mem::align_of::<interpreter>(),
        1usize,
        concat!("Alignment of ", stringify!(interpreter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).broiled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(broiled)
        )
    );
}
