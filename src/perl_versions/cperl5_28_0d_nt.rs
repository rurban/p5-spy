/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };

        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __IncompleteArrayField<T> {}
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl ::std::fmt::Debug for _opaque_pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "_opaque_pthread_mutex_t {{ __sig: {:?}, __opaque: [{}] }}",
            self.__sig,
            self.__opaque
                .iter()
                .enumerate()
                .map(|(i, v)| format!("{}{:?}", if i > 0 { ", " } else { "" }, v))
                .collect::<String>()
        )
    }
}
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _telldir {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DIR {
    pub __dd_fd: ::std::os::raw::c_int,
    pub __dd_loc: ::std::os::raw::c_long,
    pub __dd_size: ::std::os::raw::c_long,
    pub __dd_buf: *mut ::std::os::raw::c_char,
    pub __dd_len: ::std::os::raw::c_int,
    pub __dd_seek: ::std::os::raw::c_long,
    pub __dd_rewind: ::std::os::raw::c_long,
    pub __dd_flags: ::std::os::raw::c_int,
    pub __dd_lock: __darwin_pthread_mutex_t,
    pub __dd_td: *mut _telldir,
}
#[test]
fn bindgen_test_layout_DIR() {
    assert_eq!(
        ::std::mem::size_of::<DIR>(),
        136usize,
        concat!("Size of: ", stringify!(DIR))
    );
    assert_eq!(
        ::std::mem::align_of::<DIR>(),
        8usize,
        concat!("Alignment of ", stringify!(DIR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_loc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_buf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_seek as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_rewind as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_rewind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_lock as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DIR>())).__dd_td as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(DIR),
            "::",
            stringify!(__dd_td)
        )
    );
}
impl ::std::fmt::Debug for DIR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "DIR {{ __dd_fd: {:?}, __dd_loc: {:?}, __dd_size: {:?}, __dd_buf: {:?}, __dd_len: {:?}, __dd_seek: {:?}, __dd_rewind: {:?}, __dd_flags: {:?}, __dd_lock: {:?}, __dd_td: {:?} }}",
            self.__dd_fd,
            self.__dd_loc,
            self.__dd_size,
            self.__dd_buf,
            self.__dd_len,
            self.__dd_seek,
            self.__dd_rewind,
            self.__dd_flags,
            self.__dd_lock,
            self.__dd_td
        )
    }
}
pub type IV = ::std::os::raw::c_long;
pub type UV = ::std::os::raw::c_ulong;
pub type NV = f64;
pub type STRLEN = usize;
pub type OP = op;
pub type UNOP_AUX = unop_aux;
pub type PerlInterpreter = interpreter;
pub type SV = sv;
pub type AV = av;
pub type HV = hv;
pub type CV = cv;
pub type REGEXP = p5rx;
pub type GP = gp;
pub type GV = gv;
pub type MAGIC = magic;
pub type XPVAV = xpvav;
pub type XPVHV = xpvhv;
pub type XPVGV = xpvgv;
pub type XPVCV = xpvcv;
pub type XPVIO = xpvio;
pub type MGVTBL = mgvtbl;
pub type ANY = any;
pub type CLONE_PARAMS = clone_params;
pub type PADLIST = padlist;
pub type PAD = AV;
pub type PADNAMELIST = padnamelist;
pub type PADNAME = padname;
pub type U8 = ::std::os::raw::c_uchar;
pub type U16 = ::std::os::raw::c_ushort;
pub type I32 = ::std::os::raw::c_int;
pub type U32 = ::std::os::raw::c_uint;
pub type line_t = U32;
#[repr(C)]
#[derive(Copy, Clone)]pub union any { pub any_ptr : * mut :: std :: os :: raw :: c_void , pub any_sv : * mut SV , pub any_svp : * mut * mut SV , pub any_gv : * mut GV , pub any_av : * mut AV , pub any_hv : * mut HV , pub any_op : * mut OP , pub any_pv : * mut :: std :: os :: raw :: c_char , pub any_pvp : * mut * mut :: std :: os :: raw :: c_char , pub any_i32 : I32 , pub any_u32 : U32 , pub any_iv : IV , pub any_uv : UV , pub any_long : :: std :: os :: raw :: c_long , pub any_bool : bool , pub any_dptr : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , pub any_dxptr : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_any() {
    assert_eq!(
        ::std::mem::size_of::<any>(),
        8usize,
        concat!("Size of: ", stringify!(any))
    );
    assert_eq!(
        ::std::mem::align_of::<any>(),
        8usize,
        concat!("Alignment of ", stringify!(any))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_sv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_svp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_svp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_gv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_av as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_av)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_hv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_hv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_pvp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_pvp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_i32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_i32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_u32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_u32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_long as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_bool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).any_dxptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(any_dxptr)
        )
    );
}
impl ::std::fmt::Debug for any {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "any {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PerlIO {
    _unused: [u8; 0],
}
pub type PerlIOl = _PerlIO;
pub type PerlIO = *mut PerlIOl;
pub type HE = he;
pub type HEK = hek;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sv {
    pub sv_any: *mut ::std::os::raw::c_void,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: sv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union sv__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_sv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for sv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "sv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_sv() {
    assert_eq!(
        ::std::mem::size_of::<sv>(),
        24usize,
        concat!("Size of: ", stringify!(sv))
    );
    assert_eq!(
        ::std::mem::align_of::<sv>(),
        8usize,
        concat!("Alignment of ", stringify!(sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(sv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for sv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "sv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gv {
    pub sv_any: *mut XPVGV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: gv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union gv__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_gv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<gv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(gv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<gv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(gv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for gv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "gv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_gv() {
    assert_eq!(
        ::std::mem::size_of::<gv>(),
        24usize,
        concat!("Size of: ", stringify!(gv))
    );
    assert_eq!(
        ::std::mem::align_of::<gv>(),
        8usize,
        concat!("Alignment of ", stringify!(gv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(gv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for gv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "gv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cv {
    pub sv_any: *mut XPVCV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: cv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union cv__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_cv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for cv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "cv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_cv() {
    assert_eq!(
        ::std::mem::size_of::<cv>(),
        24usize,
        concat!("Size of: ", stringify!(cv))
    );
    assert_eq!(
        ::std::mem::align_of::<cv>(),
        8usize,
        concat!("Alignment of ", stringify!(cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(cv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for cv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "cv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct av {
    pub sv_any: *mut XPVAV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: av__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union av__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_av__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<av__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(av__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<av__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(av__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for av__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "av__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_av() {
    assert_eq!(
        ::std::mem::size_of::<av>(),
        24usize,
        concat!("Size of: ", stringify!(av))
    );
    assert_eq!(
        ::std::mem::align_of::<av>(),
        8usize,
        concat!("Alignment of ", stringify!(av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(av),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<av>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(av), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for av {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "av {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hv {
    pub sv_any: *mut XPVHV,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: hv__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union hv__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_hv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(hv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for hv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "hv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_hv() {
    assert_eq!(
        ::std::mem::size_of::<hv>(),
        24usize,
        concat!("Size of: ", stringify!(hv))
    );
    assert_eq!(
        ::std::mem::align_of::<hv>(),
        8usize,
        concat!("Alignment of ", stringify!(hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hv),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hv>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(hv), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for hv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "hv {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io {
    pub sv_any: *mut XPVIO,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: io__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union io__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_io__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<io__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(io__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<io__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for io__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "io__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_io() {
    assert_eq!(
        ::std::mem::size_of::<io>(),
        24usize,
        concat!("Size of: ", stringify!(io))
    );
    assert_eq!(
        ::std::mem::align_of::<io>(),
        8usize,
        concat!("Alignment of ", stringify!(io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(io),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<io>())).sv_u as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(io), "::", stringify!(sv_u))
    );
}
impl ::std::fmt::Debug for io {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "io {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct p5rx {
    pub sv_any: *mut regexp,
    pub sv_refcnt: U32,
    pub sv_flags: U32,
    pub sv_u: p5rx__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union p5rx__bindgen_ty_1 { pub svu_pv : * mut :: std :: os :: raw :: c_char , pub svu_iv : IV , pub svu_uv : UV , pub svu_nv : NV , pub svu_rv : * mut SV , pub svu_array : * mut * mut SV , pub svu_hash : * mut * mut HE , pub svu_gp : * mut GP , pub svu_fp : * mut PerlIO , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_p5rx__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<p5rx__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(p5rx__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<p5rx__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(p5rx__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_rv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_rv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_gp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_gp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx__bindgen_ty_1>())).svu_fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx__bindgen_ty_1),
            "::",
            stringify!(svu_fp)
        )
    );
}
impl ::std::fmt::Debug for p5rx__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "p5rx__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_p5rx() {
    assert_eq!(
        ::std::mem::size_of::<p5rx>(),
        24usize,
        concat!("Size of: ", stringify!(p5rx))
    );
    assert_eq!(
        ::std::mem::align_of::<p5rx>(),
        8usize,
        concat!("Alignment of ", stringify!(p5rx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx>())).sv_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx),
            "::",
            stringify!(sv_any)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx>())).sv_refcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx),
            "::",
            stringify!(sv_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx),
            "::",
            stringify!(sv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<p5rx>())).sv_u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(p5rx),
            "::",
            stringify!(sv_u)
        )
    );
}
impl ::std::fmt::Debug for p5rx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "p5rx {{ sv_any: {:?}, sv_refcnt: {:?}, sv_flags: {:?}, sv_u: {:?} }}",
            self.sv_any,
            self.sv_refcnt,
            self.sv_flags,
            self.sv_u
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union _xnvu { pub xnv_nv : NV , pub xgv_stash : * mut HV , pub xnv_lines : line_t , pub xnv_bm_tail : bool , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout__xnvu() {
    assert_eq!(
        ::std::mem::size_of::<_xnvu>(),
        8usize,
        concat!("Size of: ", stringify!(_xnvu))
    );
    assert_eq!(
        ::std::mem::align_of::<_xnvu>(),
        8usize,
        concat!("Alignment of ", stringify!(_xnvu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xnvu>())).xnv_nv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xnvu),
            "::",
            stringify!(xnv_nv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xnvu>())).xgv_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xnvu),
            "::",
            stringify!(xgv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xnvu>())).xnv_lines as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xnvu),
            "::",
            stringify!(xnv_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xnvu>())).xnv_bm_tail as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xnvu),
            "::",
            stringify!(xnv_bm_tail)
        )
    );
}
impl ::std::fmt::Debug for _xnvu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "_xnvu {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union _xivu { pub xivu_iv : IV , pub xivu_uv : UV , pub xivu_namehek : * mut HEK , pub xivu_eval_seen : bool , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout__xivu() {
    assert_eq!(
        ::std::mem::size_of::<_xivu>(),
        8usize,
        concat!("Size of: ", stringify!(_xivu))
    );
    assert_eq!(
        ::std::mem::align_of::<_xivu>(),
        8usize,
        concat!("Alignment of ", stringify!(_xivu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xivu>())).xivu_iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xivu),
            "::",
            stringify!(xivu_iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xivu>())).xivu_uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xivu),
            "::",
            stringify!(xivu_uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xivu>())).xivu_namehek as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xivu),
            "::",
            stringify!(xivu_namehek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xivu>())).xivu_eval_seen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xivu),
            "::",
            stringify!(xivu_eval_seen)
        )
    );
}
impl ::std::fmt::Debug for _xivu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "_xivu {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union _xmgu { pub xmg_magic : * mut MAGIC , pub xmg_hash_index : U32 , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout__xmgu() {
    assert_eq!(
        ::std::mem::size_of::<_xmgu>(),
        8usize,
        concat!("Size of: ", stringify!(_xmgu))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmgu>(),
        8usize,
        concat!("Alignment of ", stringify!(_xmgu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmgu>())).xmg_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmgu),
            "::",
            stringify!(xmg_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xmgu>())).xmg_hash_index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmgu),
            "::",
            stringify!(xmg_hash_index)
        )
    );
}
impl ::std::fmt::Debug for _xmgu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "_xmgu {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvgv {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xpv_cur: STRLEN,
    pub xpv_len_u: xpvgv__bindgen_ty_1,
    pub xiv_u: _xivu,
    pub xnv_u: _xnvu,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvgv__bindgen_ty_1 { pub xpvlenu_len : STRLEN , pub xpvlenu_rx : * mut regexp , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvgv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvgv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1>())).xpvlenu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv__bindgen_ty_1>())).xpvlenu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_rx)
        )
    );
}
impl ::std::fmt::Debug for xpvgv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvgv__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvgv() {
    assert_eq!(
        ::std::mem::size_of::<xpvgv>(),
        48usize,
        concat!("Size of: ", stringify!(xpvgv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvgv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvgv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xpv_len_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xpv_len_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xiv_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xiv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvgv>())).xnv_u as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvgv),
            "::",
            stringify!(xnv_u)
        )
    );
}
impl ::std::fmt::Debug for xpvgv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvgv {{ xmg_stash: {:?}, xmg_u: {:?}, xpv_cur: {:?}, xpv_len_u: {:?}, xiv_u: {:?}, xnv_u: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xpv_cur,
            self.xpv_len_u,
            self.xiv_u,
            self.xnv_u
        )
    }
}
pub type cv_flags_t = U32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvio {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xpv_cur: STRLEN,
    pub xpv_len_u: xpvio__bindgen_ty_1,
    pub xiv_u: _xivu,
    pub xio_ofp: *mut PerlIO,
    pub xio_dirpu: xpvio__bindgen_ty_2,
    pub xio_page: IV,
    pub xio_page_len: IV,
    pub xio_lines_left: IV,
    pub xio_top_name: *mut ::std::os::raw::c_char,
    pub xio_top_gv: *mut GV,
    pub xio_fmt_name: *mut ::std::os::raw::c_char,
    pub xio_fmt_gv: *mut GV,
    pub xio_bottom_name: *mut ::std::os::raw::c_char,
    pub xio_bottom_gv: *mut GV,
    pub xio_type: ::std::os::raw::c_char,
    pub xio_flags: U8,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvio__bindgen_ty_1 { pub xpvlenu_len : STRLEN , pub xpvlenu_rx : * mut regexp , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xpvlenu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_1>())).xpvlenu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_rx)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvio__bindgen_ty_2 { pub xiou_dirp : * mut DIR , pub xiou_any : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvio__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvio__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvio__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_2>())).xiou_dirp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_2),
            "::",
            stringify!(xiou_dirp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio__bindgen_ty_2>())).xiou_any as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio__bindgen_ty_2),
            "::",
            stringify!(xiou_any)
        )
    );
}
impl ::std::fmt::Debug for xpvio__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvio__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvio() {
    assert_eq!(
        ::std::mem::size_of::<xpvio>(),
        136usize,
        concat!("Size of: ", stringify!(xpvio))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvio>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xpv_len_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xpv_len_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xiv_u as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xiv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_ofp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_ofp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_dirpu as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_dirpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_page_len as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_page_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_lines_left as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_lines_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_name as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_top_gv as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_top_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_name as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_fmt_gv as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_fmt_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_name as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_bottom_gv as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_bottom_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_type as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvio>())).xio_flags as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvio),
            "::",
            stringify!(xio_flags)
        )
    );
}
impl ::std::fmt::Debug for xpvio {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvio {{ xmg_stash: {:?}, xmg_u: {:?}, xpv_cur: {:?}, xpv_len_u: {:?}, xiv_u: {:?}, xio_ofp: {:?}, xio_dirpu: {:?}, xio_page: {:?}, xio_page_len: {:?}, xio_lines_left: {:?}, xio_top_name: {:?}, xio_top_gv: {:?}, xio_fmt_name: {:?}, xio_fmt_gv: {:?}, xio_bottom_name: {:?}, xio_bottom_gv: {:?}, xio_type: {:?}, xio_flags: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xpv_cur,
            self.xpv_len_u,
            self.xiv_u,
            self.xio_ofp,
            self.xio_dirpu,
            self.xio_page,
            self.xio_page_len,
            self.xio_lines_left,
            self.xio_top_name,
            self.xio_top_gv,
            self.xio_fmt_name,
            self.xio_fmt_gv,
            self.xio_bottom_name,
            self.xio_bottom_gv,
            self.xio_type,
            self.xio_flags
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clone_params {
    pub stashes: *mut AV,
    pub flags: UV,
    pub proto_perl: *mut PerlInterpreter,
    pub new_perl: *mut PerlInterpreter,
    pub unreferenced: *mut AV,
}
#[test]
fn bindgen_test_layout_clone_params() {
    assert_eq!(
        ::std::mem::size_of::<clone_params>(),
        40usize,
        concat!("Size of: ", stringify!(clone_params))
    );
    assert_eq!(
        ::std::mem::align_of::<clone_params>(),
        8usize,
        concat!("Alignment of ", stringify!(clone_params))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).stashes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(stashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).proto_perl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(proto_perl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).new_perl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(new_perl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clone_params>())).unreferenced as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(clone_params),
            "::",
            stringify!(unreferenced)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_substr_datum {
    pub min_offset: isize,
    pub max_offset: isize,
    pub substr: *mut SV,
    pub utf8_substr: *mut SV,
    pub end_shift: isize,
}
#[test]
fn bindgen_test_layout_reg_substr_datum() {
    assert_eq!(
        ::std::mem::size_of::<reg_substr_datum>(),
        40usize,
        concat!("Size of: ", stringify!(reg_substr_datum))
    );
    assert_eq!(
        ::std::mem::align_of::<reg_substr_datum>(),
        8usize,
        concat!("Alignment of ", stringify!(reg_substr_datum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).min_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(min_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).max_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(max_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).substr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(substr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).utf8_substr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(utf8_substr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_datum>())).end_shift as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_datum),
            "::",
            stringify!(end_shift)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct reg_substr_data {
    pub check_ix: U8,
    pub data: [reg_substr_datum; 3usize],
}
#[test]
fn bindgen_test_layout_reg_substr_data() {
    assert_eq!(
        ::std::mem::size_of::<reg_substr_data>(),
        128usize,
        concat!("Size of: ", stringify!(reg_substr_data))
    );
    assert_eq!(
        ::std::mem::align_of::<reg_substr_data>(),
        8usize,
        concat!("Alignment of ", stringify!(reg_substr_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_data>())).check_ix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_data),
            "::",
            stringify!(check_ix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<reg_substr_data>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(reg_substr_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regexp_paren_pair {
    pub start: isize,
    pub end: isize,
    pub start_tmp: isize,
}
#[test]
fn bindgen_test_layout_regexp_paren_pair() {
    assert_eq!(
        ::std::mem::size_of::<regexp_paren_pair>(),
        24usize,
        concat!("Size of: ", stringify!(regexp_paren_pair))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp_paren_pair>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp_paren_pair))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_paren_pair>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_paren_pair),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_paren_pair>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_paren_pair),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_paren_pair>())).start_tmp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_paren_pair),
            "::",
            stringify!(start_tmp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct regexp {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xpv_cur: STRLEN,
    pub xpv_len_u: regexp__bindgen_ty_1,
    pub engine: *const regexp_engine,
    pub mother_re: *mut REGEXP,
    pub paren_names: *mut HV,
    pub extflags: U32,
    pub minlen: isize,
    pub minlenret: isize,
    pub gofs: STRLEN,
    pub substrs: *mut reg_substr_data,
    pub nparens: U32,
    pub intflags: U32,
    pub pprivate: *mut ::std::os::raw::c_void,
    pub lastparen: U32,
    pub lastcloseparen: U32,
    pub offs: *mut regexp_paren_pair,
    pub recurse_locinput: *mut *mut ::std::os::raw::c_char,
    pub subbeg: *mut ::std::os::raw::c_char,
    pub saved_copy: *mut SV,
    pub sublen: isize,
    pub suboffset: isize,
    pub subcoffset: isize,
    pub maxlen: isize,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub qr_anoncv: *mut CV,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union regexp__bindgen_ty_1 { pub xpvlenu_len : STRLEN , pub xpvlenu_rx : * mut regexp , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_regexp__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<regexp__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(regexp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp__bindgen_ty_1>())).xpvlenu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp__bindgen_ty_1>())).xpvlenu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_rx)
        )
    );
}
impl ::std::fmt::Debug for regexp__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "regexp__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_regexp() {
    assert_eq!(
        ::std::mem::size_of::<regexp>(),
        200usize,
        concat!("Size of: ", stringify!(regexp))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).xpv_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).xpv_len_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(xpv_len_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).engine as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).mother_re as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(mother_re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).paren_names as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(paren_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).extflags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(extflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).minlen as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(minlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).minlenret as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(minlenret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).gofs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(gofs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).substrs as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(substrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).nparens as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(nparens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).intflags as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(intflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).pprivate as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(pprivate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).lastparen as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(lastparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).lastcloseparen as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(lastcloseparen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).offs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).recurse_locinput as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(recurse_locinput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).subbeg as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(subbeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).saved_copy as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(saved_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).sublen as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(sublen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).suboffset as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(suboffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).subcoffset as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(subcoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).maxlen as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(maxlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp>())).qr_anoncv as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp),
            "::",
            stringify!(qr_anoncv)
        )
    );
}
impl ::std::fmt::Debug for regexp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "regexp {{ xmg_stash: {:?}, xmg_u: {:?}, xpv_cur: {:?}, xpv_len_u: {:?}, engine: {:?}, mother_re: {:?}, paren_names: {:?}, extflags: {:?}, minlen: {:?}, minlenret: {:?}, gofs: {:?}, substrs: {:?}, nparens: {:?}, intflags: {:?}, pprivate: {:?}, lastparen: {:?}, lastcloseparen: {:?}, offs: {:?}, recurse_locinput: {:?}, subbeg: {:?}, saved_copy: {:?}, sublen: {:?}, suboffset: {:?}, subcoffset: {:?}, maxlen: {:?}, pre_prefix : {:?}, compflags : {:?}, qr_anoncv: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xpv_cur,
            self.xpv_len_u,
            self.engine,
            self.mother_re,
            self.paren_names,
            self.extflags,
            self.minlen,
            self.minlenret,
            self.gofs,
            self.substrs,
            self.nparens,
            self.intflags,
            self.pprivate,
            self.lastparen,
            self.lastcloseparen,
            self.offs,
            self.recurse_locinput,
            self.subbeg,
            self.saved_copy,
            self.sublen,
            self.suboffset,
            self.subcoffset,
            self.maxlen,
            self.pre_prefix(),
            self.compflags(),
            self.qr_anoncv
        )
    }
}
impl regexp {
    #[inline]
    pub fn pre_prefix(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_pre_prefix(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn compflags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_compflags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(pre_prefix: ::std::os::raw::c_uint, compflags: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let pre_prefix: u32 = unsafe { ::std::mem::transmute(pre_prefix) };
            pre_prefix as u64
        });
        __bindgen_bitfield_unit.set(4usize, 9u8, {
            let compflags: u32 = unsafe { ::std::mem::transmute(compflags) };
            compflags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct re_scream_pos_data_s {
    pub scream_olds: *mut *mut ::std::os::raw::c_char,
    pub scream_pos: *mut isize,
}
#[test]
fn bindgen_test_layout_re_scream_pos_data_s() {
    assert_eq!(
        ::std::mem::size_of::<re_scream_pos_data_s>(),
        16usize,
        concat!("Size of: ", stringify!(re_scream_pos_data_s))
    );
    assert_eq!(
        ::std::mem::align_of::<re_scream_pos_data_s>(),
        8usize,
        concat!("Alignment of ", stringify!(re_scream_pos_data_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<re_scream_pos_data_s>())).scream_olds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(re_scream_pos_data_s),
            "::",
            stringify!(scream_olds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<re_scream_pos_data_s>())).scream_pos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(re_scream_pos_data_s),
            "::",
            stringify!(scream_pos)
        )
    );
}
pub type re_scream_pos_data = re_scream_pos_data_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct regexp_engine {
    pub comp: ::std::option::Option<unsafe extern "C" fn(pattern: *mut SV, flags: U32) -> *mut REGEXP>,
    pub exec: ::std::option::Option<
        unsafe extern "C" fn(rx: *mut REGEXP,
                             stringarg: *mut ::std::os::raw::c_char,
                             strend: *mut ::std::os::raw::c_char,
                             strbeg: *mut ::std::os::raw::c_char,
                             minend: isize,
                             sv: *mut SV,
                             data: *mut ::std::os::raw::c_void,
                             flags: U32) -> I32,
    >,
    pub intuit: ::std::option::Option<
        unsafe extern "C" fn(rx: *mut REGEXP,
                             sv: *mut SV,
                             strbeg: *const ::std::os::raw::c_char,
                             strpos: *mut ::std::os::raw::c_char,
                             strend: *mut ::std::os::raw::c_char,
                             flags: U32,
                             data: *mut re_scream_pos_data) -> *mut ::std::os::raw::c_char,
    >,
    pub checkstr: ::std::option::Option<unsafe extern "C" fn(rx: *mut REGEXP) -> *mut SV>,
    pub rxfree: ::std::option::Option<unsafe extern "C" fn(rx: *mut REGEXP)>,
    pub numbered_buff_FETCH: ::std::option::Option<unsafe extern "C" fn(rx: *mut REGEXP, paren: I32, sv: *mut SV)>,
    pub numbered_buff_STORE: ::std::option::Option<unsafe extern "C" fn(rx: *mut REGEXP, paren: I32, value: *const SV)>,
    pub numbered_buff_LENGTH: ::std::option::Option<unsafe extern "C" fn(rx: *mut REGEXP, sv: *const SV, paren: I32) -> I32>,
    pub named_buff: ::std::option::Option<unsafe extern "C" fn(rx: *mut REGEXP, key: *mut SV, value: *mut SV, flags: U32) -> *mut SV>,
    pub named_buff_iter: ::std::option::Option<unsafe extern "C" fn(rx: *mut REGEXP, lastkey: *const SV, flags: U32) -> *mut SV>,
    pub qr_package: ::std::option::Option<unsafe extern "C" fn(rx: *mut REGEXP) -> *mut SV>,
    pub op_comp: ::std::option::Option<
        unsafe extern "C" fn(patternp: *mut *mut SV,
                             pat_count: ::std::os::raw::c_int,
                             expr: *mut OP,
                             eng: *const regexp_engine,
                             old_re: *mut REGEXP,
                             is_bare_re: *mut bool,
                             orig_rx_flags: U32,
                             pm_flags: U32) -> *mut REGEXP,
    >,
}
#[test]
fn bindgen_test_layout_regexp_engine() {
    assert_eq!(
        ::std::mem::size_of::<regexp_engine>(),
        96usize,
        concat!("Size of: ", stringify!(regexp_engine))
    );
    assert_eq!(
        ::std::mem::align_of::<regexp_engine>(),
        8usize,
        concat!("Alignment of ", stringify!(regexp_engine))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).comp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(comp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).exec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(exec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).intuit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(intuit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).checkstr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(checkstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).rxfree as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(rxfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).numbered_buff_FETCH as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(numbered_buff_FETCH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).numbered_buff_STORE as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(numbered_buff_STORE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).numbered_buff_LENGTH as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(numbered_buff_LENGTH)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).named_buff as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(named_buff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).named_buff_iter as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(named_buff_iter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).qr_package as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(qr_package)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<regexp_engine>())).op_comp as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(regexp_engine),
            "::",
            stringify!(op_comp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gp {
    pub gp_sv: *mut SV,
    pub gp_io: *mut io,
    pub gp_cv: *mut CV,
    pub gp_cvgen: U32,
    pub gp_refcnt: U32,
    pub gp_hv: *mut HV,
    pub gp_av: *mut AV,
    pub gp_form: *mut CV,
    pub gp_egv: *mut GV,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub gp_file_hek: *mut HEK,
}
#[test]
fn bindgen_test_layout_gp() {
    assert_eq!(
        ::std::mem::size_of::<gp>(),
        80usize,
        concat!("Size of: ", stringify!(gp))
    );
    assert_eq!(
        ::std::mem::align_of::<gp>(),
        8usize,
        concat!("Alignment of ", stringify!(gp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_sv as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_sv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_io as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_io))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cv as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_cv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_cvgen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_cvgen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_refcnt as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_hv as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_hv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_av as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(gp), "::", stringify!(gp_av))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_form as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_form)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_egv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_egv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gp>())).gp_file_hek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(gp),
            "::",
            stringify!(gp_file_hek)
        )
    );
}
impl gp {
    #[inline]
    pub fn gp_line(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_gp_line(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn gp_flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gp_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(gp_line: ::std::os::raw::c_uint, gp_flags: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let gp_line: u32 = unsafe { ::std::mem::transmute(gp_line) };
            gp_line as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let gp_flags: u32 = unsafe { ::std::mem::transmute(gp_flags) };
            gp_flags as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type PADOFFSET = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct padlist {
    pub xpadl_max: isize,
    pub xpadl_arr: padlist__bindgen_ty_1,
    pub xpadl_id: U32,
    pub xpadl_outid: U32,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union padlist__bindgen_ty_1 { pub xpadlarr_alloc : * mut * mut PAD , pub xpadlarr_dbg : * mut padlist__bindgen_ty_1__bindgen_ty_1 , _bindgen_union_align : u64 , }#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct padlist__bindgen_ty_1__bindgen_ty_1 {
    pub padnl: *mut PADNAMELIST,
    pub pad_1: *mut PAD,
    pub pad_2: *mut PAD,
}
#[test]
fn bindgen_test_layout_padlist__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<padlist__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(padlist__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<padlist__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(padlist__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist__bindgen_ty_1__bindgen_ty_1>())).padnl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(padnl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist__bindgen_ty_1__bindgen_ty_1>())).pad_1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pad_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist__bindgen_ty_1__bindgen_ty_1>())).pad_2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pad_2)
        )
    );
}
#[test]
fn bindgen_test_layout_padlist__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<padlist__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(padlist__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<padlist__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(padlist__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist__bindgen_ty_1>())).xpadlarr_alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist__bindgen_ty_1),
            "::",
            stringify!(xpadlarr_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist__bindgen_ty_1>())).xpadlarr_dbg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist__bindgen_ty_1),
            "::",
            stringify!(xpadlarr_dbg)
        )
    );
}
impl ::std::fmt::Debug for padlist__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "padlist__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_padlist() {
    assert_eq!(
        ::std::mem::size_of::<padlist>(),
        24usize,
        concat!("Size of: ", stringify!(padlist))
    );
    assert_eq!(
        ::std::mem::align_of::<padlist>(),
        8usize,
        concat!("Alignment of ", stringify!(padlist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist>())).xpadl_max as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist),
            "::",
            stringify!(xpadl_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist>())).xpadl_arr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist),
            "::",
            stringify!(xpadl_arr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist>())).xpadl_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist),
            "::",
            stringify!(xpadl_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padlist>())).xpadl_outid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(padlist),
            "::",
            stringify!(xpadl_outid)
        )
    );
}
impl ::std::fmt::Debug for padlist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "padlist {{ xpadl_max: {:?}, xpadl_arr: {:?}, xpadl_id: {:?}, xpadl_outid: {:?} }}",
            self.xpadl_max,
            self.xpadl_arr,
            self.xpadl_id,
            self.xpadl_outid
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct padnamelist {
    pub xpadnl_fill: isize,
    pub xpadnl_alloc: *mut *mut PADNAME,
    pub xpadnl_max: isize,
    pub xpadnl_max_named: PADOFFSET,
    pub xpadnl_refcnt: U32,
}
#[test]
fn bindgen_test_layout_padnamelist() {
    assert_eq!(
        ::std::mem::size_of::<padnamelist>(),
        40usize,
        concat!("Size of: ", stringify!(padnamelist))
    );
    assert_eq!(
        ::std::mem::align_of::<padnamelist>(),
        8usize,
        concat!("Alignment of ", stringify!(padnamelist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_fill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_alloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_max as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_max_named as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_max_named)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padnamelist>())).xpadnl_refcnt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(padnamelist),
            "::",
            stringify!(xpadnl_refcnt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct padname {
    pub xpadn_pv: *mut ::std::os::raw::c_char,
    pub xpadn_ourstash: *mut HV,
    pub xpadn_type_u: padname__bindgen_ty_1,
    pub xpadn_low: U32,
    pub xpadn_high: U32,
    pub xpadn_refcnt: U32,
    pub xpadn_gen: ::std::os::raw::c_int,
    pub xpadn_len: U8,
    pub xpadn_flags: U8,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union padname__bindgen_ty_1 { pub xpadn_typestash : * mut HV , pub xpadn_protocv : * mut CV , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_padname__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<padname__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(padname__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<padname__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(padname__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname__bindgen_ty_1>())).xpadn_typestash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padname__bindgen_ty_1),
            "::",
            stringify!(xpadn_typestash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname__bindgen_ty_1>())).xpadn_protocv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padname__bindgen_ty_1),
            "::",
            stringify!(xpadn_protocv)
        )
    );
}
impl ::std::fmt::Debug for padname__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "padname__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_padname() {
    assert_eq!(
        ::std::mem::size_of::<padname>(),
        48usize,
        concat!("Size of: ", stringify!(padname))
    );
    assert_eq!(
        ::std::mem::align_of::<padname>(),
        8usize,
        concat!("Alignment of ", stringify!(padname))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_ourstash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_ourstash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_type_u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_type_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_low as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_high as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_high)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_refcnt as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_gen as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<padname>())).xpadn_flags as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(padname),
            "::",
            stringify!(xpadn_flags)
        )
    );
}
impl ::std::fmt::Debug for padname {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "padname {{ xpadn_pv: {:?}, xpadn_ourstash: {:?}, xpadn_type_u: {:?}, xpadn_low: {:?}, xpadn_high: {:?}, xpadn_refcnt: {:?}, xpadn_gen: {:?}, xpadn_len: {:?}, xpadn_flags: {:?} }}",
            self.xpadn_pv,
            self.xpadn_ourstash,
            self.xpadn_type_u,
            self.xpadn_low,
            self.xpadn_high,
            self.xpadn_refcnt,
            self.xpadn_gen,
            self.xpadn_len,
            self.xpadn_flags
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvcv {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xpv_cur: STRLEN,
    pub xpv_len_u: xpvcv__bindgen_ty_1,
    pub xcv_stash: *mut HV,
    pub xcv_start_u: xpvcv__bindgen_ty_2,
    pub xcv_root_u: xpvcv__bindgen_ty_3,
    pub xcv_gv_u: xpvcv__bindgen_ty_4,
    pub xcv_file: *mut ::std::os::raw::c_char,
    pub xcv_padlist_u: xpvcv__bindgen_ty_5,
    pub xcv_outside: *mut CV,
    pub xcv_outside_seq: U32,
    pub xcv_flags: cv_flags_t,
    pub xcv_depth: I32,
    pub xcv_sigop: *mut UNOP_AUX,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_1 { pub xpvlenu_len : STRLEN , pub xpvlenu_rx : * mut regexp , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1>())).xpvlenu_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_1>())).xpvlenu_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_1),
            "::",
            stringify!(xpvlenu_rx)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_2 { pub xcv_start : * mut OP , pub xcv_xsubany : ANY , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_2>())).xcv_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_2),
            "::",
            stringify!(xcv_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_2>())).xcv_xsubany as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_2),
            "::",
            stringify!(xcv_xsubany)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_3 { pub xcv_root : * mut OP , pub xcv_xsub : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut CV ) > , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_3>())).xcv_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_3),
            "::",
            stringify!(xcv_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_3>())).xcv_xsub as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_3),
            "::",
            stringify!(xcv_xsub)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_3 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_4 { pub xcv_gv : * mut GV , pub xcv_hek : * mut HEK , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_4>())).xcv_gv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_4),
            "::",
            stringify!(xcv_gv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_4>())).xcv_hek as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_4),
            "::",
            stringify!(xcv_hek)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_4 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union xpvcv__bindgen_ty_5 { pub xcv_padlist : * mut PADLIST , pub xcv_hscxt : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_xpvcv__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(xpvcv__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_5>())).xcv_padlist as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_5),
            "::",
            stringify!(xcv_padlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv__bindgen_ty_5>())).xcv_hscxt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv__bindgen_ty_5),
            "::",
            stringify!(xcv_hscxt)
        )
    );
}
impl ::std::fmt::Debug for xpvcv__bindgen_ty_5 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "xpvcv__bindgen_ty_5 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_xpvcv() {
    assert_eq!(
        ::std::mem::size_of::<xpvcv>(),
        112usize,
        concat!("Size of: ", stringify!(xpvcv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvcv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvcv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xpv_len_u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xpv_len_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_stash as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_start_u as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_start_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_root_u as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_root_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_gv_u as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_gv_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_file as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_padlist_u as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_padlist_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_outside_seq as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_outside_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_flags as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_depth as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvcv>())).xcv_sigop as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvcv),
            "::",
            stringify!(xcv_sigop)
        )
    );
}
impl ::std::fmt::Debug for xpvcv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvcv {{ xmg_stash: {:?}, xmg_u: {:?}, xpv_cur: {:?}, xpv_len_u: {:?}, xcv_stash: {:?}, xcv_start_u: {:?}, xcv_root_u: {:?}, xcv_gv_u: {:?}, xcv_file: {:?}, xcv_padlist_u: {:?}, xcv_outside: {:?}, xcv_outside_seq: {:?}, xcv_flags: {:?}, xcv_depth: {:?}, xcv_sigop: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xpv_cur,
            self.xpv_len_u,
            self.xcv_stash,
            self.xcv_start_u,
            self.xcv_root_u,
            self.xcv_gv_u,
            self.xcv_file,
            self.xcv_padlist_u,
            self.xcv_outside,
            self.xcv_outside_seq,
            self.xcv_flags,
            self.xcv_depth,
            self.xcv_sigop
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]pub union UNOP_AUX_item { pub pad_offset : PADOFFSET , pub sv : * mut SV , pub iv : IV , pub uv : UV , pub pv : * mut :: std :: os :: raw :: c_char , pub ssize : isize , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_UNOP_AUX_item() {
    assert_eq!(
        ::std::mem::size_of::<UNOP_AUX_item>(),
        8usize,
        concat!("Size of: ", stringify!(UNOP_AUX_item))
    );
    assert_eq!(
        ::std::mem::align_of::<UNOP_AUX_item>(),
        8usize,
        concat!("Alignment of ", stringify!(UNOP_AUX_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).pad_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(pad_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).sv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(sv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(uv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).pv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(pv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNOP_AUX_item>())).ssize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNOP_AUX_item),
            "::",
            stringify!(ssize)
        )
    );
}
impl ::std::fmt::Debug for UNOP_AUX_item {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "UNOP_AUX_item {{ union }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct op {
    pub op_next: *mut OP,
    pub op_sibparent: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn() -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub op_flags: U8,
    pub op_private: U8,
    pub op_rettype: U8,
}
#[test]
fn bindgen_test_layout_op() {
    assert_eq!(
        ::std::mem::size_of::<op>(),
        40usize,
        concat!("Size of: ", stringify!(op))
    );
    assert_eq!(
        ::std::mem::align_of::<op>(),
        8usize,
        concat!("Alignment of ", stringify!(op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_sibparent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_sibparent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_flags as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_private as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<op>())).op_rettype as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(op),
            "::",
            stringify!(op_rettype)
        )
    );
}
impl op {
    #[inline]
    pub fn op_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_op_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn op_opt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_opt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_slabbed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_slabbed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_savefree(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_savefree(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_static(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_static(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_folded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_folded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_moresib(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_moresib(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_typechecked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_typechecked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(op_type: ::std::os::raw::c_uint, op_opt: ::std::os::raw::c_uint, op_slabbed: ::std::os::raw::c_uint, op_savefree: ::std::os::raw::c_uint, op_static: ::std::os::raw::c_uint, op_folded: ::std::os::raw::c_uint, op_moresib: ::std::os::raw::c_uint, op_typechecked: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let op_type: u32 = unsafe { ::std::mem::transmute(op_type) };
            op_type as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let op_opt: u32 = unsafe { ::std::mem::transmute(op_opt) };
            op_opt as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let op_slabbed: u32 = unsafe { ::std::mem::transmute(op_slabbed) };
            op_slabbed as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let op_savefree: u32 = unsafe { ::std::mem::transmute(op_savefree) };
            op_savefree as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let op_static: u32 = unsafe { ::std::mem::transmute(op_static) };
            op_static as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let op_folded: u32 = unsafe { ::std::mem::transmute(op_folded) };
            op_folded as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let op_moresib: u32 = unsafe { ::std::mem::transmute(op_moresib) };
            op_moresib as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let op_typechecked: u32 = unsafe { ::std::mem::transmute(op_typechecked) };
            op_typechecked as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unop_aux {
    pub op_next: *mut OP,
    pub op_sibparent: *mut OP,
    pub op_ppaddr: ::std::option::Option<unsafe extern "C" fn() -> *mut OP>,
    pub op_targ: PADOFFSET,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub op_flags: U8,
    pub op_private: U8,
    pub op_rettype: U8,
    pub op_first: *mut OP,
    pub op_aux: *mut UNOP_AUX_item,
}
#[test]
fn bindgen_test_layout_unop_aux() {
    assert_eq!(
        ::std::mem::size_of::<unop_aux>(),
        56usize,
        concat!("Size of: ", stringify!(unop_aux))
    );
    assert_eq!(
        ::std::mem::align_of::<unop_aux>(),
        8usize,
        concat!("Alignment of ", stringify!(unop_aux))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unop_aux>())).op_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(unop_aux),
            "::",
            stringify!(op_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unop_aux>())).op_sibparent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(unop_aux),
            "::",
            stringify!(op_sibparent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unop_aux>())).op_ppaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(unop_aux),
            "::",
            stringify!(op_ppaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unop_aux>())).op_targ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(unop_aux),
            "::",
            stringify!(op_targ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unop_aux>())).op_flags as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(unop_aux),
            "::",
            stringify!(op_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unop_aux>())).op_private as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(unop_aux),
            "::",
            stringify!(op_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unop_aux>())).op_rettype as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(unop_aux),
            "::",
            stringify!(op_rettype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unop_aux>())).op_first as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(unop_aux),
            "::",
            stringify!(op_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<unop_aux>())).op_aux as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(unop_aux),
            "::",
            stringify!(op_aux)
        )
    );
}
impl unop_aux {
    #[inline]
    pub fn op_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_op_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn op_opt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_opt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_slabbed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_slabbed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_savefree(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_savefree(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_static(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_static(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_folded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_folded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_moresib(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_moresib(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn op_typechecked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_op_typechecked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(op_type: ::std::os::raw::c_uint, op_opt: ::std::os::raw::c_uint, op_slabbed: ::std::os::raw::c_uint, op_savefree: ::std::os::raw::c_uint, op_static: ::std::os::raw::c_uint, op_folded: ::std::os::raw::c_uint, op_moresib: ::std::os::raw::c_uint, op_typechecked: ::std::os::raw::c_uint) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let op_type: u32 = unsafe { ::std::mem::transmute(op_type) };
            op_type as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let op_opt: u32 = unsafe { ::std::mem::transmute(op_opt) };
            op_opt as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let op_slabbed: u32 = unsafe { ::std::mem::transmute(op_slabbed) };
            op_slabbed as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let op_savefree: u32 = unsafe { ::std::mem::transmute(op_savefree) };
            op_savefree as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let op_static: u32 = unsafe { ::std::mem::transmute(op_static) };
            op_static as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let op_folded: u32 = unsafe { ::std::mem::transmute(op_folded) };
            op_folded as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let op_moresib: u32 = unsafe { ::std::mem::transmute(op_moresib) };
            op_moresib as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let op_typechecked: u32 = unsafe { ::std::mem::transmute(op_typechecked) };
            op_typechecked as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct he {
    pub hent_next: *mut HE,
    pub hent_hek: *mut HEK,
    pub he_valu: he__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]pub union he__bindgen_ty_1 { pub hent_val : * mut SV , pub hent_refcount : usize , _bindgen_union_align : u64 , }#[test]
fn bindgen_test_layout_he__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<he__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(he__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<he__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(he__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he__bindgen_ty_1>())).hent_val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he__bindgen_ty_1),
            "::",
            stringify!(hent_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he__bindgen_ty_1>())).hent_refcount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he__bindgen_ty_1),
            "::",
            stringify!(hent_refcount)
        )
    );
}
impl ::std::fmt::Debug for he__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "he__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_he() {
    assert_eq!(
        ::std::mem::size_of::<he>(),
        24usize,
        concat!("Size of: ", stringify!(he))
    );
    assert_eq!(
        ::std::mem::align_of::<he>(),
        8usize,
        concat!("Alignment of ", stringify!(he))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).hent_hek as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(hent_hek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<he>())).he_valu as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(he),
            "::",
            stringify!(he_valu)
        )
    );
}
impl ::std::fmt::Debug for he {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "he {{ hent_next: {:?}, hent_hek: {:?}, he_valu: {:?} }}",
            self.hent_next,
            self.hent_hek,
            self.he_valu
        )
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct hek {
    pub hek_hash: U32,
    pub hek_len: I32,
    pub hek_key: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_hek() {
    assert_eq!(
        ::std::mem::size_of::<hek>(),
        8usize,
        concat!("Size of: ", stringify!(hek))
    );
    assert_eq!(
        ::std::mem::align_of::<hek>(),
        4usize,
        concat!("Alignment of ", stringify!(hek))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvhv {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xhv_keys: U32,
    pub xhv_max: U32,
}
#[test]
fn bindgen_test_layout_xpvhv() {
    assert_eq!(
        ::std::mem::size_of::<xpvhv>(),
        24usize,
        concat!("Size of: ", stringify!(xpvhv))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvhv>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvhv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_keys as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvhv>())).xhv_max as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvhv),
            "::",
            stringify!(xhv_max)
        )
    );
}
impl ::std::fmt::Debug for xpvhv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvhv {{ xmg_stash: {:?}, xmg_u: {:?}, xhv_keys: {:?}, xhv_max: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xhv_keys,
            self.xhv_max
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xpvav {
    pub xmg_stash: *mut HV,
    pub xmg_u: _xmgu,
    pub xav_fill: isize,
    pub xav_max: isize,
    pub xav_alloc: *mut *mut SV,
}
#[test]
fn bindgen_test_layout_xpvav() {
    assert_eq!(
        ::std::mem::size_of::<xpvav>(),
        40usize,
        concat!("Size of: ", stringify!(xpvav))
    );
    assert_eq!(
        ::std::mem::align_of::<xpvav>(),
        8usize,
        concat!("Alignment of ", stringify!(xpvav))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_stash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_stash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xmg_u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xmg_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_fill as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_max as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xpvav>())).xav_alloc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xpvav),
            "::",
            stringify!(xav_alloc)
        )
    );
}
impl ::std::fmt::Debug for xpvav {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(
            f,
            "xpvav {{ xmg_stash: {:?}, xmg_u: {:?}, xav_fill: {:?}, xav_max: {:?}, xav_alloc: {:?} }}",
            self.xmg_stash,
            self.xmg_u,
            self.xav_fill,
            self.xav_max,
            self.xav_alloc
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mgvtbl {
    pub svt_get: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_set: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_len: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> U32>,
    pub svt_clear: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_free: ::std::option::Option<unsafe extern "C" fn(sv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
    pub svt_copy: ::std::option::Option<
        unsafe extern "C" fn(sv: *mut SV,
                             mg: *mut MAGIC,
                             nsv: *mut SV,
                             name: *const ::std::os::raw::c_char,
                             namlen: I32) -> ::std::os::raw::c_int,
    >,
    pub svt_dup: ::std::option::Option<unsafe extern "C" fn(mg: *mut MAGIC, param: *mut CLONE_PARAMS) -> ::std::os::raw::c_int>,
    pub svt_local: ::std::option::Option<unsafe extern "C" fn(nsv: *mut SV, mg: *mut MAGIC) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_mgvtbl() {
    assert_eq!(
        ::std::mem::size_of::<mgvtbl>(),
        64usize,
        concat!("Size of: ", stringify!(mgvtbl))
    );
    assert_eq!(
        ::std::mem::align_of::<mgvtbl>(),
        8usize,
        concat!("Alignment of ", stringify!(mgvtbl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_get as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_set as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_clear as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_free as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_copy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_dup as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_dup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mgvtbl>())).svt_local as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mgvtbl),
            "::",
            stringify!(svt_local)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct magic {
    pub mg_moremagic: *mut MAGIC,
    pub mg_virtual: *mut MGVTBL,
    pub mg_private: U16,
    pub mg_type: ::std::os::raw::c_char,
    pub mg_flags: U8,
    pub mg_len: isize,
    pub mg_obj: *mut SV,
    pub mg_ptr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_magic() {
    assert_eq!(
        ::std::mem::size_of::<magic>(),
        48usize,
        concat!("Size of: ", stringify!(magic))
    );
    assert_eq!(
        ::std::mem::align_of::<magic>(),
        8usize,
        concat!("Alignment of ", stringify!(magic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_moremagic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_moremagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_virtual as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_virtual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_private as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_private)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_type as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_flags as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_obj as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<magic>())).mg_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(magic),
            "::",
            stringify!(mg_ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct interpreter {
    pub broiled: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_interpreter() {
    assert_eq!(
        ::std::mem::size_of::<interpreter>(),
        1usize,
        concat!("Size of: ", stringify!(interpreter))
    );
    assert_eq!(
        ::std::mem::align_of::<interpreter>(),
        1usize,
        concat!("Alignment of ", stringify!(interpreter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<interpreter>())).broiled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(interpreter),
            "::",
            stringify!(broiled)
        )
    );
}
